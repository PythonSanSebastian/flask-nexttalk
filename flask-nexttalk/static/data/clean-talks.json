{"Poster sessions": {"287": {"id": 287, "abstracts": ["We learn best when we are relaxed, curious and enjoying ourselves. Without knowing a lot of Python, making a fun-to-play game is an achievable goal. Without knowing anything about programming, playing a game can be an accessible way to understand how programs work. The poster will invite people to consider the role of play in adult learning. (Much of it will also be relevent to teachers of younger people.) It will frame success and failure in the context of taking part, winning and losing.\r\n\r\nThe poster will give examples of games that are within the reach of a beginner programmer to design and build. It will explore what makes a well-designed game and how to develop good design elements simply. The goal is for people to identify resources for learning and developing Python skills based around building games. This will include: practice opportunities, Python libraries for game-building, and useful programming concepts.\r\n\r\nIf there are the facilities (small table and access to power) I will demonstrate **one** game during the poster session. The goal will be to illustrate the concepts, of good design and developing learning, introduced in my poster. It will have input and output interaction using a **Raspberry Pi** and basic electronics.\r\n\r\n"], "have_tickets": [false], "title": "Perceptions of Play: learning Python through games", "speakers": "Corinne Welsh", "track_title": "", "timerange": "", "duration": 90, "tags": ["Beginners", "pygame", "pyglet", "education", "games", "projects", "raspberrypi", "teaching", "learning", "fun", "Best Practice"]}, "141": {"id": 141, "abstracts": ["Inside [Aldebaran][1] company the goal of our team is to explore all the domains required for natural and efficient human-robot interaction. We mainly use python stack (scipy, numpy, scikit-learn) in our daily work as it provides a fast and efficient workflow to create and tune our robot behaviors.\r\n\r\nIn this presentation we will describe and demonstrate how we achieve real time sound event recognition on humanoids robots using python and scikit-learn. This work is funded by european project EARS in which our study case is a groom hotel robot that help customers : Two robots are waiting in a hotel lobby. They welcome people and give them relevant information. The robots detect and recognize sounds type such as: Door bell, phone ring, fire alarm, etc. New sounds could be easily learned by the robots.\r\n\r\nThe talk will be done by two human speakers followed by a live demonstration with NAO robots on the stage. Code and data will be published so everyone can experiments with sound recorded on the robots.", "Inside [Aldebaran][1] company the goal of our team is to explore all the domains required for natural and efficient human-robot interaction. We mainly use python stack (scipy, numpy, scikit-learn) in our daily work as it provides a fast and efficient workflow to create and tune our robot behaviors.\r\n\r\nIn this presentation we will describe and demonstrate how we achieve real time sound event recognition on humanoids robots using python and scikit-learn. This work is funded by european project EARS in which our study case is a groom hotel robot that help customers : Two robots are waiting in a hotel lobby. They welcome people and give them relevant information. The robots detect and recognize sounds type such as: Door bell, phone ring, fire alarm, etc. New sounds could be easily learned by the robots.\r\n\r\nThe talk will be done by two human speakers followed by a live demonstration with NAO robots on the stage. Code and data will be published so everyone can experiments with sound recorded on the robots.\r\n\r\nThe second speaker is [Alexandre Mazel][2].\r\n\r\n![][3]\r\n\r\n  [1]: https://www.aldebaran.com/en\r\n  [2]: https://ep2015.europython.eu/conference/p/alexandre-mazel\r\n  [3]: http://studio.aldebaran-robotics.com/amazel/ears__sound_event_recognition/ears__sound_event_recognition.jpg\r\n", ""], "have_tickets": [false], "title": "Sound event recognition using python : application to humanoid robots with limited cpu", "speakers": "Laurent George", "track_title": "", "timerange": "", "duration": 90, "tags": ["robotics", "sound", "machine-learning", "scipy", "numpy", "sklearn"]}, "190": {"id": 190, "abstracts": ["We propose a web BI dashboard system developed for companies operating in the big market composed by several point of sales (POS) and providing services as stocking, distribution logistics, commercial support and promotional actions. \r\n\r\nWe have endowed the infrastructure with a set of statistical machine learning tools typical of high throughput bioinformatics, e.g., clustering procedures for time-series. Machine learning functionalities are actionable from on-line graphs, such as biclustering panels in which subset of retails and sales categories can be interactively selected. Currently 250 million entries are managed from the sales stream within the system. Network analysis (detection of community structure and co-occurrence patterns) combined with geospatial and socio-economic data are being developed as strategic tools.\r\n\r\nThe system is implemented as a web-based Django framework deployed on a AWS machine, using Celery and Redis to distribute tasks. This scalable framework can be accessed through a web interface from the strategic marketing and R&D departments and other directive figures; a similar and leaner interface is available for the individual POS owners. The web interface integrates Javascript libraries to obtain interactive displays connecting machine learning and data exploration (D3js, Highcharts, Sigma.js, Heatmap.js, leaflet, InCHlib). In particular we fork the django-highchart repository to improve functionalities available for the Django framework. Actionable dendrogram structures and sunburst plots allow the handling of big taxonomies typical of the category managment reference structures. Internally, the statistical machine learning methods are deployed as stored procedures for a PostgreSQL/PostGIS database, powered by the PL/R and PL/Python extensions. "], "have_tickets": [true], "title": "Actionable data analytics in retail marketing analysis", "speakers": "Ernesto Arbitrio", "track_title": "", "timerange": "", "duration": 90, "tags": ["python", "R", "data-science", "machine-learning", "visualization", "postgresql", "predictions", "django"]}, "125": {"id": 125, "abstracts": ["GR is an universal framework for cross-platform visualization applications. It offers developers a compact, portable and consistent graphics library for their programs. Its procedural graphics backend allows the presentation of continuous data streams. For object oriented environments such as graphical user interfaces a high level API has been implemented.\r\n\r\nIn this poster session, I will present PyGR, a companion module for GR that provides convenience functions for the interactive handling of real-time data, e.g. by zooming or panning. Using the QtGR module it is possible to easily integrate GR into GUI toolkits like Qt. It provides powerful widgets for 2D plotting and methods for embedding graphics into user interfaces based on PySide or PyQt.\r\n\r\nHowever, PyGR is not limited to a specific toolkit. The system\u2019s capabilities will be illustrated using concrete examples, e.g. NICOS, a network-based experiment and instrument control system used for neutron scattering experiments at FRM II in Munich.", "", ""], "have_tickets": [true], "title": "Embedding Visualization Applications with PyGR", "speakers": "Christian Felder", "track_title": "", "timerange": "", "duration": 90, "tags": ["visualization", "python"]}, "83": {"id": 83, "abstracts": ["Mongo-Board is a project focused on offering/building a graphical user interface to MongoDB replica set management and core-processes operations. The functionality is provided in two forms: a **standalone** core library that provides automation over MongoDB administrative operations and the **Mongo-Board UI**.  A showcase in the form of an educational tool of its underlying library's possible usage where users can interact with a MongoDB cluster to perform various actions and view a log of all commands executed.\r\n\r\nCore features includes:\r\n\r\n-**MongoDB Instance Management** - connect to multiple remote servers, start/stop database instances, import/export database data\r\n\r\n -**Replica Set Management** - deploy, configure and maintain replica sets\r\n\r\nFirst, we developed a solution completely in PHP and currently we are in the middle of porting the back-end library into Python. I  want to present our experience with MongoDB and discuss the architecture, challenges, solutions and open questions. \r\n\r\nThe poster will pose an interest to people passionate about client-server architecture, MongoDB management, administration and monitoring of processes, automation, as well as educational tools.\r\n\r\n [Article detailing some aspects of our initial project][1]\r\n\r\n[Video showcase][2]\r\n\r\n  [1]: https://eastvisionsystems.com/mongoboard-replica-set-manager/\r\n  [2]: https://eastvisionsystems.com/projects/#player4\r\n"], "have_tickets": [true], "title": "MongoBoard - A MongoDB replica set manager", "speakers": "Alex Porcescu", "track_title": "", "timerange": "", "duration": 90, "tags": ["automation", "mongodb", "learning", "linux", "system-administration"]}, "350": {"id": 350, "abstracts": ["DTOcean is a European collaborative project funded by the European Commission under the 7th Framework Programme for Research and Development. DTOcean that stands for Optimal Design Tools for Ocean Energy Arrays aims at at accelerating the industrial development of ocean energy power generation knowledge, and providing design tools for deploying the first generation of wave and tidal energy converter arrays. It gathers 18 partners from 11 countries (Ireland, Spain, United Kingdom, Germany, Portugal, France, Norway, Denmark, Sweden, Belgium and United States of America) under the coordination of the University of Edinburgh.\r\n\r\nDTOcean is developing an open source numerical tool using Python and many of the libraries developed for use with Python. This talk will discuss both the academic challenges of meeting the goals of the project and the technical challenges of organising and structuring a project consisting of many geographically dispersed partners with distinct tasks, but requiring close integration to solve the global optimisation problem.", "", ""], "have_tickets": [false], "title": "DTOcean: Optimal Design Tools for Ocean Energy Arrays", "speakers": "Mathew Topper", "track_title": "", "timerange": "", "duration": 90, "tags": ["science", "python", "data"]}, "68": {"id": 68, "abstracts": ["Parallel Programming Constructs and Techniques\r\nUsing an Embedded Flexible Language (EFL) for Python\r\n\r\nM. Goldstein ,  D. Dayan, D. Berlowitz, O. Berlowitz, Max Rabin, M. Nagar, D. Soudry, R. B. Yehezkael\r\n\r\nMulti-core CPUs are abundant and utilizing them effectively requires programmers to parallelize CPU-intensive code. To facilitate this, we have developed EFL, a deterministic parallel programming tool. \r\nThe parallel parts of a program are written as EFL-blocks, which are embedded into a sequential host language program. The sequential parts of the program are written in the host language, outside the EFL blocks.   \r\nAn EFL pre-compiler translates EFL blocks into parallel Python code.  EFL may be embedded in any host language by writing an appropriate pre-compiler. The EFL pre-compiler is being developed for other host programming languages (C++, Java, C#, Fortran, etc) as well as for other parallel platforms (DTM/MPI4PY, etc. ).\r\nHere we present the parallel programming constructs of EFL, such as parallel assignments, parallel for-loops, etc., and some examples of using EFL to implement Parallel Programming Design Patterns. \r\n", "", ""], "have_tickets": [true], "title": "Parallel Programming Constructs and Techniques Using an Embedded Flexible Language (EFL) for Python", "speakers": "Moshe Goldstein", "track_title": "", "timerange": "", "duration": 90, "tags": ["python", "Tooling", "Programming", "concurrency"]}, "337": {"id": 337, "abstracts": ["Rust is a new programming language from Mozilla, it has been announced as the successor of C and C++. \r\n\r\nIn this talk, I will show how to use Rust to extend Python via CFFI or ctypes because you want to optimize your code. But do you know we can integrate Python in Rust.\r\n\r\n* Brief introduction to Rust\r\n* Why Rust is a good candidate for the replacement of C\r\n* How to extend Python with Rust\r\n* How to interact with Python from Rust.", "", ""], "have_tickets": [true], "title": "Python, Rust, who extend who ?", "speakers": "Stephane Wirtel", "track_title": "", "timerange": "", "duration": 90, "tags": ["extending", "rust", "cpython"]}, "280": {"id": 280, "abstracts": ["Via several examples, this poster will present you how to handle quickly AsyncIO and how to build applications with [toolbox libraries][1] around AsyncIO.\r\n\r\nYou can create HTTP servers with AsyncIO, but also you can mixin several others server protocols like WebSockets, SSH, IRC, FastAGI or SIP.\r\n\r\nThis poster will show you that it can be easier to do than you think, AsyncIO ecosystem is beginner friendly.\r\n\r\n  [1]: https://github.com/python/asyncio/wiki/ThirdParty"], "have_tickets": [false], "title": "AsyncIO ecosystem", "speakers": "Ludovic Gasc", "track_title": "", "timerange": "", "duration": 90, "tags": ["redis", "HTTP", "servers", "multi-processing", "aiohttp", "aiopg", "websockets", "python3", "asyncio"]}, "145": {"id": 145, "abstracts": ["Over the last fourteen years, Plone has had a remarkable journey: from just a wild idea by a few people to create a CMS which would combine the best technology with a vision of beauty and power to the reality of today: Plone is actively used by companies, governments, universities, nonprofits and other organizations of all sizes around the world.\r\n\r\nYet the vision behind it has stayed consistent. The Plone community chooses technology not for the sake of technology, but because it best solves the problems at hand. We value reliability, security and long-term stability, yet the community is agile enough to adapt where needed.\r\n\r\nThe poster will showcase Plone 5, a major new release which is a solid foundation for the challenges of today, while providing a good upgrade path for earlier versions. It can be used right away for installations of all sizes, but it is also flexible enough to serve as basis for specialized use cases. \r\nBut we do not stop there; the Plone community is already looking further into the future. In spring 2015, we have developed our roadmap forward into a future where themes like mobile-first play a much more important role. Plone will open up it's core strengths like rock-solid workflows, security, standards-compliance and multilingual support to modern ways of presenting these. And with Mosaic and other advances we put power - and fun! -, firmly into the hands of the users that want to create beautiful sites and applications.", "", ""], "have_tickets": [true], "title": "The current state & the future of Plone", "speakers": "Paul Roeland", "track_title": "", "timerange": "", "duration": 90, "tags": ["web", "Plone"]}, "82": {"id": 82, "abstracts": ["Creating a large-scale event processing system can be a daunting task. Especially if you want it \u201cstupid simple\u201d and wrapped around each client\u2019s needs. We built a straightforward solution for this using Python 3 and other open-source tools.\r\n\r\nMain issues to solve for a system that needs to be both performant and scalable:\r\n\r\n - handling a throughput of 1 million events per minute in a 4 cores AWS instance;\r\n\r\n - following the principle of least astonishment;\r\n\r\n - data aggregation and how Python's standard libraries and data structures can help;\r\n\r\n - failsafe and profiling mechanisms that can be applied to any Linux service in production;\r\n\r\n - addressing unexpected behaviors of Python\u2019s Standard Library; like reading from a file while it is written;\r\n\r\n - tackling a sudden spectacular cloud instance failure;\r\n\r\nThe alternative to this system would be to adopt existing technology stacks that might be too general, add more complexity, bloat, costs and which need extensive work to solve your specific problem. Moreover, our approach resulted in over 85% drop on hardware utilisation.\r\n\r\n[Context: Production Software \u2013 II (where good coding reduces the client\u2019s bill)][1]\r\n\r\n  [1]: https://eastvisionsystems.com/production-software-part-ii-good-coding-reduces-clients-bill/\r\n", "", ""], "have_tickets": [true], "title": "Use Python to process 12mil events per minute and still keep it simple (Poster Session)", "speakers": "Teodor Dima", "track_title": "", "timerange": "", "duration": 90, "tags": ["bigdata", "performance", "architecture", "Development"]}, "219": {"id": 219, "abstracts": ["Python is a popular and widely used programming language but its use is limited in certain cases. Concurrency is one of those cases when people look for an alternative. It's actually what happened at the start-up I work at before I joined. The co-founders looked for a solution in a functional programming language and chose to use Clojure. Functional programming is now implemented in most programming languages and functional languages are getting more and more popular. For a junior developer learning a functional language as her/his second programming language completely make sense and I was up for the challenge! Clojure is not so different from Python in its readability and might be one of the easiest functional languages to learn for a Pythonista. I would like to share my tips and tools I used for learning and contributing to a code base in Clojure.\r\n\r\nThere are several online resources to understand the paradigm of functional programming. The same can be said regarding Clojure but a good way to learn aside from diving into a codebase is to take part in a community. The Clojurians are much fewer than the Pythonistas but they are equally friendly. They are looking forward to grow their community and their meetups and dojos are well suited to beginners. At some point you have to throw yourself into this sea of parentheses so you'd better be well equipped! In that aim Emacs is by far the best suited text editor. After customising it with the right tools you shall fear no orphan parens!\r\nThis experience will help you progress and focus on writing more concise code with short and clear functions. You will be more comfortable and curious about implementing the functional features of the Python language. Getting always closer to the Zen of Python: \" Beautiful is better than ugly. Explicit is better than implicit. Simple is better than complex. Complex is better than complicated. Flat is better than nested. Sparse is better than dense. Readability counts. .... \" "], "have_tickets": [true], "title": "From Python to Clojure", "speakers": "Eleonore Mayola", "track_title": "", "timerange": "", "duration": 90, "tags": ["python", "Lisp", "Clojure", "Functional Programming"]}, "263": {"id": 263, "abstracts": ["In this poster session I'm going to introduce Scrapinghub's new open source framework [Frontera][1].  Frontera allows to build real-time distributed web crawlers and website focused ones. \r\n\r\nOffering:\r\n\r\n - customizable URL metadata storage (RDBMS or Key-Value based),\r\n - crawling strategies management,\r\n - transport layer abstraction.\r\n - fetcher abstraction.\r\n\r\nAlong with framework description I'll demonstrate how to build a distributed crawler using [Scrapy][2], Kafka and HBase, and hopefully present some statistics of Spanish internet collected with newly built crawler.  Happy EuroPythoning!\r\n\r\n  [1]: https://github.com/scrapinghub/frontera\r\n  [2]: http://scrapy.org/\r\n", "", ""], "have_tickets": [true], "title": "Frontera: open source large-scale web crawling framework", "speakers": "Alexander Sibiryakov", "track_title": "", "timerange": "", "duration": 90, "tags": ["scrapy", "kafka", "hbase", "webcrawling", "distributed-systems"]}}, "EuroPython sessions": {"367": {"id": 367, "abstracts": ["We need help with organizing and running EuroPython 2016.\r\n\r\nIn this session, we will explain how the EuroPython workgroup model works and where you could help.\r\n", "", ""], "have_tickets": [true, true], "title": "EuroPython 2016: Help us build the next edition!", "speakers": "Fabio Pliger, Marc-Andre Lemburg", "track_title": "Barria1 Room", "timerange": "2015-07-22 14:30:00, 2015-07-22 15:15:00", "duration": 45, "tags": ["conference", "EuroPython", "eps"]}, "368": {"id": 368, "abstracts": ["The EuroPython General Assembly.\r\n\r\nThis is where we give our reports and the EPS members can vote in a new EPS board.", "", ""], "have_tickets": [true, true], "title": "EPS General Assembly", "speakers": "Fabio Pliger, Marc-Andre Lemburg", "track_title": "Barria1 Room", "timerange": "2015-07-22 15:15:00, 2015-07-22 16:15:00", "duration": 60, "tags": ["GA", "EuroPython", "eps", "assembly"]}}, "Talks": {"298": {"id": 298, "abstracts": ["The hook-based plugin system used by py.test and being made available\r\nas a stand alone package allows easy extensibility based on defined\r\nextension points which can be implemented using hook functions in the\r\nplugins.  Plugins can themselves call these hooks as well as define\r\nfuture extension points allowing for a very flexible design.\r\n\r\npy.test itself uses this plugin system from the ground up with the\r\nentire application being implemented by built-in plugins.  This\r\narchitecture has proven powerful and flexible over the years, on both\r\ncommand line tools as well as long running daemons.  This talks will\r\ndescribe how the plugin system works and how it deals with passing\r\narguments and return values 1:N hook calls. It will also describe how\r\nto design an application consisting entirely of plugins.  While not\r\nspecifically talking about py.test it will also give a solid\r\nunderstanding on how plugins work in py.test."], "have_tickets": [true], "title": "The hook-based plugin architecture of py.test", "speakers": "Floris Bruynooghe", "track_title": "A2 Room", "timerange": "2015-07-21 16:45:00, 2015-07-21 17:15:00", "duration": 30, "tags": ["software-design", "architecture", "plugin"]}, "218": {"id": 218, "abstracts": ["The potential upside of microservices is significant and exciting. So much so that Yelp's Transaction Platform committed from the start to an architecture of small, cooperative microservices. This talk explores the inevitable complications that arise for Python developers in as the services grow larger and stretch both their own architecture and the developers responsible for them. Come hear tales of terror (tight coupling! low test coverage!), stories which will warm your heart (agility! strong interfaces!), and everything in between as we follow the adventures of our plucky team.\r\n\r\nThe talk will be focused on the functional, cultural, and reliability challenges which occur as a microservices-based project evolves and expands over time. Particular attention will be paid to where these diverge from the utopian way microservices are often described, and to the particular difficulties faced by Python developers trying to implement such systems. My goal is to share with attendees some mistakes we've made, some successful methods for growing gracefully, and Python-specific tools/libraries which can help with these problems.\r\n\r\nTo enjoy this talk, you should be aware of the basic vocabulary and concepts of HTTP-based services. Any additional awareness of distributed systems (and their failure modes) will be helpful."], "have_tickets": [true], "title": "Arrested Development - surviving the awkward adolescence of a microservices-based application", "speakers": "Scott Triglia", "track_title": "PythonAnywhere Room", "timerange": "2015-07-24 11:00:00, 2015-07-24 11:45:00", "duration": 45, "tags": ["services", "distributed-systems", "HTTP"]}, "340": {"id": 340, "abstracts": ["An introduction to the devops culture by sharing our experience in a successfully French start-up.\r\n\r\nThe salt route talk presents some best practices and common mistakes that arise in everyday teamwork between developers and sysadmins using SaltStack for configuration management, server provisioning, orchestration and Django web applications deployment.\r\n\r\nAs an introductory talk there is no prerequisites required.\r\n\r\nThis talk will be presented by the dynamic duo Natal Ng\u00e9tal and Pablo Seminario, 2 co-workers at PeopleDoc Inc.", "", ""], "have_tickets": [true], "title": "The Salt Route", "speakers": "Pablo SEMINARIO", "track_title": "A2 Room", "timerange": "2015-07-22 11:45:00, 2015-07-22 12:30:00", "duration": 45, "tags": ["architecture", "ConfigurationManagement", "DevOps", "saltstack", "automation", "django", "deployment", "Best Practice"]}, "43": {"id": 43, "abstracts": ["gitfs is an open-source[1] filesystem which was designed to bring the full powers of Git to everyone, no matter how little they know about versioning. A user can mount any repository and all the his changes will be automatically converted into commits. gitfs will also expose the history of the branch you\u2019re currently working on by simulating snapshots of every commit.\r\n\r\ngitfs is useful in places where you want to keep track of all your files, but at the same time you don\u2019t have the possibility of organizing everything into commits yourself. A FUSE filesystem for git repositories, with local cache.\r\n\r\nIn this talk we will take a look at some of the crucial aspects involved in building a reliable FUSE filesystem, the steps that we took in building gitfs, especially in handling the git objects (http://git-scm.com/book/en/v2/Git-Internals-Git-Objects), what testing methods we have used for it and also we will share the most important lessons learned while building it.\r\n\r\nThe prerequisites for this talk are:\r\nA good understanding of how Git works\r\nBasic understaning of Operating Systems concepts\r\n\r\n[1] You can get the source here - https://github.com/PressLabs/gitfs; you cand find more details here - http://www.presslabs.com/gitfs/."], "have_tickets": [true], "title": "gitfs - building a filesystem in Python", "speakers": "Vlad Temian", "track_title": "Google Room", "timerange": "2015-07-23 14:30:00, 2015-07-23 15:15:00", "duration": 45, "tags": ["low-level", "FOSS", "cpython", "DevOps", "concurrency", "open-source", "linux", "fun", "pytest"]}, "208": {"id": 208, "abstracts": ["NumPy is the fundamental Python package for scientific computing. However, being efficient with NumPy might require slightly changing how you write Python code. \r\n\r\nI\u2019m going to show you the basic idioms essential for fast numerical computations in Python with NumPy. We'll see why Python loops are slow and why vectorizing these operations with NumPy can often be good. \r\n\r\nTopics covered in this talk will be array creation, broadcasting, universal functions, aggregations, slicing and indexing.\r\nEven if you're not using NumPy you'll benefit from this talk."], "have_tickets": [false], "title": "NumPy: vectorize your brain", "speakers": "Ekaterina Tuzova", "track_title": "Google Room", "timerange": "2015-07-23 12:30:00, 2015-07-23 13:15:00", "duration": 45, "tags": ["numpy", "machine-learning"]}, "46": {"id": 46, "abstracts": ["CityBikes [1] started on 2010 as a FOSS alternative endpoint (and Android client) to gather information for Barcelona's Bicing bike sharing service. Later evolved as an open API [2] providing bike sharing data of any (mostly) service worldwide.\r\n\r\nFast forward today and after some C&D letters, there's support for more than 200 cities, more than 170M historical entries have been gathered for analysis (in approx. a year) and the CityBikes API is the main source for open bike share data worldwide. This talk will tour about how we got there with the help of python and the community [3].\r\n\r\nPS: We have a realtime map, it is awesome [4].\r\n\r\n    [1]: http://citybik.es\r\n    [2]: http://api.citybik.es\r\n    [3]: http://github.com/eskerda/pybikes\r\n    [4]: http://upcoming.citybik.es\r\n\r\n"], "have_tickets": [true], "title": "CityBikes: bike sharing networks around the world", "speakers": "Llu\u00eds Esquerda", "track_title": "PythonAnywhere Room", "timerange": "2015-07-22 11:00:00, 2015-07-22 11:45:00", "duration": 45, "tags": ["redis", "nosql", "api", "data-science", "visualization", "bigdata", "mongodb", "flask", "open-source", "linux", "fun", "FOSS", "internationalization"]}, "224": {"id": 224, "abstracts": ["Lately, there's a lot of talk about microservices but not enough concrete examples and case studies. I want to change that by showing:\r\n\r\n - how thinking in PaaS terms can lead to robust and scalable designs;\r\n\r\n - what infrastructure and automation you need to set up to go along smoothly;\r\n\r\n - how to get real time metrics of your apps; \r\n\r\n - what makes Python good for microservices;\r\n\r\n - what is Python's performance relative to some alternatives.\r\n\r\n**Prerequisites for the talk:**\r\n\r\n - some experience with web development in Python;\r\n\r\n - basic knowledge of RESTful web services.\r\n\r\n"], "have_tickets": [true], "title": "Python microservices on PaaS done right", "speakers": "Micha\u0142 Bultrowicz", "track_title": "A2 Room", "timerange": "2015-07-23 14:30:00, 2015-07-23 15:15:00", "duration": 45, "tags": ["automation", "performance", "cloud", "metrics", "PaaS"]}, "93": {"id": 93, "abstracts": ["Finding a good structure for number-crunching code can be a problem, this especially applies to routines preceding the core algorithms: transformations such as data processing and cleanup, as well as feature construction.\r\n\r\nWith such code, the programmer faces the problem, that their code  easily  turns into a sequence of highly interdependent operations, which are hard to separate. It can be challenging to test, maintain and reuse such \"Data Science Spaghetti code\".\r\n\r\nScikit-Learn offers a simple yet powerful interface for data science algorithms: the estimator and composite classes (called meta-estimators). By example, I show how clever usage of meta-estimators can encapsulate elaborate machine learning models into a maintainable tree of objects that is both handy to use and simple to test.\r\n\r\nLooking at examples, I will show how this approach simplifies model development, testing and validation and how this brings together best practices from software engineering as well as data science.\r\n\r\n_Knowledge of Scikit-Learn is handy but not necessary to follow this talk._"], "have_tickets": [true], "title": "Using Scikit-Learn's interface for turning Spaghetti Data Science into Maintainable Software", "speakers": "Holger Peters", "track_title": "Barria1 Room", "timerange": "2015-07-21 16:45:00, 2015-07-21 17:15:00", "duration": 30, "tags": ["python", "data-science", "machine-learning", "cleancode", "sklearn", "Best Practice", "Testing"]}, "159": {"id": 159, "abstracts": ["Scrapy is a fast high-level screen scraping and web crawling framework, used to crawl websites and extract structured data from their pages. It can be used for a wide range of purposes, from data mining to monitoring and automated testing.\r\n\r\nIn this talk some advanced techniques will be shown based on how Scrapy is used at Scrapinghub.\r\n\r\nGoals:\r\n\r\n - Understand why its necessary to _Scrapy-ify_ early on.\r\n - Anatomy of a Scrapy Spider.\r\n - Using the interactive shell.\r\n - What are items and how to use item loaders.\r\n - Examples of pipelines and middlewares.\r\n - Techniques to avoid getting banned.\r\n - How to deploy Scrapy projects.\r\n\r\n\r\n"], "have_tickets": [true], "title": "Dive into Scrapy", "speakers": "Juan Riaza", "track_title": "Google Room", "timerange": "2015-07-21 11:45:00, 2015-07-21 12:30:00", "duration": 45, "tags": ["scrapy", "python", "open-source", "scraping"]}, "206": {"id": 206, "abstracts": ["From september 2015 Aarhus School of Engineering will offer the education Bachelor of Electronic Engineering, as a combined online  and on campus education. In the talk I will describe the technical and pedagogical setup, we are working at to meet the challenges of having both on-site and remote students.\r\n\r\nI will also touch on how IPython Notebook, will be part of the technical setup, and how it can be incorporated into the teaching."], "have_tickets": [true], "title": "Online Education: challenges and opportunities for Staff and Students", "speakers": "Anders Lehmann", "track_title": "Barria2 Room (Education Summit)", "timerange": "2015-07-23 12:30:00, 2015-07-23 13:00:00", "duration": 30, "tags": ["education", "ipython"]}, "293": {"id": 293, "abstracts": ["Do you know how a spreadsheet works?  Can you imagine building one, from scratch, in Python?  This talk will be a whirlwind overview of how to do just that.  Based on the source code of Dirigible, a short-lived experiment in building a cloud-based Pythonic spreadsheet (now [open-sourced](https://github.com/pythonanywhere/dirigible-spreadsheet), for the curious).\r\n\r\nWe'll start from scratch, with a simple data representation for a two-by-two grid, and then gradually build up the functionality of our spreadsheet:\r\n- Cell objects, and the formula/value distinction\r\n- Evaluating cells, from simple arithmetic up to an Excel-like dialect\r\n- Building up the dependency graph, and the ensuing fun times with recursion (arg!)\r\n- Integrating custom functions and user-defined code.\r\n\r\nShowing and explaining code examples, and alternating with  live demos (don't worry, I've done this before!)\r\n\r\nAnd it's all in Python!  You'll be surprised at how easy it turns out to be, when you go step-by-step, each building on the last... And I promise you'll be at least a couple of  moderately mind-blowing moments :)", "", ""], "have_tickets": [true], "title": "How to build a spreadsheet with Python", "speakers": "Harry Percival", "track_title": "PythonAnywhere Room", "timerange": "2015-07-22 16:45:00, 2015-07-22 17:15:00", "duration": 30, "tags": ["Beginners", "data", "demo", "spreadsheet", "data-science"]}, "245": {"id": 245, "abstracts": ["You need to download data from lots and lots of URLs stored in a text file and then save them on your machine. Sure, you could write a loop and get each URL in sequence, but imagine that there are so many URLs that the sun may burn out before that loop is finished; or, you're just too impatient.\r\n\r\nFor the sake of making this instructive, pretend you can only use one box. So, what do you do? Here are some typical solutions: Use a single process that creates lots of threads. Use many processes. Use a single process and a library like asyncio, gevent or eventlet to yield between coroutines when the OS blocks on IO.\r\n\r\nThe talk will walk through the mechanics of each approach, and then show benchmarks of the three different approaches.\r\n", "", ""], "have_tickets": [true], "title": "Parallelism Shootout: threads vs asyncio vs multiple processes", "speakers": "Shahriar Tajbakhsh", "track_title": "A2 Room", "timerange": "2015-07-24 12:30:00, 2015-07-24 13:00:00", "duration": 30, "tags": ["Parallelism"]}, "97": {"id": 97, "abstracts": ["\u00bfY si pudieras centrarte en la funcionalidad de tus\r\nservicios en lugar de programar la integraci\u00f3n entre ellos?\r\n\r\nlymph es un framework con personalidad propia para escribir\r\nservicios en Python que te permite hacer justo eso. Incluye\r\ndescubrimiento de servicios extensible,  comunicaci\u00f3n v\u00eda\r\npetici\u00f3n-respuesta, comunicaci\u00f3n v\u00eda publicaci\u00f3n-subscripci\u00f3n\r\nextensible y gesti\u00f3n de procesos.\r\n\r\nA medida que crecen nuestros equipos de desarrollo, nos alejamos\r\ncada vez m\u00e1s de una arquitectura monol\u00edtica. Queremos empezar a\r\nescribir servicios sin tener que preocuparnos de los requisitos de\r\ninfraestructura. Queremos desarrollar de forma r\u00e1pida, centr\u00e1ndonos\r\nen nuestro trabajo.\r\n\r\nEn esta charla os ense\u00f1aremos lo f\u00e1cil que es desarrollar y\r\nejecutar servicios con lymph.\r\n\r\nEchad un ojo a http://lymph.io. Esperamos vuestros pull requests."], "have_tickets": [true], "title": "Deja de pegarte con tus servicios; import lymph", "speakers": "Alejandro Castillo", "track_title": "Barria2 Room (Local track)", "timerange": "2015-07-22 14:30:00, 2015-07-22 15:15:00", "duration": 45, "tags": ["services", "zeromq", "events", "gevent", "web", "rpc", "open-source", "zookeeper", "rabbitmq", "framework"]}, "210": {"id": 210, "abstracts": ["\u201cCode shortening\u201d is the \u201csport\u201d where participants strive to achieve the shortest possible source code that solves a programming problem by exploiting all the tricks and quirks of the language.\r\n\r\nThe [SIZECON on SPOJ][1] is one of the oldest and most popular code shortening problems on the web with a bizarre twist, only character above ASCII value 32 are counted for the penalty. During the talk we will take a journey into some frightening depths of the Python language in order to write shorter and shorter solutions to SIZECON until, exploiting a number of truly mind-blowing tricks, we will reach the current record solution of 28 characters (above ASCII 32!).\r\n\r\nI promise I\u2019ll show you the most obfuscated, contrived and sick python code you have ever seen and (hopefully!) will ever see. I invite participants to give [SIZECON][1] a try and check their score against the [Python2][2] and [Python3][3] SPOJ rankings.\r\n\r\n  [1]: http://www.spoj.com/problems/SIZECON/\r\n  [2]: http://www.spoj.com/ranks/SIZECON/lang=PYTH%202.7\r\n  [3]: http://www.spoj.com/ranks/SIZECON/lang=PYTH%203.2.3\r\n", "", ""], "have_tickets": [true], "title": "Solving the web most popular code shortening competition in Python.", "speakers": "Alessandro Amici", "track_title": "Barria2 Room", "timerange": "2015-07-24 11:00:00, 2015-07-24 11:45:00", "duration": 45, "tags": ["competitions"]}, "288": {"id": 288, "abstracts": ["The talk would aim to introduce cryptography and security from the developer point of view, showing ways to encrypt information with Python scripts and more sensitive information in web applications using django.\r\n\r\nI will introduce to security in python ,showing some libraries that allow encryption and decryption like PyCrypto or M2Crypto,comparing theses libraries with the cryptography module.At the same time,I will show the main ciphers and hashing  algorithms used in these libraries like AES,DES,RSA and some examples illustrating each case.I wil show other techniques like steganography for hiding information in files(images,documents,programs) with some libraries like Stepic or ezPyCrypto. \r\n\r\nFinally,I will comment OWASP Python Security Project where we can find some useful practices\r\nand secure coding guidelines for detecting  potential security vulnerabilities  in our applications like SQL injection or Cross-site scripting.\r\n"], "have_tickets": [true], "title": "Python Security & Cryptography", "speakers": "Jose Ortega", "track_title": "Barria1 Room", "timerange": "2015-07-22 11:00:00, 2015-07-22 11:45:00", "duration": 45, "tags": ["python", "algorithm", "best-practices", "django", "security", "cryptography"]}, "131": {"id": 131, "abstracts": ["At Blue Yonder, we've built a platform that can accept and process bulk amounts of data for multiple business domains (e.g. handling retail store location and sales data) using SQLAlchemy as a database abstraction layer.\r\nWe wanted to use as much of SQLAlchemy as possible, but we quickly found that the ORM (Object Relational Mapper) is not suitable for handling large amounts of data at once. At the same time, we did not want each team of developers working on individual business domains to have to handcraft their own SQL statements. To solve this problem, we built an application configuration that closely resembles an SQLAlchemy model, but also contains application-specific logic settings.\r\n\r\nIn this talk I will demonstrate:\r\n\r\n - an application architecture for multiple business domains\r\n\r\n - the structure of the domain configuration utilized in the generation of the SQLAlchemy model, SQLAlchemy core statements, and other application functionality\r\n\r\n - how the domain configuration is used throughout the application (consuming and parsing incoming data, storing it in a database and ensuring data quality)"], "have_tickets": [true], "title": "Building a multi-purpose platform for bulk data using sqlalchemy", "speakers": "Christian Trebing", "track_title": "Barria1 Room", "timerange": "2015-07-23 16:45:00, 2015-07-23 17:15:00", "duration": 30, "tags": ["bigdata", "SQLAlchemy"]}, "109": {"id": 109, "abstracts": ["This talk is about how python is used in cloud computing as well as used while configuring cloud infrastructure. It also gives brief about tools and technologies/libraries can be used for number of tasks while cloud development/execution. Developers and all python lovers are the perfect audience for this talk. They will get the brief about reliable stack of python based tools used in cloud development and also will be sharing the experience with python.\r\n\r\nSummary:\r\nPython in cloud. \r\nKind of services can be build with python.\r\nPython based tools used in deployment and configuration management for the cloud.\r\nFor every python lovers - How to create a python friendly cloud infrastructure with great reliable combination of many stable tools.\r\nStability.\r\nExperience sharing. "], "have_tickets": [true], "title": "Python for Cloud Services and Infrastructure Management", "speakers": "Bhaumik Shukla", "track_title": "Barria2 Room", "timerange": "2015-07-24 15:15:00, 2015-07-24 15:45:00", "duration": 30, "tags": ["nosql", "python", "infrastructure", "REST", "mongodb", "DevOps", "configuration", "django", "deployment", "cloud", "fabric", "rabbitmq"]}, "281": {"id": 281, "abstracts": ["It is always tough to test a complex API comprehensively. The additional level of complexity brings us to the question \"How can we validate that our API is working as intended?\"\r\n\r\nIn this talk I will explain how to use test driven development for APIs to solve this problem and even further how TDD can drive an API Design towards a more usable design.\r\nI will outline my practical approach with an implementation example based on django. And finally I will give you a brief summary of my lessons learned using this approach in customer projects.\r\n\r\n"], "have_tickets": [true], "title": "TDD for APIs", "speakers": "Michael Kuehne", "track_title": "Barria1 Room", "timerange": "2015-07-22 11:45:00, 2015-07-22 12:30:00", "duration": 45, "tags": ["pytest", "django", "agile", "api", "tdd"]}, "60": {"id": 60, "abstracts": ["TDD is great, we all know that. But why is it so, and under which circumstances is it ineffective or even harmful?\r\n\r\nIn this talk I want to delve into the deeper meaning of testing to derive how to do it best.\r\nAll of this from the point of view of somebody who has profited but also struggled with testing and TDD.\r\n\r\nFor every experience level from beginner to advanced there is something to learn or ponder.\r\n"], "have_tickets": [true], "title": "TDD - the why, the how and the when not", "speakers": "Fabian Kreutz", "track_title": "Google Room", "timerange": "2015-07-23 11:00:00, 2015-07-23 11:45:00", "duration": 45, "tags": ["tdd", "Development", "Testing", "py.test"]}, "8": {"id": 8, "abstracts": ["Beginner's guide to Python code quality. I'll talk about the tools for code analysis, differences between them, extending them with new features and ways to running them automatically. In the end, I'll talk about reasons behind all of these tools and try to convince you to using them in your projects (but if you are against it - I'll gladly listen to your arguments).", "", ""], "have_tickets": [true], "title": "Code Quality in Python - tools and reasons", "speakers": "Rados\u0142aw Jan Ganczarek", "track_title": "Barria2 Room", "timerange": "2015-07-21 16:45:00, 2015-07-21 17:15:00", "duration": 30, "tags": ["automation", "python", "metrics"]}, "274": {"id": 274, "abstracts": ["Bring the continuous integration to a new level, through a platform/project independent framework able to give you unittest-like reports. Argus is a scenario-based application written in Python, driven by custom recipes under configurable environments, that can be used for testing a wide variety of small and big projects, with the ability of querying live data from the in-test application.\r\n\r\nUntil now, it's successfully used with [cloudbase-init][1] (a robust cloud initialization service for instances) under OpenStack and not only, due to its extensiveness and the ability to mimic different infrastructures. More details can be found on the package page: https://github.com/PCManticore/argus-ci.\r\n\r\nThe goals of this talk are to show its generic scalability, how simple is to create such kind of recipes, the relationship between scenarios, introspection and tests and, but not last, the unlimited freedom of creating very custom aspects of these entities which lead to relevant and in-depth ready for analysis logs. There are no major prerequisites to understand it, just to be familiar with Python and optionally have a focus on cloud infrastructures.\r\n\r\n[1]: https://github.com/stackforge/cloudbase-init"], "have_tickets": [true], "title": "Argus - the omniscient CI", "speakers": "Cosmin Poieana", "track_title": "A2 Room", "timerange": "2015-07-21 12:30:00, 2015-07-21 13:00:00", "duration": 30, "tags": ["cloudbase-init", "continuous-integration", "argus", "devstack", "OpenStack", "open-source", "linux", "windows", "cloud", "Testing"]}, "117": {"id": 117, "abstracts": ["Defining a natural hierarchy of classes in Python can be challenging. Features like multiple inheritance, metaclasses, and classmethods can make such hierarchies significantly more powerful. However, these language features are complex and easy to use incorrectly. This talk will cover the best way to put the capabilities of classes to work so you can write Python programs more effectively.\r\n\r\nSpecifically, I'll cover these pieces of advice that I think you should follow:\r\n\r\n1. Initialize Parent Classes with `super`\r\n1. Use Multiple Inheritance Only for Mix-in Utility Classes\r\n1. Validate Subclasses with Metaclasses\r\n1. Register Class Existence with Metaclasses\r\n1. Use `@classmethod` Polymorphism to Construct Objects Generically\r\n\r\nWith each suggestion I'll use code examples to demonstrate why this is the best choice. When there are differences between Python 2 and Python 3, I'll highlight what's different. The goal is that intermediate programmers will learn some Python best practices, experienced programmers will gain confidence in their full use of Python's features."], "have_tickets": [true], "title": "How to Be More Effective with Classes", "speakers": "Brett Slatkin", "track_title": "PythonAnywhere Room", "timerange": "2015-07-22 12:30:00, 2015-07-22 13:15:00", "duration": 45, "tags": ["Practice", "Best"]}, "32": {"id": 32, "abstracts": ["One of the key aspect to keep in mind when developing a scalable application is its faculty to grow easily. But while we're used to take advantage of scalable backend technologies such as mongodb or couchbase, **scaling automatically our own application** core is usually another story.\r\n\r\nIn this talk I will **explain and showcase** a distributed web application design based on **consul** and **uWSGI** and its consul plugin. This design will cover the key components of a distributed and scalable application:\r\n\r\n - **Automatic service registration and discovery** will allow your application to grow itself automatically.\r\n\r\n -  **Health checking and service unregistration** will allow your application to be fault tolerant, highly available and to shrink itself automatically.\r\n\r\n - A **distributed Key/Value storage** will allow you to (re)configure your distributed application nodes at once.\r\n\r\n - **Multi-Datacenter awareness** will allow your application to scale around the world easily.\r\n\r\n", "", ""], "have_tickets": [true], "title": "Designing a scalable and distributed application", "speakers": "Alexys Jacob", "track_title": "PythonAnywhere Room", "timerange": "2015-07-22 15:15:00, 2015-07-22 16:15:00", "duration": 60, "tags": ["technologies", "gevent", "management", "performance", "flask", "DevOps", "web", "automation", "configuration"]}, "269": {"id": 269, "abstracts": ["Bokeh is a Python interactive visualization library for large datasets that natively uses the latest web technologies. Its goal is to provide elegant, concise construction of novel graphics in the style of Protovis/D3, while delivering high-performance interactivity over large data to thin clients.\r\n\r\nThe talk will go through it\u2019s design providing details of the different API layers (bottom to top) concluding with a comprehensive showcase of examples to expose many of the features that make Bokeh so powerful and easy.", "", ""], "have_tickets": [true], "title": "Big data beautiful visualization on the browser with Bokeh", "speakers": "Fabio Pliger", "track_title": "PythonAnywhere Room", "timerange": "2015-07-20 15:15:00, 2015-07-20 16:15:00", "duration": 60, "tags": ["data-science", "visualization", "bigdata", "flask", "web", "django", "data", "html5"]}, "126": {"id": 126, "abstracts": ["Data Science is a hot topic, and most data scientist use either Python or R to do their jobs as main scripting language. \r\nBeing import.io data scientist for the last 2 years, all of them using Python, I've come across many different problems and needs on how to wrangle data, clean data, report on it and make predictions.\r\nIn this talk I will cover all main analytics and data science needs of a start-up using Python, numpy, pandas, and sklearn.  For every use case I will show snippets of code using IPython notebooks and run some of them as live demos. "], "have_tickets": [true], "title": "Everyone can do Data Science in Python", "speakers": "Ignacio Elola", "track_title": "Google Room", "timerange": "2015-07-20 12:30:00, 2015-07-20 13:15:00", "duration": 45, "tags": ["data-science", "machine-learning", "analytics", "pandas", "scipy", "sklearn"]}, "160": {"id": 160, "abstracts": ["Writing a Python script from scratch is fairly easy and you get on with very little boilerplate code in general. However starting a new Python project can be tiring if you decide to stick to best practices and plan on submitting it to PyPI. It requires great diligence and occasionally gets pretty cumbersome if you start new tools on a regular basis.\r\n\r\nWhy not just use a template for it? Cookiecutter is a CLI tool written in pure Python that enables you to do so. Not only is it working for Python code, but also markdown formats and even other programming languages. We will talk about the ideas behind Cookiecutter and go over how you can create your very own template, so you and others can benefit from your experience.\r\n\r\n\r\nGitHub: [https://github.com/hackebrot][1]\r\n\r\nTwitter: [https://twitter.com/hackebrot][2]\r\n\r\nBlog: [http://www.hackebrot.de/][3]", "", ""], "have_tickets": [true], "title": "Come to the Dark Side! We have a whole bunch of Cookiecutters!", "speakers": "Raphael Pierzina", "track_title": "Google Room", "timerange": "2015-07-23 11:45:00, 2015-07-23 12:30:00", "duration": 45, "tags": ["Cookiecutter", "Best Practice", "CLI", "community", "open-source", "Click", "pytest", "Kivy", "Jinja2", "cross-platform"]}, "66": {"id": 66, "abstracts": ["Seg\u00fan wikipedia:\r\n\"La metaprogramaci\u00f3n consiste en escribir programas que escriben o manipulan otros programas (o a s\u00ed mismos) como datos, o que hacen en tiempo de compilaci\u00f3n parte del trabajo que, de otra forma, se har\u00eda en tiempo de ejecuci\u00f3n. Esto permite al programador ahorrar tiempo en la producci\u00f3n de c\u00f3digo.\"\r\nEn esta charla veremos diferentes mecanismos que Python proporciona como:\r\n - Decoradores\r\n - Metaclasses\r\n - Descriptors\r\nA trav\u00e9s de varios ejemplos veremos como reutilizar c\u00f3digo en varias funciones y clases, como modificar como nuestras clases se generan, como se genera una clase (que funciones se llaman cuando una clase se crea) o como se genera una instancia.\r\nVeremos tambi\u00e9n que f\u00e1cilmente se nos puede ir de las manos y como utilizar con cuidado las herramientas que Python nos proporciona.", "", ""], "have_tickets": [true], "title": "Metaprogramaci\u00f3n en Python", "speakers": "Ra\u00fal Cumplido", "track_title": "Barria2 Room (Local track)", "timerange": "2015-07-22 11:00:00, 2015-07-22 11:45:00", "duration": 45, "tags": ["metaclass", "metaprogramming", "python"]}, "42": {"id": 42, "abstracts": ["Using the automated documentation feature of Sphinx, you can make with ease the extensive documentation of Python program.\r\nYou just write python function documents (docstrings), Sphinx organizes them into the document, can be converted to a variety of formats.\r\nIn this session, I'll explain a documentation procedure that uses with sphinx autodoc and autosummary extensions.\r\n\r\nIn this session, I'll explain a documentation procedure that uses with sphinx autodoc, autosummary, coverage and doctest extensions.", "Abstract:\r\n\r\nUsing the automated documentation feature of Sphinx, you can make with ease the extensive documentation of Python program.\r\nYou just write python function documents (docstrings), Sphinx organizes them into the document, can be converted to a variety of formats.\r\nIn this session, I'll explain a documentation procedure that uses with sphinx autodoc and autosummary extensions.\r\n\r\nDescription:\r\n\r\nSphinx provides autodoc feature that generate document from docstring in your python sources.\r\nThe docstring that contains description and example of the use of function written near the program, makes doc easy to update.\r\nIn addition, the output of the Sphinx will make you understand what to write in docstring. As a result, this will improve your motivation of doc writing.\r\n\r\nTo use the autodoc, you must specify python modules to automodule directive one by one. This is a tedious task, hoswever autosummary extension automate this task.\r\nIn most cases, once developers have developed the API, you only need to run the make html of Sphinx, you get a nicely formatted document.\r\n\r\nSphinx also has coverage and doctest extentions.\r\nThese support writing the documentation to work with autodoc.\r\nThis allow you to check the APIs that have not been documented or you can verify each doctest part is correct or not.\r\n\r\nIf you use such autodoc-related extensions, you can create a Sphinx API documentation in the following procedure.\r\n\r\n1. make coverage; you can get the APIs that have not been documented.\r\n2. Write docstrings that includes the doctest format how to use the API.\r\n3. make doctest; you can verify each doctest part is correct or not.\r\n4. make html; you can generate the HTML or your favorite format.\r\n\r\nIn this session, I'll explain a documentation procedure that uses with sphinx autodoc, autosummary, coverage and doctest extensions.\r\n\r\n\r\nTarget:\r\n\r\n- Python programmer who is struggling with documentation.\r\n- Python library author who want to generate API docs automatically.\r\n- Python library author who want to create a clear documentation which contains python snippets.\r\n\r\nOutline:\r\n\r\n* Self introduction (2 min)\r\n\r\n* Sphinx introduction (2 min)\r\n\r\n  * What is Sphinx?\r\n  * Sphinx examples\r\n\r\n* Have you written API docs for your code? (2 min)\r\n\r\n  * I don't know what/where should I write.\r\n  * Docstrings is needed? Are there some specific format?\r\n\r\n* Getting start Sphinx (2 min)\r\n\r\n  * How to install Sphinx\r\n  * How to start a Sphinx project\r\n\r\n* Generate API docs from your python code (5 min)\r\n\r\n  * setup autodoc extension\r\n  * write docstrings for yuor python module\r\n  * \"automodule & make html\" will generate API docs from python code\r\n  * autodoc pros & cons: docs for many modules\r\n\r\n* Listing APIs automatically (5 mins)\r\n\r\n  * setup autosummary extension\r\n  * how to use autosummary directive\r\n  * no more autodoc directive\r\n\r\n* Discovering undocumented APIs (5 min)\r\n\r\n  * setup coverage extension\r\n  * make coverage\r\n\r\n* Detect deviations of the impl and doc (5 min)\r\n\r\n  * setup doctest extension\r\n  * make doctest\r\n\r\n* Overall picture, tips, Q&A (10 min)\r\n\r\n  * Overall picture of the process\r\n  * Options for autodoc\r\n  * translate them into other langs\r\n", ""], "have_tickets": [true], "title": "Sphinx autodoc: automated API documentation", "speakers": "Takayuki SHIMIZUKAWA", "track_title": "Google Room", "timerange": "2015-07-20 11:45:00, 2015-07-20 12:30:00", "duration": 45, "tags": ["automation", "autodoc", "documentation", "Sphinx"]}, "64": {"id": 64, "abstracts": ["A perspective of the impact of the PyconUK education track from the point of view of teachers and educators. \r\n\r\nHaving attended the education track at Pycon UK 2014 as a teacher, my talk will share both my experiences and those of other teachers attending. The  education track bought educators and developers together in a way that allowed the teachers to get support and advice whilst developers   get to support teachers in developing exciting & real applications for teaching computing. \r\n\r\nThe talk will focus on two aspects of the education track. The  workshops delivered for teachers by python developers and how this helps build teachers confidence.  But also the breakout sessions where educators and developers with common interests can work together to develop something. This might be a program / library or a teaching resource, some developers gave a hands on and bespoke training session to a group of teachers.\r\n\r\nIf we are to get more young people programming or at least having  a positive experience of programming then we need to minimize obstacles to that experience. By having educators and developers working together we can identify those obstacles and eliminate them!", "", ""], "have_tickets": [false], "title": "Pycon - A teacher's perspective", "speakers": "James Robinson", "track_title": "Barria2 Room (Education Summit)", "timerange": "2015-07-23 11:45:00, 2015-07-23 12:30:00", "duration": 45, "tags": ["education", "pyconuk", "raspberrypi", "teaching", "learning", "computing", "python3"]}, "339": {"id": 339, "abstracts": ["Microservices are popping up everywhere. This talk will explain what this fashionable new architecture is, including the pros and cons of adopting it, and then discuss an open-source framework that can help you do so -- [https://nameko.readthedocs.org][1].\r\n\r\nNameko assists you in writing services with well-defined boundaries that are easy to test. By leveraging some neat design patterns and providing test helpers, it also encourages good service structure and clean code.\r\n\r\n  [1]: https://nameko.readthedocs.org"], "have_tickets": [true], "title": "Nameko for Microservices", "speakers": "Matt Bennett", "track_title": "Google Room", "timerange": "2015-07-21 12:30:00, 2015-07-21 13:15:00", "duration": 45, "tags": ["architecture", "open-source", "Microservices"]}, "255": {"id": 255, "abstracts": ["Ever feel like your open source project could be better tested? Lack of tests holding you back from contributors but you don\u2019t know where to start? You\u2019re not alone.\r\n\r\n[\u201cAdopt pytest month\u201d][1] was held in April 2015. [Pytest][2] volunteers were paired with open source software projects, to find a path to better testing with pytest. Projects varied from  libraries/command line utilities, to a browser, to a complex Django app. In some cases converting existing tests was necessary, in others writing the first tests in existence for non-trivial amounts of code. Two projects were open sourced specifically to take part in \u201cadopt pytest month\u201d. What began as an experiment in increasing software audience proved to be an interesting exercise in strengthening community and most valuable of all, provided a newcomer\u2019s perspective to veteran contributors.\r\n\r\nThis talk will discuss what worked well with \u201cadopt pytest month\u201d, what didn\u2019t, what we learned about pytest and what you could take away for your open source project, be it an improved testing environment or an improved contributor community. A basic knowledge of testing and pytest will be useful.\r\n\r\n  [1]: http://pytest.org/latest/adopt.html\r\n  [2]: http://pytest.org/latest/\r\n"], "have_tickets": [true], "title": "The realities of open source testing: lessons learned from \u201cAdopt pytest month\u201d", "speakers": "Brianna Laugher", "track_title": "Barria1 Room", "timerange": "2015-07-22 16:45:00, 2015-07-22 17:15:00", "duration": 30, "tags": ["tdd", "open source", "community", "open-source", "Testing", "pytest", "py.test"]}, "115": {"id": 115, "abstracts": ["At Yelp, we ship code multiple times a day and have maintained this pace as our team has grown to 300+ and our codebase to several million lines of Python code. This talk explores the pain points we experienced along the ways, how our service-oriented architecture alleviates them, and the infrastructure we built to develop, test, and deploy in this highly-distributed environment. As a case study, we\u2019ll be looking at the backend powering the new Yelp Business Owner Android and iOS apps.\r\n\r\nAt the start, most of the development at Yelp occurred in a single, monolithic web application, creatively named \u201cyelp-main\u201d (naming is hard!). As the company grew, our developers were spending increasing amounts of time trying to ship code. After recognizing this pain point, we started experimenting with a service oriented architecture to scale the development process, and so far it\u2019s been a resounding success. Over the course of the last three years, we\u2019ve gone from writing our first service to having over seventy production services. Along the way, we\u2019ve dabbled with Docker containers, Pyramid, SQLAlchemy, uWSGI, gevent, and virtualenv in an effort to build the next-generation service platform for our engineers."], "have_tickets": [true], "title": "Building mobile APIs with services at Yelp", "speakers": "Stephan Jaensch", "track_title": "Barria2 Room", "timerange": "2015-07-21 11:45:00, 2015-07-21 12:30:00", "duration": 45, "tags": ["services", "distributed-systems", "REST", "docker", "swagger", "pytest", "Pyramid"]}, "67": {"id": 67, "abstracts": ["Do you deploy your Python services to Amazon EC2, or to Openstack, or even to HP cloud, joyent or Azure? Do you want to - without being tied into any one of them? What about local full stack deployments with lxc or kvm containers?\r\n\r\nEven if you're convinced you don't need \"the cloud\" because you manage your own servers, amazing technologies like Private clouds and MaaS, for dynamic server management on bare metal, may change your mind.\r\n\r\nFed up with the cloud hype? Let us rehabilitate the buzzword! (A bit anyway.)\r\n\r\nA fully automated cloud deployment system is essential for rapid scaling, but it's also invaluable for full stack testing on continuous integration systems. Even better, your service deployment and infrastructure can be managed with Python code? (Devops distilled)\r\n\r\nTreat your servers as cattle not as pets, for service oriented repeatable deployments on your choice of back-end. Learn how service orchestration is a powerful new approach to deployment management, and do it with Python! If any of this sounds interesting then Juju maybe for you!\r\n\r\nIn this talk we'll see a demo deployment for a Django application and related infrastructure. We'll be looking at the key benefits of cloud deployments and how service orchestration is different from the \"machine provisioning\" approach of most existing cloud deployment solutions."], "have_tickets": [true], "title": "To the Clouds: Why you should deploy to the cloud even if you don't want to", "speakers": "Michael Foord", "track_title": "Barria1 Room", "timerange": "2015-07-21 11:45:00, 2015-07-21 12:30:00", "duration": 45, "tags": ["OpenStack", "DevOps", "linux", "go", "cloud", "ec2"]}, "233": {"id": 233, "abstracts": ["How to write a test so you would remember what it does in a year from now? How to write selective tests with different inputs? What is test? How to subclass tests cases and yet maintain control on which tests would run? How to extend or to filter inputs used in parent classes? Are you a tiny bit intrigued now? :)\r\n\r\nThis is not another talk about how to test, but how to organize your tests so they were maintainable. I will be using nose framework as an example, however main ideas should be applicable to any other framework you choose. Explaining how some parts of code works I would have to briefly touch some advanced python topics, although I will provide need-to-know basics there, so people with any level of python knowledge could enjoy the ride.\r\n"], "have_tickets": [true], "title": "Sustainable way of testing your code", "speakers": "Eugene Amirov", "track_title": "Google Room", "timerange": "2015-07-20 15:45:00, 2015-07-20 16:15:00", "duration": 30, "tags": ["nose", "unit-testing", "maintainability", "readability"]}, "196": {"id": 196, "abstracts": ["In static unit testing, the output of a function is compared to a precomputed result. Even though such unit tests may apparently cover all the code in a function, they might cover only a small subset of behaviours of the function. This potentially allows bugs such as heartbleed to stay undetected. Dynamic unit tests using fuzzing, which allows you to specify a data generation template, can make your test suite more robust.\r\n\r\nIn this talk, we demonstrate fuzzing using the hypothesis library.\r\nHypothesis is a Python library to automatically generate test data based on a template.\r\nData is generated using a strategy. A strategy specifies how data is generated, and how falsifying examples can be simplified. Hypothesis provides strategies for Python's built-in data types, and is easily customizable.Since test data is generated automatically, we can not compare against pre-computed results. Instead, tests are usually done on invariants of functions. We give an overview of such invariants.\r\n\r\nFinally, we demonstrate how we use fuzzing to test machine learning algorithms at Blue Yonder."], "have_tickets": [true], "title": "What's the fuzz all about? Randomized data generation for robust unit testing", "speakers": "Moritz Gronbach", "track_title": "PythonAnywhere Room", "timerange": "2015-07-23 12:30:00, 2015-07-23 13:15:00", "duration": 45, "tags": ["fuzzing", "hypothesis", "unit-testing"]}, "106": {"id": 106, "abstracts": ["Do you like visiting Python conferences like the EuroPython? Does it\r\nmake you to want something similar where you live too? This talk looks\r\ninto the effort, practical things and some good tips on how to\r\nbootstrap your own Python community where you live!\r\n\r\nIf you already run a local Python community, join this talk to share\r\nyour views and give your comments to those interested in building\r\ntheir first Python community.\r\n\r\nAfter the talk you have a good idea of what it takes to run your local\r\nPython community (spoiler: not much!) and how can you take it even further!"], "have_tickets": [true], "title": "How-To: Build a local Python community", "speakers": "Jyrki Pulliainen", "track_title": "Google Room", "timerange": "2015-07-24 15:15:00, 2015-07-24 15:45:00", "duration": 30, "tags": ["conferences", "organizer", "meetup", "community"]}, "336": {"id": 336, "abstracts": ["One point usually underestimated or omitted when dealing with \r\nmachine learning algorithms is how to write *good quality* code.\r\nThe obvious way to face this issue is to apply automated testing, which aims at implementing (likely) less-buggy and higher quality code.\r\n\r\nHowever, testing machine learning code introduces additional concerns that has to be considered. On the one hand, some constraints are imposed by the domain, and the risks intrinsically related to machine learning methods, such as handling unstable data, or avoid under/overfitting. On the other hand,  testing scientific code requires additional testing tools (e.g., `numpy.testing`), specifically suited to handle numerical data.\r\n\r\nIn this talk, some of the most famous machine learning techniques will be discudded and analysed from the `testing` point of view, emphasizing that testing would also allow for a better understanding of how the whole learning model works under the hood.\r\n\r\nThe talk is intended for an *intermediate* audience.\r\nThe content of the talk is intended to be mostly practical, and code\r\noriented. Thus a good proficiency with the Python language is **required**.\r\nConversely, **no prior knowledge** about testing nor Machine Learning \r\nalgorithms is necessary to attend this talk.", "", ""], "have_tickets": [true], "title": "Machine Learning Under Test", "speakers": "Valerio Maggio", "track_title": "A2 Room", "timerange": "2015-07-20 11:45:00, 2015-07-20 12:30:00", "duration": 45, "tags": ["data-science", "machine-learning", "nose", "py.test", "sklearn", "scipy", "numpy", "Testing"]}, "55": {"id": 55, "abstracts": ["When you see users starting to use your feature, you feel very proud and fulfilled. So why feel this only once every few weeks, why not feel it every day? In this talk I will show how we changed our workflow to automate deployment of code changes to production every time a feature is ready - sometimes even few times per day. I will present how to successfully combine open-source tools like Git, Jenkins, Buildout, Fabric, uWSGI, and South, in order to simplify the process and make it more reliable. I will discuss challenges that we faced implementing this workflow in a real project based on Django and how we resolved them. During this talk you will gain the knowledge required to implement Continuous Deployment in your own project."], "have_tickets": [false], "title": "Continuous Deployment for webapps based on Django", "speakers": "Wojciech Lichota", "track_title": "A2 Room", "timerange": "2015-07-24 11:00:00, 2015-07-24 11:45:00", "duration": 45, "tags": ["case study", "Tooling", "django", "Best Practice", "deployment"]}, "372": {"id": 372, "abstracts": ["Scalability is a big problem for everyone who wants to grow. In order to handle the demand, appropriate infrastructure both in terms of software and hardware should be met. What if hardware was as dynamic as a service where CPU and RAM could have been acquired when only it's needed. Is there such an environment? How can you work with it? What you should be careful of? How your applications should evolve?\r\n", "", ""], "have_tickets": [true], "title": "Preparing Apps for Dynamic Scaling", "speakers": "roy simkes", "track_title": "Barria1 Room", "timerange": "2015-07-24 12:30:00, 2015-07-24 13:00:00", "duration": 30, "tags": ["Scalability"]}, "45": {"id": 45, "abstracts": ["[Cython][1] is not only an excellent and widely used tool to speed up computational Python code, it's also a very comfortable way to talk to native code and libraries. The Cython compiler translates Python code to C or C++ code, and supports static type annotations to allow direct use of C/C++ data types and functions. The tight integration of all three languages makes it possible to freely mix Python features like generators and comprehensions with C/C++ features like native data types, pointer arithmetic or manually tuned memory management in the same code.\r\n\r\nThis talk by a core developer introduces the Cython compiler by interactive code examples and presents recent enhancements in the language that continue to make Cython the best choice for the development of fast and portable Python extensions.\r\n\r\n  [1]: http://cython.org/\r\n"], "have_tickets": [true], "title": "Get native with Cython", "speakers": "Stefan Behnel", "track_title": "Barria1 Room", "timerange": "2015-07-21 11:00:00, 2015-07-21 11:45:00", "duration": 45, "tags": ["Cython", "python", "c++", "ipython"]}, "231": {"id": 231, "abstracts": ["The terminal emulators we run so many of our programming tools in are more powerful than we remember to give them credit for, and the key to that power is understanding the interface. This talk will cover terminal colors and styles, writing to arbitrary portions of the screen, handling signals from the terminal, determining the terminal's dimensions and scrollback buffer behavior.\r\n\r\nTerminal programming can get hairy; along the way we'll deal with encoding issues, consider cross platform concerns, acknowledge 4 decades' worth of standards for terminal communication, and consider that humans at interactive terminals may not be the only users of our interfaces. By gaining an understanding of these issues, we'll be able choose from the abstractions over them offered by Python libraries Urwid, Blessings, and Python Prompt Toolkit.\r\n\r\nThis talk requires minimal Python knowledge, but does assume familiarity with command line tools in a unix environment.\r\n\r\nAn abbreviated version of this talk was presented at PyCon 2015 in Montr\u00e9al: https://www.youtube.com/watch?v=WAitSilLDUA With the additional time I'd hope to present more code examples, a more in-depth tour of existing libraries and more practical advice about writing programs that use the terminal, and an additional example of a difficult terminal details: dealing with reflowing of text in modern terminal emulators like GNOME Terminal and iTerm."], "have_tickets": [true], "title": "Terminal Whispering", "speakers": "Thomas Ballinger", "track_title": "Barria1 Room", "timerange": "2015-07-23 11:45:00, 2015-07-23 12:30:00", "duration": 45, "tags": ["terminal", "Urwid", "Blessings", "command-line", "REPL", "unix", "curses"]}, "352": {"id": 352, "abstracts": ["You've heard about Python's GIL.  But what is it really?  What does it do, both good and bad?\r\n\r\nCome learn all about the Python GIL.  You'll learn about its history, all the problems it solves, all the problems it causes (that we know about!), and what it would take to remove the GIL.\r\n\r\nAttendees should be familiar with the terrors inherent in multithreaded programming, and be comfortable with a little C code in the slides.", "", ""], "have_tickets": [true], "title": "Python's Infamous GIL", "speakers": "Larry Hastings", "track_title": "Google Room", "timerange": "2015-07-23 15:45:00, 2015-07-23 16:15:00", "duration": 30, "tags": ["GIL", "cpython"]}, "63": {"id": 63, "abstracts": ["Python is the language of choice for the orchestration part of  MySQL 5.6. \r\n\r\nAfter a brief introduction of  MySQL replication architecture, the talk [Slides here][1] presents the python utilities released by MySQL: a set of drivers in pure-python, mysql-utilites for replication, management and failover, and fabric, a tool for scaling, sharding and provisioning new servers.\r\n\r\nYou will see how to create resilient configurations in minutes and use mysql-fabric to create high available infrastructures.\r\n\r\nAs a plus, we'll show how we implemented a fabric provider for provisioning new databases via docker\r\n\r\nPrerequisites: basic database knowledge,  transactions, replication. MySQL specific concepts (eg: binary logs) are briefly introduced in the talk.\r\n\r\n  [1]: http://www.slideshare.net/ioggstream/scaling-mysql-with-python", "Python is the language of choice for the orchestration part of  MySQL 5.6. \r\n\r\nAfter a brief introduction of  MySQL replication architecture, the talk [Slides here][1] presents the python utilities released by MySQL:\r\n\r\n - a set of drivers in pure-python \r\n - mysql-utilites for replication, management and failover\r\n - fabric, a tool for scaling, sharding and provisioning new servers\r\n\r\nYou will see how to:\r\n\r\n -  create resilient configurations in minutes\r\n -  use mysql-fabric to create high available infrastructures\r\n\r\nAs a plus, we'll show how we:\r\n\r\n -  implemented a fabric provider for provisioning new databases via docker\r\n\r\n\r\n# Prerequisites\r\n\r\nBasic database knowledge,  transactions, replication. \r\n\r\nMySQL specific concepts (eg: binary logs) are briefly introduced in the talk.\r\n\r\n\r\n  [1]: http://www.slideshare.net/ioggstream/scaling-mysql-with-python", ""], "have_tickets": [true], "title": "Scaling MySQL with Python", "speakers": "Roberto Polli", "track_title": "Barria1 Room", "timerange": "2015-07-20 11:00:00, 2015-07-20 11:45:00", "duration": 45, "tags": ["Database", "mysql", "case study", "docker", "linux"]}, "108": {"id": 108, "abstracts": ["My talk is meant to provide an overview of our current set of tools for storing data and how we arrived to these.  Then, in the light of the current bottlenecks, and how hardware and software are evolving, provide a brief overview of the emerging technologies that will be important for handling Big Data within Python.  Although I expect my talk to be a bit prospective, I won't certainly be trying to predict the future, but rather showing a glimpse on what I expect we would be doing in the next couple of years for properly leveraging modern architectures (bar unexpected revolutions ;).\r\n\r\nAs an example of library adapting to recent trends in hardware, I will be showing bcolz (https://github.com/Blosc/bcolz), which implements a couple of data containers (and specially a chunked, columnar 'ctable') meant for storing large datasets efficiently.\r\n"], "have_tickets": [true], "title": "New Trends In Storing Large Data Silos With Python", "speakers": "Francesc Alted", "track_title": "Barria1 Room", "timerange": "2015-07-20 16:45:00, 2015-07-20 17:15:00", "duration": 30, "tags": ["Database", "bigdata", "python", "open-source", "data-science"]}, "272": {"id": 272, "abstracts": ["The popularity of Single Page Applications build with modern JavaScript frameworks is increasing, and more and more teams work on projects with separate frontend and backend components communicating over the network. At the same time, complex projects are evolving their architecture towards containerized microservices. However, most traditional batteries-included web frameworks are not designed for this paradigm.\r\n\r\nThis talk covers some best practices for building REST APIs for private use (in contrast to public ones), focusing on issues like authentication, error handling, validation, and serialization. It will also try to convince you that this might be a good moment to reconsider microframeworks like Flask instead of your favourite opinionated web framework."], "have_tickets": [true], "title": "Killer REST APIs for rich JS applications", "speakers": "Adam Byrtek", "track_title": "PythonAnywhere Room", "timerange": "2015-07-23 14:30:00, 2015-07-23 15:15:00", "duration": 45, "tags": ["web", "flask", "HTTP", "api", "REST"]}, "65": {"id": 65, "abstracts": ["The Raspberry Pi weather station project introduces young people to  using python programming to  solve real and technical problems. The weather station consists of a range of sensors including:\r\nAnemometer\r\nRain gauge\r\nWind Vane\r\nTemperature Probe\r\nBarometer\r\nAir Quality Sensor\r\nHygrometer\r\n\r\n1000 kits are being given away to schools to take part in the project by following our schemes of work which will involve.\r\nProgramming basic interrupt based sensors\r\nAdvanced Sensors using ADC chips\r\nCreate a pygame based UI\r\nLogging data to MySQL and Oracle Apex\r\nPresenting data to a web app\r\nDeploying the weather station\r\nIntegrating Apex database\r\n\r\nWe would love feedback on the project from Python Developers and support in updating some libraries from python 2 to 3.", "", ""], "have_tickets": [false], "title": "Raspberry Pi Weather Station", "speakers": "James Robinson", "track_title": "Barria2 Room (Education Summit)", "timerange": "2015-07-23 15:15:00, 2015-07-23 15:45:00", "duration": 30, "tags": ["education", "python3", "weather", "python2"]}, "265": {"id": 265, "abstracts": ["Kotti is a high-level, Pythonic web application framework based on Pyramid, SQLAlchemy and Bootstrap 3.  It includes an extensible Content Management System called the Kotti CMS.  Kotti is particularly well suited for building custom applications with object level security.  It comes with complete user and group management and supports the concepts of global and local roles providing management views for each of those. \r\n\r\nThe talk will give an overview on Kotti, its philosophy, history and future. Target audience are people who want to learn what it is and can be used for.  Because Kotti is just a rather small layer on top of its foundations, the talk might also give some interesting insights on how to build a solid (web) framework that suits your personal preferences.\r\n\r\nReferences:\r\n\r\n - http://kotti.pylonsproject.org/\r\n - http://kotti.readthedocs.org/en/latest/\r\n\r\n"], "have_tickets": [true], "title": "Standing on the Shoulders of Giants: The Kotti Web Application Framework", "speakers": "Andreas Kaiser", "track_title": "Barria1 Room", "timerange": "2015-07-20 15:15:00, 2015-07-20 15:45:00", "duration": 30, "tags": ["wsgi", "web", "open-source", "SQLAlchemy", "Kotti", "Pyramid"]}, "271": {"id": 271, "abstracts": ["Generar  documentaci\u00f3n de forma din\u00e1mica es relevante para los ingenieros de software porque ellos interact\u00faan con la data en el  mismo donde est\u00e1 localizada.  Es tambi\u00e9n relevante para los clientes porque la documentaci\u00f3n se puede presentar en un formato organizado y claro.  En esta presentaci\u00f3n, hablaremos de c\u00f3mo usar un proceso unificado para generar din\u00e1micamente la documentaci\u00f3n de diversas fuentes de data incluyendo los wikis y los sistemas de rastreo de incidencias.  \r\n\r\nIdealmente, nosotros como ingenieros deber\u00edamos interactuar  solamente con una Fuente de informaci\u00f3n que nos dara como resultado una  documentaci\u00f3n vigente y correspondiente al estado actual de un sistema.  En el Presente, el cliente recibe documentos incompletos y sin actualizaci\u00f3n dando una incorrecta impresi\u00f3n del estado vigente de un Sistema.  Usando un proceso unificado para generar documentaci\u00f3n de solo una Fuente de data permite presentar al cliente lo que se merece: artefactos actualizados y completos dando el real y mas reciente estado de un Sistema.  El resto de esta presentaci\u00f3n se enfocara en c\u00f3mo lograr este Sistema.", "Generar  documentaci\u00f3n de forma din\u00e1mica es relevante para los ingenieros de software porque ellos interact\u00faan con la data en el  mismo donde est\u00e1 localizada.  Es tambi\u00e9n relevante para los clientes porque la documentaci\u00f3n se puede presentar en un formato organizado y claro.  En esta presentaci\u00f3n, hablaremos de c\u00f3mo usar un proceso unificado para generar din\u00e1micamente la documentaci\u00f3n de diversas fuentes de data incluyendo los wikis y los sistemas de rastreo de incidencias.  \r\n\r\nLa documentaci\u00f3n especifica (documentos requeridos, documentos de dise\u00f1o, etc.)  es un punto cr\u00edtico para el desarrollo de un Sistema.  Desafortunadamente, desde el  momento de su creaci\u00f3n los documentos quedan desactualizados a causa del r\u00e1pido desarrollo y mejoras de c\u00f3digo que ocurren actualmente en la industria.  Con frecuencia, estas mejoras no son anotados en la documentaci\u00f3n.  El resultado de esto son documentos que no sirven o que son creados con mucha prisa resultando en documentos mediocres.  Adicionalmente hay diversas fuentes de data sin actualizar que  causan tener distintas versiones de estado actual de un Sistema.\r\n\r\nIdealmente, nosotros como ingenieros deber\u00edamos interactuar  solamente con una Fuente de informaci\u00f3n que nos dara como resultado una  documentaci\u00f3n vigente y correspondiente al estado actual de un sistema.  En el Presente, el cliente recibe documentos incompletos y sin actualizaci\u00f3n dando una incorrecta impresi\u00f3n del estado vigente de un Sistema.  Usando un proceso unificado para generar documentaci\u00f3n de solo una Fuente de data permite presentar al cliente lo que se merece: artefactos actualizados y completos dando el real y mas reciente estado de un Sistema.  El resto de esta presentaci\u00f3n se enfocara en c\u00f3mo lograr este Sistema.", ""], "have_tickets": [true], "title": "Incorporando administrado repositorios de informaci\u00f3n para generar documentaci\u00f3n on-demand", "speakers": "Todd Waits", "track_title": "Barria2 Room (Local track)", "timerange": "2015-07-22 12:30:00, 2015-07-22 13:00:00", "duration": 30, "tags": ["process", "teams", "knowledge", "management", "documentation", "DevOps", "automation", "workflow"]}, "200": {"id": 200, "abstracts": ["This presentation introduces Flowy, a library for building and running distributed, asynchronous workflows built on top of different backends (such as Amazon\u2019s SWF). Flowy deals away with the spaghetti code that often crops up from orchestrating complex workflows. It is ideal for applications that do multi-phased batch processing, media encoding, long-running tasks, and/or background processing.\r\n\r\nWe'll start by discussing Flowy's unique execution model and see how different execution topologies can be implemented on top of it. During the talk we'll run and visualize workflows using a local backend. We'll then take a look at what it takes to scale beyond a single machine by using an external service like SWF."], "have_tickets": [true], "title": "Distributed Workflows with Flowy", "speakers": "Sever Banesiu", "track_title": "Barria2 Room", "timerange": "2015-07-20 11:45:00, 2015-07-20 12:30:00", "duration": 45, "tags": ["SWF", "workflow", "AWS", "distributed-computing"]}, "316": {"id": 316, "abstracts": ["At some previous EuroPythons, I have taken advantage of people, while eating their food at the conference dinner, to extract money. But don't worry, it's all been in a good cause: in aid of the  [Python Software Foundation][1], which defends the intellectual property of the Python language, and supports Python conferences. We are well represented in the list of the [top PSF donors][2]:\r\n\r\n- 53. EuroPython 2013 Sponsored Massage\r\n- 278. EuroPython 2012 Sponsored Massage\r\n- 499. EuroPython 2011 Sponsored Massage\r\n- 572. EuroPython 2010 Sponsored Massage\r\n- 1331. EuroPython Conference Dinner (sponsored massage)\r\n\r\nIn the early days, I could reasonably visit most tables, offering a shoulder massage in return for a donation. But now, there are too many diners, and not enough hands to do this on my own! **_I need lots of help_**:\r\n\r\n - Doing neck and shoulder massage\r\n - Collecting money in a wine bucket\r\n - Counting and bagging the money\r\n - Exchanging multiple currencies and getting it into the PSF account\r\n - Feeling good that you're doing something for the Python community\r\n\r\n**What do you need to join in?** For everything apart from the massage, common sense, honesty and a sense of humour! Given these, I will be running a short massage workshop. Learn how to relax your own neck and shoulders, with fewer headaches, and less stress from hours spent crouching over a laptop. Then find out the essentials of massaging someone else's neck, shoulders and back for three to four minutes. Become a more valuable member of your work team back home. Help others to relax!\r\n\r\n### Requirements:\r\n\r\n1. Please attend the workshop only if you are actually coming to the conference dinner.\r\n1. You don't need to have particularly strong thumbs and fingers (elbows make a good substitute). But you do need to be not afraid of touching people. Massage is not tickling!\r\n1. Lack of embarrassment about asking for money. More people will pay not to have a massage, than to be massaged -- and that's OK!\r\n1. Join in!\r\n\r\nIf you'd rather not give a massage to diners/donors, no problem: there are lots of other ways to help. But at least you need to join fully in the workshop, so that you experience something of what we'll be asking money for. **A workshop means no onlookers -- all participants!**\r\n\r\n  [1]: https://www.python.org/psf/\r\n  [2]: http://legacy.python.org/psf/donations/\r\n", "", ""], "have_tickets": [true], "title": "Sponsored massage training, in aid of the Python Software Foundation", "speakers": "Rob Collins", "track_title": "Exhibition Hall / Helpdesk ", "timerange": "2015-07-21 16:45:00, 2015-07-21 17:30:00", "duration": 45, "tags": ["PSF", "massage", "relax", "REST"]}, "170": {"id": 170, "abstracts": ["Devpi is an open source PyPi-compatible package server. Its versatile features make it the Swiss Army knife of Python package and release management, enabling anyone to shape a custom release workflow.\r\n\r\nIn this talk, I will detail how we use our company-wide Devpi installation in order to share a large set of packages across teams, deploy binary packages to our application servers, and mix and mash open source packages with our own. With Devpi being a critical part of our release and deployment infrastructure, I will also cover our high-availability setup and how we perform major version updates with minimal downtime.\r\n\r\nWhile this talk is not meant to be an exhaustive introduction of all available Devpi features, it can offer insights on how Devpi can be used at a larger scale.", "", ""], "have_tickets": [true], "title": "Release Management with Devpi", "speakers": "Stephan Erb", "track_title": "Barria1 Room", "timerange": "2015-07-22 12:30:00, 2015-07-22 13:00:00", "duration": 30, "tags": ["case study", "deployment", "packaging", "Devpi"]}, "48": {"id": 48, "abstracts": ["Trying to find a good place to eat has become much easier and democratic with online reviews, but on the other hand, that creates new problems.  Can you trust that 5 star review of fast food chain as much as the 1 star of a fancy restaurant because \"Toast arrived far too early, and too thin\"?\r\n\r\nWe all like enjoy things differently.  Starting of on the assumption that the \"best pizza\" is not the same for everyone.  Can we group users into people that has similar tastes? Can we identify  reviews and restaurants to make sense of it? Can that lead us to a better way to find restaurants that you like?\r\n\r\nUsing some data handling techniques I walk you through my process and results that I've got from that idea.  There are no requisites for this talk except basic python and math knowledge (matrices exist)\r\n\r\n "], "have_tickets": [true], "title": "Yak shaving a good place to eat using non negative matrix factorization", "speakers": "Adriano Petrich", "track_title": "Barria1 Room", "timerange": "2015-07-23 15:45:00, 2015-07-23 16:15:00", "duration": 30, "tags": ["visualization", "fun", "data-science"]}, "204": {"id": 204, "abstracts": ["There is a lot buzz  about the Internet of things and how it's going to be the next big thing in computing. Python can power \"things\" and is used extensively in network applications, however there isn't much information out there about where Python can be used to build end-to-end IoT products.\r\n\r\nGoals :\r\nTo put into perspective the usefulness of Python in building IoT products.\r\nSpread awareness on possibilities of using Python on embedded hardware."], "have_tickets": [true], "title": "Python & Internet of Things", "speakers": "Ravi Vagadia", "track_title": "A2 Room", "timerange": "2015-07-20 15:45:00, 2015-07-20 16:15:00", "duration": 30, "tags": ["wearables", "BlE", "IoT", "distributed-computing"]}, "349": {"id": 349, "abstracts": ["Python is a fantastic language for writing web scrapers. There is a large ecosystem of useful projects and a great developer community. However, it can be confusing once you go beyond the simpler scrapers typically covered in tutorials.\r\n\r\nIn this talk, we will explore some common real-world scraping tasks. You will learn best practises and get a deeper understanding of what tools and techniques can be used.\r\n\r\nTopics covered will include:\r\n- Crawling - single pages, websites, focussed crawlers, etc.\r\n- Data extraction - techniques for \u201cscraping\u201d data from from web pages (e.g. regular expressions, xpath, machine learning).\r\n- Deployment - how to run and maintain different kinds of web scrapers\r\n- Real world examples\r\n", "", ""], "have_tickets": [true], "title": "Advanced Web Scraping", "speakers": "Shane Evans", "track_title": "Google Room", "timerange": "2015-07-21 11:00:00, 2015-07-21 11:45:00", "duration": 45, "tags": ["scrapy", "scraping"]}, "289": {"id": 289, "abstracts": ["This case study show how to start from a simple distance search on elasticsearch and haystack and implement a production ready search like airbnb. \r\nThe talk will explain decay functions works with the different curves (linear, exponential, gauss) and how to send them with query scores to elasticsearch. With that you will be able to mix the distance, the price, the user activity, the number of picture and whatever you want.  \r\n\r\n\r\nAdditionally I will show how to write a custom ElasticsearchSearchQuery and ElasticsearchSearchBackend because this is not yet supported by haybtacksearch.\r\n\r\nAll the code will be available on github soon\r\n\r\n"], "have_tickets": [true], "title": "From basic distance search to a complex multi criteria search", "speakers": "Antonin Lacombe", "track_title": "A2 Room", "timerange": "2015-07-22 12:30:00, 2015-07-22 13:00:00", "duration": 30, "tags": ["web", "haystacksearch", "django", "elasticsearch"]}, "122": {"id": 122, "abstracts": ["Software development is all about writing code that delivers additional value to a customer. Following the agile and lean approach this value created by code changes should be continuously delivered as fast, as early and as often as possible without any compromise on the quality. \r\nRemarkably, there is a huge gap between the development of the application code and the reliable and scalable operation of the application. As an example, most of the tutorials about web development with Flask or Django end by starting a local \u201cdummy\u201d server, missing out all the steps needed for production ready operation of the web service. Furthermore, as there is no \u201crocket science\u201d in-between, many proposals to bridge that gap from both sides, operations and developers start with sentences like: \u201cyou just have to...\u201d, a clear indication that it will cause problems later on and also a symptom of a cultural gap between developers and operations staff.\r\nIn this talk I will go through the complete delivery pipeline from application development to the industrial grade operation, clearly biased towards the \u201cDevOps\u201d mindset. Instead of presenting a sophisticated enterprise solution, I will outline the necessary building blocks for continuous delivery and fill them up with simple but working poor man's solutions, so that it is equally useful for professional and non-professional developers and operations engineers. After the talk you will know how to build such a continuous delivery pipeline with open-source tools like \u201cAnsible\u201d, \u201cDevpi\u201d and \u201cJenkins\u201d and I will share some of my day-to-day experiences with automation in general. Although many of the concepts are language agnostic I will focus on the ins and outs in a python universe and outline the pythonic way of \u201cget this thing running\u201d.\r\n"], "have_tickets": [true], "title": "A Pythonic Approach to Continuous Delivery", "speakers": "Sebastian Neubauer", "track_title": "A2 Room", "timerange": "2015-07-22 11:00:00, 2015-07-22 11:45:00", "duration": 45, "tags": ["Operations", "ApplicationLifecycle", "ConfigurationManagement", "Devpi", "ContinuousDelivery", "Jenkins", "DevOps", "ansible"]}, "324": {"id": 324, "abstracts": ["Do you know what happens every time you use the **@** symbol in Python?\r\n\r\nIn this talk we will see the magic behind the _syntactic sugar_ of the decorators. To understand how they internally work we will see in detail Python's **scopes**, **namespaces** and **closures**, and finally we will manually apply our own handcrafted decorator.\r\n\r\nThis talk is an improved version (in English) of the talk I delivered at PyConES 2013 (the feedback was pretty positive): [https://www.youtube.com/watch?v=d9-yTnJgcg4 ][1]\r\n\r\nLevel:\r\nIntermediate. Attendees must have previous knowledge of Python and should be somehow familiar with the **'@'** notation to decorate a function.\r\n\r\n  [1]: https://www.youtube.com/watch?v=d9-yTnJgcg4\r\n"], "have_tickets": [true], "title": "Decorators demystified", "speakers": "Pablo Enfedaque", "track_title": "A2 Room", "timerange": "2015-07-23 11:45:00, 2015-07-23 12:30:00", "duration": 45, "tags": ["namespaces", "scopes", "decorators", "closures"]}, "230": {"id": 230, "abstracts": ["OpenCV Python bindings provide several ready to use tools for camera calibration, image recognition and camera position estimation. This talk will show how to recognize a picture, from a library of known paintings, and compute the camera position with respect to the recognized picture using OpenCV and numpy. This is applied to a tourist guide application for Google Glass through the recognition of the paintings exposed in the museum.\r\n"], "have_tickets": [true], "title": "Image recognition and camera positioning with OpenCV. A tourist guide application.", "speakers": "Francesco Nazzaro", "track_title": "Barria1 Room", "timerange": "2015-07-21 12:30:00, 2015-07-21 13:00:00", "duration": 30, "tags": ["python", "Google Glass", "ipython notebook", "image recognition", "numpy", "OpenCV"]}, "23": {"id": 23, "abstracts": ["In this talk I will describe how to use Apache Spark (PySpark) with some data from the World of Warcraft API from an iPython notebook.  Spark is interesting because it speeds up iterative processes on your hadoop cluster as well as your local machine. \r\n\r\nI will give basic benchmarks (comparing it to numpy/pandas/scikit), explain the architecture/performance behind the technology and will give a live demo on how I used Spark to analyse an interesting dataset. I'll explain why you might want to use Spark and I'll also go in and explain when you don't want to use it. \r\n\r\nThe dataset I will be using is a 22Gb json blob containing auction house data from all world of warcraft servers over a period of time. The goal of the analysis will be to determine when and if basic economics still applies in a massively online game. \r\n\r\nI will assume that the everyone knows what the ipython notebook is and I will assume a basic knowledge of numpy/pandas but nothing fancy. The dataset has been chosen such that people who are less interested in Spark can still enjoy the analysis part of the talk. If you know very little about data science but if you love video games then you should like this talk.", "", ""], "have_tickets": [true], "title": "PySpark and Warcraft Data", "speakers": "vincent warmerdam", "track_title": "A2 Room", "timerange": "2015-07-21 11:00:00, 2015-07-21 11:45:00", "duration": 45, "tags": ["data-science", "machine-learning", "bigdata", "analytics", "pandas", "numpy"]}, "59": {"id": 59, "abstracts": ["The author  shows how to use the [SleekXMPP][1] library in order to write a small chatbot that connects to Google Hangouts and reminds you or someone else to take medication for instance.  The secure and recommended OAuth2  protocol is used to authorize the bot application in the [Google Developers Console][2]  in order to access the Google+ Hangouts API. The author will elaborate then on how to use an event-driven library to write a bot that sends scheduled messages, waits for a proper reply and repeats the question if need be. Thereby, a primer on event-driven architectures will be given.\r\n\r\n  [1]: http://sleekxmpp.readthedocs.org/\r\n  [2]: https://console.developers.google.com/\r\n"], "have_tickets": [true], "title": "\"It's about time to take your medication!\" or how to write a friendly reminder bot ;-)", "speakers": "Florian Wilhelm", "track_title": "Barria2 Room", "timerange": "2015-07-24 11:45:00, 2015-07-24 12:30:00", "duration": 45, "tags": ["automation", "xmpp", "oauth2", "bot", "network", "hangouts"]}, "318": {"id": 318, "abstracts": ["Odoo is used by 2 millions of users, although relatively unknown in the python community, it has a vibrant community and is one of the most active python open source project.\r\n\r\nI will present you the Odoo framework and how it can help to be more productive when building web based business apps.  I will highlight its advantages compared to more popular framework such as django.", "", ""], "have_tickets": [true], "title": "Odoo the underdog python killer app. A python framework for web based business apps.", "speakers": "Antony Lesuisse", "track_title": "Google Room", "timerange": "2015-07-22 12:30:00, 2015-07-22 13:15:00", "duration": 45, "tags": ["werkzeug", "HTTP.", "python", "javascript", "postgresql", "wsgi", "web", "django"]}, "213": {"id": 213, "abstracts": ["Have you ever developed a nice, well-working python program on one environment, only to have it blow up with exceptions and tracebacks when you run it on a different environment? Have no fear! This talk will show you how to write and maintain python code that is compatible across environments that may differ by python versions and/or operating systems.\r\n\r\nTechniques and tips will be drawn from lessons and experiences gained from making the AWS CLI, a python-based command line tool to manage AWS resources, compatible across a wide range of environments. In a case-study-like format, real-life compatibility issues encountered while developing the AWS CLI will be presented along with how we resolved each of them. These real-life examples will encompass, but will not be limited to, the following topics:\r\n\r\n\u2022 How to use functions and classes that may differ across python versions and/or operating systems\r\n\r\n\u2022 How to handle version-specific bugs\r\n\r\n\u2022 How to handle strings, bytes, and Unicode across python versions\r\n\r\n\u2022 How to handle differing locale settings\r\n\r\n\u2022 How to handle file operations across operating systems\r\n\r\n\u2022 How and when to vendor dependencies\r\n\r\n\u2022 How to write tests that are compatible across python versions and operating systems\r\n\r\n\u2022 How to create a testing environment that monitors compatibility of code across various environments\r\n\r\nUltimately, the goal of these examples is introduce to you some effective, real-world programming practices to overcome your current or next compatibility issue.\r\n"], "have_tickets": [true], "title": "It Works on My Machine: Writing Python Code for Any Environment", "speakers": "Kyle Knapp", "track_title": "Barria2 Room", "timerange": "2015-07-20 12:30:00, 2015-07-20 13:00:00", "duration": 30, "tags": ["CLI", "packaging", "python2", "python3", "Best Practice", "Development", "Testing"]}, "294": {"id": 294, "abstracts": ["Docker has introduced a new model of deployment solving the infamous \"Deployment Matrix from Hell\" by using containers.\r\nBut this also brought the spotlight back on the Operating System side, and following the trails of CoreOS and Atomic Host, a new generation of Cloud Servers are born by using containers instead of traditional RPM/DPKG/tarball/whaterver packages model to deploy services. CoreOS/Atomic Host/Snappy Ubuntu and now VMWare Photon also provides transactional image-based OS focusing on security and built-in cluster management.\r\n\r\nDuring this talk, we'll present these next-gen OS, and their components and how they fit in. ", "", ""], "have_tickets": [true], "title": "The Lightweight Cloud Servers War Begins", "speakers": "Haikel Guemar", "track_title": "Barria1 Room", "timerange": "2015-07-20 11:45:00, 2015-07-20 12:30:00", "duration": 45, "tags": ["Photon", "Snappy", "atomic", "cloud", "Virtualization", "community", "docker", "infrastructure", "Best Practice", "CoreOS", "rocket"]}, "302": {"id": 302, "abstracts": ["The MongoDB aggregation framework provides a means to calculate aggregated values without having to use map-reduce. While map-reduce is powerful, it is often more difficult than necessary for many simple aggregation tasks, such as totaling or averaging field values.\r\n\r\nSee how to use the build-in data-aggregation-pipelines for averages, summation, grouping, reshaping. See how to work with documents, sub-documents, grouping by year, month, day, etc. \r\n\r\nThis talk will give many (live) examples how to make the most of your data with pymongo with a few lines of code.", "", ""], "have_tickets": [true], "title": "Data Analysis and Map-Reduce with mongoDB and pymongo", "speakers": "Alexander Hendorf", "track_title": "Google Room", "timerange": "2015-07-22 11:00:00, 2015-07-22 11:45:00", "duration": 45, "tags": ["pymongo", "bigdata", "python", "mongodb", "analytics"]}, "214": {"id": 214, "abstracts": ["A few months ago, Guido unfolded PEP 484, which was highlighted at PyCon 2015 as a keynote presentation. This proposal would introduce type hints for Python 3.5. While the debate is still roaring and without taking a side, I believe that there is much to learn from static type-checking systems.\r\n\r\nThe purpose of this talk is to introduce ways that could be used to fully take over the amazing power that comes with static types, inside a dynamic type language such as Python. The talk will go over what exactly a static type system is, and what kind of problem it tries to solve. We will also review Guido's proposal of type hinting, and what it could mean to you. Finally, I will present a few libraries that are available, such as Hypothesis  or various QuickCheck-inspired library that tries to build more robust tests, how they achieve it and their limitations. Throughout the talk, a lot of examples will used to fully illustrate the ideas being explained. \r\n\r\nAt the end of this talk, you should have a better understanding of the wonderful world of type systems, and what it really means to you. It should help you decide wether using type hints will be helpful to you and also if an external library trying to fuzz your tests has its place inside your project "], "have_tickets": [true], "title": "Static type-checking is dead, long live static type-checking in Python!", "speakers": "Jean-Philippe Caissy", "track_title": "Google Room", "timerange": "2015-07-24 15:45:00, 2015-07-24 16:15:00", "duration": 30, "tags": ["python3", "type-hinting", "library", "static-analysis", "Testing"]}, "6": {"id": 6, "abstracts": ["Microservices are a fresh architecture trend. In this talk I will explain what a microservice is. I will answer WHY and HOW to build microservices using tooling from Python ecosystem. We will take a look at components that power microservices: web frameworks, task queues, databases, reporting & monitoring tools and also integration technologies.\r\n\r\nI will start from design & planning, go through implementation and deployment process and briefly cover internal communcation and MDM (master data management).\r\n\r\nFinally, I will present a brief overview of patterns and anti-patterns of microservice architectures, as well as cover few use cases and success stories.\r\n\r\nPrerequisites: be familiarized with at least one python web framework and have a general understanding of web stack."], "have_tickets": [true], "title": "Why should You consider microservices ?", "speakers": "Jacek Nosal", "track_title": "Barria2 Room", "timerange": "2015-07-20 15:15:00, 2015-07-20 15:45:00", "duration": 30, "tags": ["HTTP.", "DevOps", "automation", "docker", "ansible", "Tooling"]}, "239": {"id": 239, "abstracts": ["Un proyecto hecho en Django durante dos a\u00f1os da para muchas an\u00e9cdotas y mucho aprendizaje.  Esta charla es un repaso por las decisiones sobre lo humano y lo t\u00e9cnico que fuimos tomando durante el desarrollo del proyecto.\r\n\r\nSe\u00f1alar\u00e9 las buenas decisiones que tomamos en el equipo, y tambi\u00e9n las que no nos salieron bien y nos hicieron aprender por las malas. \r\n\r\nTanto las buenas como las malas decisiones nos ense\u00f1aron much\u00edsimo y aqu\u00ed las compilo junto con unos cuantos tips que pueden divertir y, ojal\u00e1, inspirar a la audiencia, especialmente a aquellas personas que se enfrentan por primera vez a un proyecto grande.\r\n", "", ""], "have_tickets": [true], "title": "Lecciones aprendidas en un proyecto grande de Django", "speakers": "Yamila Moreno", "track_title": "Barria2 Room (Local track)", "timerange": "2015-07-22 16:45:00, 2015-07-22 17:15:00", "duration": 30, "tags": ["postgresql", "python", "django", "open-source", "Beginners"]}, "90": {"id": 90, "abstracts": ["At the beginning of this year I started working at Lyst and I was tasked with helping to replace their old and outdated web API with a modern RESTful replacement. \r\n\t\r\nAlong the way we encountered some interesting design decisions and now I\u2019m going to share what we learned about building a real RESTful API with Django and Django REST framework.\t\r\n\r\nI've been talking about how to build great RESTful APIs for the past year at various Python and Django conferences in Europe. Now I'd like to take some real world experiences from creating Lyst's new web API and share what I've learned along the way.\r\n"], "have_tickets": [true], "title": "What it's really like building RESTful APIs with Django", "speakers": "Paul Hallett", "track_title": "Google Room", "timerange": "2015-07-23 15:15:00, 2015-07-23 15:45:00", "duration": 30, "tags": ["HTTP.", "django", "api", "REST"]}, "184": {"id": 184, "abstracts": ["One of the problems programmers are most often faced with is the parsing and validation of command-line arguments. If you're new to Python or programming in general, you might start by parsing sys.argv. Or perhaps you might've already come across standard library solutions such as getopt, optparse or argparse in the official documentation. \r\nWhile these modules are probably preferable to parsing sys.argv yourself, you might wonder if there are more satisfactory solutions outside of the standard library. Well, yes there are!\r\n\r\nThis talk will give you an overview of some popular alternatives to the standard library solutions (e.g. click, docopt and cliff), explain their basic concepts and differences and show how you can test your CLIs."], "have_tickets": [true], "title": "Building nice command line interfaces - a look beyond the stdlib", "speakers": "Patrick M\u00fchlbauer", "track_title": "Google Room", "timerange": "2015-07-22 15:45:00, 2015-07-22 16:15:00", "duration": 30, "tags": ["docopt", "cliff", "Click", "CLI"]}, "71": {"id": 71, "abstracts": ["with modern_peripherals: \r\n    Python and Flask\r\n\r\nAuto-scrolling sites, glance-following ads, and gesture friendly web pages are coming!\r\n\r\nOver the last few years three products  emerged that enable interaction with computer  in a new way: Myo Armband, Leap Motion Controller and EyeTribe. The Myo Armband is a device that uses the electrical activity in your muscles to wirelessly control your computer, phone, and tablet, which is especially useful when your hands are \"tied\" or dirty.  This device will be used to navigate through the presentation. The Leap Motion Controller tracks both hands in front of the screen.  From a web developer\u2019s perspective, both devices allows us to use gestures, previously  restricted to touch devices, on desktops. EyeTribe is an affordable eye-tracking device. \r\n\r\nThe talk will briefly cover setting up SDKs and python wrappers, and then focus on possible uses in daily life, business and, of course, web app development. Code examples will be included. In addition, the trade-offs between processing this new type of input data in the client versus processing input on the server will be discussed.\r\n"], "have_tickets": [true], "title": "with modern_peripherals: Python and Flask", "speakers": "Piotr Dyba", "track_title": "A2 Room", "timerange": "2015-07-20 14:30:00, 2015-07-20 15:15:00", "duration": 45, "tags": ["Beginners", "python", "technologies", "flask", "web", "python3", "socket", "communication"]}, "222": {"id": 222, "abstracts": ["Have you ever worried that your tests aren't as good because they're running against a fake or mock instead of the real thing?\r\nVerified fakes solve this problem.\r\nVerified fakes allow for simplified testing using fakes while still providing the assurance that code tested using a fake implementation will behave the same way when used with a real implementation.\r\n\r\nThe talk will begin with a case-study, demonstrating what it means to write a \"verified fake\" implementation of a public API.\r\nI will show how to write tests that verify a fake implementation of a well defined API\r\nand I will show how those same tests can be re-used to verify and test real implementations of the same API.", "Have you ever worried that your tests aren't as good because they're running against a fake or mock instead of the real thing?\r\nVerified fakes solve this problem.\r\nVerified fakes allow for simplified testing using fakes while still providing the assurance that code tested using a fake implementation will behave the same way when used with a real implementation.\r\n\r\nThe talk will begin with a case-study, demonstrating what it means to write a \"verified fake\" implementation of a public API.\r\nI will show how to write tests that verify a fake implementation of a well defined API\r\nand I will show how those same tests can be re-used to verify and test real implementations of the same API.\r\n\r\nThe talk will end with a proposal that more libraries should include verified fakes.\r\nI will show, with real-world examples, how verified fakes can be used by integrators\r\nand discuss how they are superior to ad-hoc, unverified, mocking.\r\n\r\nDuring the talk I will refer to various real world, Open Source examples. Including:\r\n\r\n* Flocker's Pluggable \"Block Device Backend\" [1]\r\n\r\n  This API allows Flocker to manipulate file systems on OpenStack Cinder Blocks and AWS EBS devices.\r\n  It also makes it easy for third parties to implement their own Flocker block device backends.\r\n\r\n* Eliot's Memory Logger - and its use in testing and verifying logged messages.\r\n* LibCloud's DummyNodeDriver - and its limitations.\r\n* Boto - as an example of a library that could benefit from a verified, introspectable fake.\r\n* Docker-py - as an example of a library for which we have written a verified fake.\r\n\r\nThere will be at least 5 minutes for discussion at the end of the talk.\r\n\r\n[1] Flocker is an Open Source Docker orchestration system written in Python by ClusterHQ\r\n", ""], "have_tickets": [false], "title": "Faking It - The Art of Testing Using Verified Fakes", "speakers": "Richard Wall", "track_title": "A2 Room", "timerange": "2015-07-23 12:30:00, 2015-07-23 13:00:00", "duration": 30, "tags": ["tdd", "AWS", "OpenStack", "docker", "api", "cloud", "Best Practice", "Testing", "linux"]}, "81": {"id": 81, "abstracts": ["Creating a large-scale event processing system can be a daunting task. Especially if you want it \u201cstupid simple\u201d and wrapped around each client\u2019s needs. We built a straightforward solution for this using Python 3 and other open-source tools.\r\n\r\nMain issues to solve for a system that needs to be both performant and scalable:\r\n\r\n - handling a throughput of 1 million events per minute in a 4 cores AWS instance;\r\n\r\n - following the principle of least astonishment;\r\n\r\n - data aggregation and how Python's standard libraries and data structures can help;\r\n\r\n - failsafe and profiling mechanisms that can be applied to any Linux service in production;\r\n\r\n - addressing unexpected behaviors of Python\u2019s Standard Library; like reading from a file while it is written;\r\n\r\n - tackling a sudden spectacular cloud instance failure;\r\n\r\nThe alternative to this system would be to adopt existing technology stacks that might be too general, add more complexity, bloat, costs and which need extensive work to solve your specific problem. Moreover, our approach resulted in over 85% drop on hardware utilisation.\r\n\r\n[Context: Production Software \u2013 II (where good coding reduces the client\u2019s bill)][1]\r\n\r\n  [1]: https://eastvisionsystems.com/production-software-part-ii-good-coding-reduces-clients-bill/\r\n", "", ""], "have_tickets": [true], "title": "Use Python to process 12mil events per minute and still keep it simple (Talk)", "speakers": "Teodor Dima", "track_title": "Barria1 Room", "timerange": "2015-07-21 15:45:00, 2015-07-21 16:15:00", "duration": 30, "tags": ["bigdata", "performance", "architecture", "Development"]}, "267": {"id": 267, "abstracts": ["As an engineer working on any web stack, you may have heard about Blocking and Non-Blocking IO. You may as well have used any framework or library that supports Non-Blocking IO. After all, they are very useful as you don't want to block execution of other tasks while one task is waiting to complete a network call to another service (like HTTP call to an API or may be a TCP call to your database). Non-Blocking IO while doing tasks and not wait for IO. This also helps us handle a lot many connections than we possibly could with Blocking IO. Python supports Non-Blocking IO, but we always use some existing 3rd party library that hides all the gory details and makes it all look like black magic to the uninitiated. But there is nothing like black magic.\r\n\r\nThis presentation will be an introductory talk focused at explaining how Non-Blocking IO works, which is the basis of libraries like Gevent, Tornado and Twisted. We will learn about how Non-Blocking IO can be implemented using the most basic modules that form the base for the above mentioned libraries. Hopefully after this talk, Non-Blocking IO will not be an unsolved mystery for you anymore."], "have_tickets": [false], "title": "Understanding Non-blocking IO", "speakers": "Vaidik Kapoor", "track_title": "Google Room", "timerange": "2015-07-21 15:45:00, 2015-07-21 16:15:00", "duration": 30, "tags": ["web", "asyncronous", "networking"]}, "4": {"id": 4, "abstracts": ["Knowing that your application is up and running is great. However in order to make informed decisions about the future, you also need to know in what state your application currently is and how its state is developing over time.\r\n\r\nThis talk combines two topics that are usually discussed separately. However I do believe that they have a lot of overlap and ultimately a similar goal: giving you vital insights about your system in production.\r\n\r\nWe'll have a look at their commonalities, differences, popular tools, and how to apply everything in your own systems while avoiding some common pitfalls.", "", ""], "have_tickets": [true], "title": "Beyond grep: Practical Logging and Metrics", "speakers": "Hynek Schlawack", "track_title": "PythonAnywhere Room", "timerange": "2015-07-21 11:45:00, 2015-07-21 12:30:00", "duration": 45, "tags": ["logging", "metrics", "errors", "DevOps"]}, "261": {"id": 261, "abstracts": ["Elasticsearch has many use cases, some of them fairly obvious and widely used, like plain searching through documents or analytics. In this talk I would like to go through some of the more advanced scenarios we have seen in the wild. Some examples of what we will cover:\r\n\r\nTrend detection - how you can use the aggregation framework to go beyond simple \"counting\" and make use of the full-text properties of Elasticsearch.\r\n\r\nPercolator - percolator is reversed search and many people use it as such to drive alerts or \"stored search\" functionality for their website, let's look at how we can use it to detect languages, geo locations or drive live search.\r\n\r\nIf we end up with some time to spare we can explore some other ideas about how we can utilize the features of a search engine to drive non-trivial data analysis including Geo-enabled search with relevancy.\r\n", "", ""], "have_tickets": [true], "title": "Beyond the basics with Elasticsearch", "speakers": "Honza Kr\u00e1l", "track_title": "Google Room", "timerange": "2015-07-24 12:30:00, 2015-07-24 13:15:00", "duration": 45, "tags": ["search", "bigdata", "open-source", "elasticsearch", "analytics"]}, "189": {"id": 189, "abstracts": ["Continuous Integration is a software development practice where members of a team integrate their work frequently, leading to multiple integrations per day. Each integration is verified by an automated process (including tests) to detect integration errors as quickly as possible.\r\n\r\nThis talk will introduce the basic principles for building an effective Continuous Integration system for Python-based projects. It will present the lessons learned from building a Jenkins-based CI system for an Open Source project with a distributed team of more than 340 core developers that ranks  among the top 2% of all open source projects worldwide (Plone). "], "have_tickets": [true], "title": "The Butler and the Snake - Continuous Integration for Python", "speakers": "Timo Stollenwerk", "track_title": "Barria2 Room", "timerange": "2015-07-20 15:45:00, 2015-07-20 16:15:00", "duration": 30, "tags": ["python", "ContinuousIntegration", "tdd", "ContinuousDelivery", "Testing"]}, "314": {"id": 314, "abstracts": ["With the Raspberry Pi, it's easy to do physical computing directly from Python code - rather than usual embedded hardware engineering in C or Assembler. \r\n\r\nIn this talk I'll show examples of physical computing projects that use Python on Raspberry Pi and demonstrate the sort of code  used in such projects.\r\n\r\nPhysical computing with Python is very popular in education - as it's so engaging, and more interesting than printing to the screen.\r\n\r\nThis will be an informative session with learning possibilities to give those new to physical computing a change to get started.", "", ""], "have_tickets": [true], "title": "Physical computing with Python and Raspberry Pi", "speakers": "Ben Nuttall", "track_title": "Barria2 Room (Education Summit)", "timerange": "2015-07-23 11:00:00, 2015-07-23 11:45:00", "duration": 45, "tags": ["education", "raspberrypi"]}, "216": {"id": 216, "abstracts": ["As Python programmers we're used to program without taking care about allocating\r\nmemory for our objects and later on freeing them, Python garbage collector\r\ntakes care of this task automatically for us.\r\n\r\nGarbage collection is one of the most challenging topics in computer science,\r\nthere are a lot of research around the topic and different ways to tackle\r\nthe problem.\r\n\r\nKnowing how our language does this process give us a better understanding\r\nof underlying interpreter and allow us to know why problems like cycles\r\ncan happen in CPython interpreters.\r\n\r\nSo, this talk aims to be and introduction to the topic and a walkaround\r\nthrough different approaches followed in CPython and PyPy:\r\n\r\n* Generational Reference counting with cycles detector on CPython.\r\n* Incremental version of the MiniMark GC on PyPy.\r\n"], "have_tickets": [true], "title": "Knowing your garbage collector", "speakers": "Francisco Fern\u00e1ndez Casta\u00f1o", "track_title": "Barria2 Room", "timerange": "2015-07-20 14:30:00, 2015-07-20 15:15:00", "duration": 45, "tags": ["collection", "counting", "reference", "garbage", "cpython", "PyPy"]}, "14": {"id": 14, "abstracts": ["The Python compiler Nuitka has evolved from an absurdly compatible Python to C++ translator into a **statically optimizing Python compiler**. The mere peephole optimization is now accompanied by full function/module level optimization, with more to come, and only increased compatibility.\r\n\r\nWitness local and module **variable value propagation**, **function in-lining** with suitable code, and graceful degradation with code that uses the full Python power. (This is considered kind of the break through for Nuitka, to be finished for EP.) No compromises need to be made, full language support, all modules work, including extension modules, e.g. PyQt  just works.\r\n\r\nAlso new is a plugin framework that allows the user to provide workarounds for the standalone mode (create self contained distributions), do his own type hinting to Nuitka based on e.g. coding conventions, provide his own optimization based on specific knowledge.\r\n\r\nUltimately, Nuitka is intended to grow the Python base into fields, where performance is an issue, it will need your help. Scientific Python could largely benefit from future Nuitka. Join us now.\r\n", "", ""], "have_tickets": [true], "title": "The Python Compiler", "speakers": "Kay Hayen", "track_title": "PythonAnywhere Room", "timerange": "2015-07-20 14:30:00, 2015-07-20 15:15:00", "duration": 45, "tags": ["FOSS", "python", "performance", "scipy", "numpy"]}, "139": {"id": 139, "abstracts": [" **Stop doing the same thing but expecting different results**\r\n\r\nAs developers we put considerable effort into optimisation. We are always tinkering, trying to make things better, and striving to remove antipatterns from our code and our development processes. \r\n\r\nYet for some reason we have not been as good at applying this spirit of optimisation to the problem of increasing diversity, even though most people these days agree that, like good tests, agile methodologies, and virtual environments, diversity is a \"good thing\".\r\n\r\nMy position is that just as there is no single easy way to write good code there is no single easy way to increasing diversity. There are, however, several things that companies and organisations do which actually work against diversity. This talk will explore these antipatterns for diversity, including uncritical belief in meritocracy, lack of understanding of the realities of marginalisation, null processes, misunderstanding of \"culture fit\", and an unwillingness to change, as well as some ways that teams, companies, and organisations might work to combat them.\r\n\r\n"], "have_tickets": [true], "title": "Antipatterns for Diversity", "speakers": "Naomi Ceder", "track_title": "A2 Room", "timerange": "2015-07-23 16:45:00, 2015-07-23 17:15:00", "duration": 30, "tags": ["diversity", "inclusion", "Best Practice", "community"]}, "128": {"id": 128, "abstracts": ["The asyncio module introduced in Python 3.4 is a game-changer for I/O management and event-driven network programming in Python. Aiming to be a lower-level implementation of an asynchronous event loop, it intends that higher level frameworks like Tornado, Twisted or Gevent will build on top of it, taking advantage of the shared interface for writing concurrent event-driven code across different Python frameworks.\r\n\r\nThis talk connects theory with practice, presenting how Tornado can run in the asyncio event loop and take advantage of the subgenerator delegation syntax (yield from) to provide a high degree of concurrency while keeping the simplicity of sequential code. It explains the concept of coroutines, futures and ioloop, exposing Python 3 code for sample web tasks. The talk completes with a basic demo of running this code on Tornado, comparing its syntax and performance with popular asynchronous frameworks from other languages."], "have_tickets": [true], "title": "Better asynchronous code with Tornado and Python 3", "speakers": "Anton Caceres", "track_title": "Barria1 Room", "timerange": "2015-07-23 11:00:00, 2015-07-23 11:45:00", "duration": 45, "tags": ["web", "python3", "tornado", "asyncio"]}, "98": {"id": 98, "abstracts": ["One day our software will go in production, and so shortly we will pay dearly for our youthful mistakes. Without regression tests, we will be in deep trouble. If we have regression tests, but we did not have performed TDD, we should probably increase the effort in bug fixing and\r\nmaintenance, since we do not have enough code coverage and our tests come out complex.\r\n\r\nBy retracing the author youthful mistakes, we will see a complete development workflow, from the user story to the low-level tests, in order to highlight the differences between functional, integration and unit tests, the best practices, and the lessons learned by the author during the development of the [Sardinia Radio Telescope][1]  control software.\r\n\r\n  [1]: https://www.youtube.com/watch?v=zCL_tSMqsRg\r\n", "", ""], "have_tickets": [true], "title": "Lessons learned about testing and TDD", "speakers": "Marco Buttu", "track_title": "A2 Room", "timerange": "2015-07-21 11:45:00, 2015-07-21 12:30:00", "duration": 45, "tags": ["unit-te", "tdd", "Testing"]}, "238": {"id": 238, "abstracts": ["A Django project, developed for 2 years is a valuable source of anecdotes and wisdom. This talk is a review on the decissions, about human and tech, that my team took during the project. I'll point out the good decissions as well as the bad ones, those which made us learn \"the hard way\".\r\n\r\nBoth good and bad decissions taught us a lot, and here I compile them, together with a handful of tips which can amuse and, hopefully, inspire the audience, specially those who are facing for the first time a big project."], "have_tickets": [true], "title": "Learnt lessons in a big Django Project", "speakers": "Yamila Moreno", "track_title": "Barria1 Room", "timerange": "2015-07-24 15:15:00, 2015-07-24 15:45:00", "duration": 30, "tags": ["postgresql", "python", "django", "open-source", "Beginners"]}, "169": {"id": 169, "abstracts": ["In this talk, people will get introduced to python threading and multiprocessing packages. This talk will cover multiprocessing/threaded development best practices, problems occurs in development, things to know before multiprocessing/multi-threading. After this talk attendees will be able to develop multiprocessing/threaded applications. \r\n\r\nThis talk will cover threads, global interpreter lock, thread pool, processes, process pool, synchronization locks - Lock & RLock , semaphores, events, condition, timer, pipes, queue, shared memory. This talk will also cover best practices and problems in multiprocessing and threaded application development. \r\n"], "have_tickets": [true], "title": "Python Multithreading and Multiprocessing: Concurrency and Parallelism", "speakers": "Hitul Mistry", "track_title": "Barria2 Room", "timerange": "2015-07-20 16:45:00, 2015-07-20 17:15:00", "duration": 30, "tags": ["concurrency", "multi-processing", "Parallelism", "multi-threading", "linux", "Best Practice"]}, "127": {"id": 127, "abstracts": ["Traditional Python profiling tools have limitations.  Standard tools like **cProfile** and most all third party tools (like **Python Tools** plugin for Microsoft Visual Studio) suffer from common flaws.  First, the profiling overhead is high (up to 50%).  Second, the  information provided is \u201cfunction-level\u201d i.e. the  tool shows how much time was spent within a function, but not actionable \u201cline-level\u201d information to show which exact lines are _the bottleneck_ in a function.  Adding \u201cline-level\u201d information to most tools causes the application to run even slower. Third, some tools require modification of the application source code to enable profiling thus disrupting development.\r\n\r\nThis talk presents an experimental Python profiler.  It typically has less than 15% overhead, shows line-level information and does not require modification of application source code.  Experiments using it resulted in performance gains of 2x and more.  Of course results vary by application, but in a typical application there may be quick optimizations easily identified by this type of profiler.\r\n\r\nThe talk will briefly describe the basics of what, why and how to profile.  The profiler\u2018s use and results will be shown in the presentation with examples based on real-life applications.  Previous experience of working with profilers and trying to optimize an application is a plus, but not required, to gain a better appreciation of the work presented.", "", ""], "have_tickets": [true], "title": "Tuning Python applications can dramatically increase performance", "speakers": "Vasilij Litvinov", "track_title": "PythonAnywhere Room", "timerange": "2015-07-24 14:30:00, 2015-07-24 15:15:00", "duration": 45, "tags": ["python", "visualization", "performance", "profiling", "metrics", "cpython", "Tooling", "Development"]}, "134": {"id": 134, "abstracts": ["Removing UneXploded Ordnance (UXO) from minefields at the end of a conflict is a very time-consuming and expensive operation. Advanced satellite image processing can detect changes and activities on the ground and represent them on a map that can be used by operators to classify more dangerous zones and safer areas, potentially reducing the time spent on field surveys.\r\n\r\nWe exploit space-borne radar Earth images together with thematic data for mapping activities on the ground using numpy, scipy and gdal. The Activity Map generation process to be shown will be implemented using IPython Notebook.", "", ""], "have_tickets": [true], "title": "Activity Map from space: supporting mine clearance with Python", "speakers": "Giuseppe Cammarota", "track_title": "A2 Room", "timerange": "2015-07-22 16:45:00, 2015-07-22 17:15:00", "duration": 30, "tags": ["visualization", "scipy", "ipython", "geodata", "numpy"]}, "11": {"id": 11, "abstracts": ["Python is an expressive general purpose programming language. Its syntax provides many ways to represent structure and minimise code repetition and boilerplate.\r\n\r\nBut Python not always expressible enough. Perhaps when you've built a complicated enough system with hard-to-express inter-relationships, the code required to construct or operate on it can become complicated, repetitive and unreadable. Or perhaps you have users unfamiliar with Python who need to understand or edit a system. In cases like these, stepping beyond the syntax and semantics of basic Python can be an advantage.\r\n\r\nDaniel will describe various ways you can  implement your own Domain Specific Languages, languages perhaps completely unlike Python that can succinctly describe more complicated Python systems.\r\n\r\nThis talk will cover:\r\n\r\n* What and why of DSLs\r\n* Metaprogramming tricks\r\n* Writing simple parsers\r\n* The libraries PLY and PyParsing\r\n* Building tooling around your new DSLs"], "have_tickets": [true], "title": "The unabridged guide to Domain Specific Languages in Python", "speakers": "Daniel Pope", "track_title": "PythonAnywhere Room", "timerange": "2015-07-24 15:15:00, 2015-07-24 16:15:00", "duration": 60, "tags": ["python", "technologies", "Tooling"]}, "34": {"id": 34, "abstracts": ["Does your open source project need better documentation? Do you wish that new users could get started with your software more easily? Do you feel that your code contribution workflow isn't documented well enough, or that contributors are discouraged from documenting their code? How can you give your project docs the love they deserve?\r\n\r\nThis high-level talk aims to introduce the main principles of technical communication in the context of FOSS projects. It is intended for anyone who interacts with docs, whether your project is fresh off the dev environment or has been around since the dawn of Git. Topics include tone, style, process management, structure, and contribution workflow.", "", ""], "have_tickets": [true], "title": "FOSS DOCS 101 (keep it simple, present!)", "speakers": "Mikey Ariel", "track_title": "Google Room", "timerange": "2015-07-24 14:30:00, 2015-07-24 15:15:00", "duration": 45, "tags": ["FOSS", "documentation", "community", "open-source", "Sphinx", "communication", "Best Practice", "sphinxdocumentation"]}, "300": {"id": 300, "abstracts": ["NumPy and Pandas have revolutionized data processing and munging in the Python ecosystem. As data and systems grow more complex, moving and querying becomes more difficult. Python already has excellent tools for in-memory datasets, but we inevitably want to scale this processing and take advantage of additional hardware. This is where Blaze comes in handy by providing a uniform interface to a variety of technologies and abstractions for migrating and analyzing data. Supported backends include databases like Postgres or MongoDB, disk storage systems like PyTables, BColz, and HDF5, or distributed systems like Hadoop and Spark. \r\n\r\nThis talk will introduce the Blaze ecosystem, which includes: Blaze (data querying), Odo (data migration), Dask (task scheduler), DyND (dynamic, multidimensional arrays) and Datashape (data description).\r\n\r\nAttendees will get the most out of this talk if they are familiar with NumPy and Pandas, have intermediate Python programming skills, and/or experience with large datasets.", "NumPy and Pandas have revolutionized data processing and munging in the Python ecosystem. As data and systems grow more complex, moving and querying becomes more difficult. Python already has excellent tools for in-memory datasets, but we inevitably want to scale this processing and take advantage of additional hardware. This is where Blaze comes in handy by providing a uniform interface to a variety of technologies and abstractions for migrating and analyzing data. Supported backends include databases like Postgres or MongoDB, disk storage systems like PyTables, BColz, and HDF5, or distributed systems like Hadoop and Spark. \r\n\r\nThis talk will introduce the Blaze ecosystem, which includes:\r\n\r\n- Blaze (data querying): [http://blaze.pydata.org/en/latest/][1]\r\n\r\n- Odo (data migration): [http://odo.readthedocs.org/en/latest/][2]\r\n\r\n- Dask (task scheduler): [http://dask.pydata.org/en/latest/][3]\r\n\r\n- DyND (dynamic, multidimensional arrays): [https://github.com/libdynd/dynd-python][4]\r\n\r\n- Datashape (data description): [http://datashape.pydata.org/][5]\r\n\r\nAttendees will get the most out of this talk if they are familiar with NumPy and Pandas, have intermediate Python programming skills, and/or experience with large datasets.\r\n\r\n  [1]: http://blaze.pydata.org/en/latest/\r\n  [2]: http://odo.readthedocs.org/en/latest/\r\n  [3]: http://dask.pydata.org/en/latest/\r\n  [4]: https://github.com/libdynd/dynd-python\r\n  [5]: http://datashape.pydata.org/\r\n", ""], "have_tickets": [true], "title": "Scale your data, not your process: Welcome to the Blaze ecosystem", "speakers": "Christine Doig", "track_title": "PythonAnywhere Room", "timerange": "2015-07-21 12:30:00, 2015-07-21 13:15:00", "duration": 45, "tags": ["Abstractions", "distributed-systems", "analytics", "bigdata", "dynd", "blaze", "odo", "spark", "dask", "open-source", "pydata", "datashape", "databases", "data", "numpy"]}, "278": {"id": 278, "abstracts": ["Do you know what your application did last night? Python logging can help you.\r\n\r\nThis talk you will show you how to implement a systematic logging approach without boilerplate code and how to set up the Python logging module for different needs in production systems.  We will see how to  work with log files and other logging endpoints.  We will address the data protection concerns that come up when logging  from application with personal  information. We will also look at the performance implications of logging. We will then cover best practices - how to structure logging, what to include in a log message, and how to configure logging for different use cases.\r\n\r\nWe will use the Python standard logging module to implement logging.  This talk is useful to beginners with some experience.  An understanding of decorators is useful, but not required.  Some experience in web programming is a plus."], "have_tickets": [true], "title": "A Deep Look at Logging", "speakers": "Stefan Baerisch", "track_title": "A2 Room", "timerange": "2015-07-21 15:15:00, 2015-07-21 15:45:00", "duration": 30, "tags": ["web", "BestPractices", "logging"]}, "198": {"id": 198, "abstracts": ["The asyncio project was officially launched with the release of Python 3.4 in March 2014. The project was public before that under the name \"tulip\". asyncio is just a core network library, it requires third party library to be usable for common protocols. One year later, asyncio has a strong community writing libraries on top of it.\r\n\r\nThe most advanced library is aiohttp which includes a complete HTTP client but also a HTTP server. There are also libraries to access asynchronously the file system, resolve names with DNS, have variables local to tasks, read-write locks, etc. There are clients for AMQP, Asterisk, ElasticSearch, IRC, XMPP (Jabber), etc. (and even an IRC server!). There are asynchronous drivers for all common databases, and even for some ORMs. As expected, there are tons of new web frameworks based on asyncio. It's also possible to plug asyncio into Gtk, Qt, gevent, eventlet, gunicorn, tornado, etc.\r\n\r\nI will also discuss use cases of asyncio in production and benchmarks. Spoiler: asyncio is not slow.\r\n\r\nThe asyncio library also evolved to become more usable: it has a better documentation, is easier to debug and has a few new functions. There is also a port to Python 2: trollius.", "", ""], "have_tickets": [true], "title": "asyncio community, one year later", "speakers": "Victor Stinner", "track_title": "A2 Room", "timerange": "2015-07-22 15:45:00, 2015-07-22 16:15:00", "duration": 30, "tags": ["python3", "asyncio", "aiohttp", "networking"]}, "305": {"id": 305, "abstracts": ["The past few years, we have made large strides to welcome more diverse people into our community.  You see better gender ratios in attendance numbers at Python conferences, the billed speakers, the amount of women-centric programs.  We can see the benefits of outreach.  But we're not done yet.\r\n\r\nWhile a lot of the Python community embraces the importance of being diverse, we haven't taken that mindset to our workplace.  From recruiting, we still hear, \"sure, we wanted to recruit women, but we couldn't find them\" and \"we only focus on quality here, not gender!\"  Within company cultures, we hear \"gender equality isn't a problem here!\" or \"women don't ask for a higher salary\" and to \"just lean in!\"\r\n\r\nThis talk will recount the diversity efforts of the past few years and quantify the effects on the Python community.  But this talk will also address the not-so-low-hanging fruit; the  deeper-rooted problems that still plague the community from inside where we work.  And it will talk the audience through actionable items to improve one's work place that welcomes more diversity."], "have_tickets": [true], "title": "Diversity: We are not done yet", "speakers": "Lynn Root", "track_title": "Barria2 Room (Education Summit)", "timerange": "2015-07-23 14:30:00, 2015-07-23 15:15:00", "duration": 45, "tags": ["social", "diversity", "equality", "community"]}, "77": {"id": 77, "abstracts": ["A d\u00eda de hoy usamos un enorme conjunto de bibliotecas y frameworks, adem\u00e1s los usamos con cierta libertad dentro de nuestro c\u00f3digo, y pasado el tiempo nos damos cuenta de que esa biblioteca, no cubre mis necesidades, o tiene alg\u00fan fallo, o no escala bien en proyectos m\u00e1s grandes... en resumen, hemos ca\u00eddo en una trampa. No se puede evitar caer en estas trampas, porque depende de nuestras necesidades y las bibliotecas que utilizamos, por lo tanto, solo podemos estar lo mejor preparados posibles para salir de ellas tan pronto como nos demos cuenta.\r\n\r\nComo soluci\u00f3n a esto, plantear\u00e9 varias v\u00edas (nada innovadoras, pero menos usadas de lo que deber\u00edan). Unit testing (TDD idealmente), arquitectura hexagonal, y algunas reglas b\u00e1sicas de clean code.", "", ""], "have_tickets": [true], "title": "Todo es una trampa", "speakers": "Jes\u00fas Espino", "track_title": "Barria2 Room (Local track)", "timerange": "2015-07-22 11:45:00, 2015-07-22 12:30:00", "duration": 45, "tags": ["python", "architecture", "tdd", "cleancode", "unit-testing"]}, "236": {"id": 236, "abstracts": ["Using an SQL database offers a bunch of advantages; first of all its maturity and that it is understood by almost every software developer. But it has at least one main disadvantage. As the data is structured, if you want to modify the structure, for example on a long-running project, you need a migration and therefore almost for sure, a downtime.\r\n\r\nWhen you have to make a migration, to modify the structure of data for a small amount of records, it is so fast that it never gets problematic. But if you think to modify the structure of tables containing millions or billions of records, the time required to simply apply the structural change is problematic.\r\n\r\nHere are some changes we are working on at orderbird to go towards zero downtime migrations using some of the latest improvements of PostgreSQL 9.4, mainly logical replication and mixing in a little magic of some python scripting with psycopg."], "have_tickets": [false], "title": "Bringing PostgreSQL towards zero downtime migration with Python", "speakers": "Matthieu Rigal", "track_title": "A2 Room", "timerange": "2015-07-24 15:45:00, 2015-07-24 16:15:00", "duration": 30, "tags": ["Database", "postgresql", "psycopg"]}, "84": {"id": 84, "abstracts": ["The Baserock project is about creating system images from source code in a clean, reproducible way. All of the tooling is written in Python.\r\n\r\nIn this talk I'll explain a bit about the core idea of Baserock: declarative system definitions (expressed in YAML) that can be built and deployed in various ways.\r\n\r\nThen I'll go into more detail about the tools available, and some of the cool things that they can do: distributed building, atomic system updates, creating custom container images, and more.\r\n\r\nFind out more about the Baserock project at http://www.baserock.org/", "", ""], "have_tickets": [true], "title": "Introduction to Baserock", "speakers": "Sam Thursfield", "track_title": "Barria2 Room", "timerange": "2015-07-21 14:30:00, 2015-07-21 15:15:00", "duration": 45, "tags": ["python", "DevOps", "system-administration", "unix", "open-source", "docker", "linux"]}, "225": {"id": 225, "abstracts": ["While Python supports procedural, object-oriented, and functional programming, its functional features are not fully developed. Mochi is a Python-like functional language that compiles to Python 3 and PyPy 3 bytecode. It can use Python libraries and can be used from Python.\r\n\r\nMochi adds functional features such as tail recursion optimization, no re-assignments in function definitions, persistent data structures, pattern matching, algebraic data types, a pipeline operator, better anonymous functions, Erlang-style actors, Lisp-style macros as well as many useful builtin functions.\r\n\r\nThis talk presents what Mochi is, how it works, and what you can do with it. Functional programming can help to solve certain kind of problems elegantly. Done right, functional programs can be easily tested and provide more confidence that you program is really doing what you want. Mochi could be another tool in your toolbox. Functional programming can expand your horizon and can be a lot of fun. Mochi offers easy access to this new world because you can leverage your existing Python knowledge and libraries whenever needed. "], "have_tickets": [true], "title": "Functional Python with Mochi", "speakers": "Mike M\u00fcller", "track_title": "PythonAnywhere Room", "timerange": "2015-07-21 16:45:00, 2015-07-21 17:15:00", "duration": 30, "tags": ["Programming", "functional"]}, "96": {"id": 96, "abstracts": ["Given the dynamic nature of Python, some bugs tend to creep in our codebases. Innocents NameErrors or hard-to-find bugs with variables used in a closure, but defined in a loop, they all stand no chance in front of Pylint (http://pylint.org/).\r\nIn this talk, I'll present one of the oldest static analysis tools for Python, with emphasis on what it can do to understand your Python code.  Pylint is both a style checker, enforcing PEP 8 rules, as well as a code checker in the vein of pyflakes and the likes, but its true power isn't always obvious to the eye of beholder.  It can detect simple bugs such as unused variables and imports, but it can also detect more complicated cases such as invalid arguments passed to functions, it understands the method resolution order of your classes and what special methods aren't implemented correctly. Starting from abstract syntax trees, we'll go through its inference engine and we'll see how Pylint understands the logical flow of your program and what sort of type hinting techniques are used to improve its inference, including PEP 484 type hints. As a bonus, I'll show how it can be used to help you port your long-forgotten library to Python 3, using its new --py3k mode."], "have_tickets": [true], "title": "12 years of Pylint (or How I learned to stop worrying about bugs)", "speakers": "Claudiu Popa", "track_title": "Google Room", "timerange": "2015-07-22 14:30:00, 2015-07-22 15:15:00", "duration": 45, "tags": ["ast", "static-analysis", "lint", "typehinting"]}, "52": {"id": 52, "abstracts": ["Python has a great versatile ecosystem but the competition is getting better, this talk is about how Python can keep up with these new languages and where PyPy fits into this.\r\n\r\nRecently we've seen the rise of new technologies like Go, Node.js and Julia, those have the ability to build an ecosystem on a clean slate and thus be better than Python in some aspects. What would it take to be as good as those technologies on those aspects without loosing all the things we love about Python ? This talk will describe my perfect future where Python keeps getting better, gets to keep it's great set of libraries and where PyPy fits in that future.", "", ""], "have_tickets": [true], "title": "PyPy and the future of the Python ecosystem", "speakers": "Romain Guillebert", "track_title": "A2 Room", "timerange": "2015-07-24 15:15:00, 2015-07-24 15:45:00", "duration": 30, "tags": ["PyPy"]}, "345": {"id": 345, "abstracts": ["Case study of an In-Flight Entertainment system, built using Python.\r\n\r\nThis talk will show the basic requirements for the system and the architecture decisions we took.\r\n\r\nBesides, running software at 10.000 feet implies new unexpected challenges, different from the ones we encounter day-to-day. We'll focus on how we solved them."], "have_tickets": [true], "title": "Python in the Sky: In-Flight Entertainment with Python", "speakers": "David Arcos", "track_title": "A2 Room", "timerange": "2015-07-20 11:00:00, 2015-07-20 11:45:00", "duration": 45, "tags": ["redis", "python", "distributed-systems", "postgresql", "aviation", "django", "api", "fabric", "celery"]}, "161": {"id": 161, "abstracts": ["pip is certainly one of the most used package in the Python ecosystem, but what actualy happens when you pip install foo ?\r\n\r\n - - how does it perform an installation and resolve dependencies ?\r\n - - how does pip find installation candidates and select the 'best' ?\r\n - - Some sneak peek on the (possible) plans for the future of pip (wheel caching, setup_requires control, etc)\r\n\r\n"], "have_tickets": [true], "title": "PIP Internals", "speakers": "Xavier Fernandez", "track_title": "Barria1 Room", "timerange": "2015-07-20 12:30:00, 2015-07-20 13:00:00", "duration": 30, "tags": ["packaging", "internals"]}, "221": {"id": 221, "abstracts": ["This talk will be a general introduction to Numba. Numba is an open source just\u00ad-in-\u00adtime Python compiler that allows you to speed up numerical algorithms for which fast linear algebra (i.e. Numpy array operations) is not enough. It has backends for the CPU and for NVidia GPUs. After the talk, the audience should be able to understand for which use cases Numba is adequate, what level of performance to expect, and have a general notion of its inner working.\r\n\r\nA bit of familiarity with scientific computing and/or Numpy is recommended for optimal understanding, but the talk should otherwise be accessible to the average Python programmer. It should also be of interest to people who are curious about attempts at high-\u00adperformance Python.", "", ""], "have_tickets": [true], "title": "Numba, a JIT compiler for fast numerical code", "speakers": "Antoine Pitrou", "track_title": "Google Room", "timerange": "2015-07-20 14:30:00, 2015-07-20 15:15:00", "duration": 45, "tags": ["python", "data-science", "analytics", "performance", "JIT", "numpy"]}, "5": {"id": 5, "abstracts": ["Traditional methods of coping with concurrent programming problems are well-known and described in literature. Many programming languages, including Python, contain in their standard libraries tools and primitives such as semaphores and can spawn threads or subprocesses.\r\n\r\nHowever, in the face of increasing interest in service oriented architecture and building distributed systems, that span across many independent server nodes, emerges a need to adapt traditional solutions, so they can be applied in the new environment.\r\n\r\nIn this talk I will share my experiences gathered during building a modern contact center - highly concurrent system, which requires certain resources to be accessed exclusively by several self-contained components.\r\n"], "have_tickets": [true], "title": "Distributed locks with Python and Redis", "speakers": "Sebastian Buczy\u0144ski", "track_title": "Google Room", "timerange": "2015-07-22 15:15:00, 2015-07-22 15:45:00", "duration": 30, "tags": ["redis", "twisted", "concurrency"]}, "86": {"id": 86, "abstracts": ["Braintree is a Ruby shop. By default, we use Ruby and Rails for projects. We also use Ruby-based projects for much of our tooling, including puppet, capistrano, and rake. However, we strongly believe in using the right tool for the job. What that means has evolved over ti\r\nme, and I'll discuss what solutions we chose in the past as well as our current choices.\r\n\r\nSo what's it like doing Python at a Ruby shop? You get lots of jokes about language features Ruby has but Python lacks and lots of disbelief that Python will survive the 2/3 split. People also tend to apply the best practices and conventions of Ruby to Python code as if t\r\nhey were the same. Python's major inroad at Braintree has been, surprisingly enough, as a platform for high-concurrency situations. This is a direct result of the power of Tornado as a platform for asynchronous I/O. It also helps that many Python is very approachable and \r\nmany developers have at least some experience with it.\r\n\r\nBraintree has three pieces of our infrastructure using Python and Tornado -- an incoming request proxy; an outgoing request proxy; and a webook delivery service. They've served us well for 3+ years but all suffer from a number of problems. The outdated concurrency feature\r\ns of CPython / Python 2 as well as our lack of experience with and commitment to Tornado have always been an issue. As the meat of the talk, I'll speak in depth about the other issues we've encountered with each of the three applications and our short- and long- term solu\r\ntions to the problems.\r\n\r\nThe state as of the end of 2014 appeared dire for Python at Braintree. All the old Python code in our stack is on the way out, and Python has been specifically recommended agaist for new projects. Our Python client library is used by some of our largest merchants, and is \r\nready for the future by supporting Python 2.6+ and Python 3.3+ in a single codebase. We also have a vibrant Python community at Venmo, our sister company. Both Braintree and Venmo support Python by attending, hosting, sponsoring, and speaking at meetups, conferences, and \r\nother events in Chicago, New York, and elsewhere. At Braintree, our Data Science team uses Python almost exclusively and they're becoming a bigger part of our business every day. We also use Collings and custom tooling written in Python to manage our infrastructure.\r\n"], "have_tickets": [true], "title": "Python Not Recommended", "speakers": "Adam Forsyth", "track_title": "Barria1 Room", "timerange": "2015-07-21 15:15:00, 2015-07-21 15:45:00", "duration": 30, "tags": ["data-science", "pandas", "tornado", "collins", "case study", "pika", "sklearn"]}, "212": {"id": 212, "abstracts": ["PEP 484 introduces type hints for Python 3. Type hints can increase readability of our code for both humans and tools and lead to better and safer outcomes. And we'll prove it in this talk!\r\n\r\nWe're going to take a closer look at type hints, see practical examples of where they can be used and the value they provide.  We'll see that simple class types and built-in collection types are often enough for our public API's. We'll also discuss how you can benefit from type hinting stubs for third-party libraries and briefly cover more advanced scenarios like generic types."], "have_tickets": [false], "title": "How you can benefit from type hints", "speakers": "Andrey Vlasovskikh", "track_title": "A2 Room", "timerange": "2015-07-24 11:45:00, 2015-07-24 12:30:00", "duration": 45, "tags": ["type-hinting", "python", "static-analysis"]}, "150": {"id": 150, "abstracts": ["Orain dela urte batzuk asi genuen bidea azalduko dut, Python San Sebastian elkartea nola sotu genuen eta hortik pixkanaka pixkanaka nola sortzen joan den EuroPython sortzeko grina. \r\n\r\nGendeari nahi izan eskero eta lan egin eskero EuroPython bezelako kongresu bat antolatzea posible dela erakustea du helburu hitzaldi honek."], "have_tickets": [true], "title": "Karakate magaletik EuroPythoneko tontorrera", "speakers": "oier etxaniz", "track_title": "Barria2 Room (Local track)", "timerange": "2015-07-22 15:45:00, 2015-07-22 16:15:00", "duration": 30, "tags": ["python", "MAL", "Euskara", "EuroPython", "Inspirational", "PySS"]}, "162": {"id": 162, "abstracts": ["Coding dojos are a very good way to share coding knowledge among members in a community, and, at the same time, introduce people into the language and community.\r\nSometimes, though, the typical approach to set coding dojos may prevent expert coders to join the session. This is the story of the pyBCN's dojos, so far.\r\n", "", ""], "have_tickets": [true, true], "title": "What dojos are and how we run these at pyBCN", "speakers": "N\u00faria Pujol, Ignasi  Fosch", "track_title": "Barria1 Room", "timerange": "2015-07-20 15:45:00, 2015-07-20 16:15:00", "duration": 30, "tags": ["Beginners", "python", "tdd", "Functional Programming", "unit-testing", "learning", "fun"]}, "180": {"id": 180, "abstracts": ["Python is a language of choice for developers with wide range of experience, for some it is a first programming language, others switch to Python after years of experience. Python provides friendly syntax and smooth learning curve. This sometimes leads to developers lacking comprehension of some more advanced constructs. \r\n\r\nIt happens that experienced developers jump into using Python and sometimes miss less known Python language constructs. On the other hands people who purposefully learned Python sometimes lack practical ideas for how to apply those constructs.\r\n\r\nThis talk will be specifically focused on the practical usages of advanced Python constructs like iterators, generators, decorators and context managers. Goal of the talk is to share ideas about how those constructs can be used for practical purposes in real projects. Prior knowledge is not required, there will be a brief introduction to every construct being presented."], "have_tickets": [true], "title": "Practical usage of advanced Python constructs", "speakers": "Andrey Syschikov", "track_title": "Barria1 Room", "timerange": "2015-07-24 11:45:00, 2015-07-24 12:30:00", "duration": 45, "tags": ["python", "core"]}, "309": {"id": 309, "abstracts": ["Python and PostgreSQL, two tools we like to use for our projects but do you know everything about them?\r\n\r\nThe talk will give an overview of psycopg2, Peewee, SQLAlchemy, Alembic and multicorn, PL/Python, these libraries can be used with PostgreSQL.\r\n\r\n- psycopg2, the well known connector, this basic component is really useful, well documented and battle-tested and used by the most famous toolkits of the Python ecosystem.\r\n- Peewee, a minimalist ORM for Python, clear and brief, this ORM can be used if you want create a software with a minimalist ORM.\r\n- SQLAlchemy, a Python SQL toolkit and Object Relational Mapper, you can use this library to create your models and interact with them.\r\n- Alembic, a lightweight database migration tool for usage with SQLAlchemy, allows to create some migration scripts for your project.\r\n- multicorn is a Python wrapper over the Foreign Data Wrapper of PostgreSQL\r\n- PL/Python, a procedural language for PostgreSQL, allows to write functions in the Python language.\r\n\r\nYou can find this talk on  https://speakerdeck.com/matrixise/python-and-postgresql-a-wonderful-wedding-english"], "have_tickets": [true], "title": "Python and PostgreSQL, a wonderful wedding", "speakers": "Stephane Wirtel", "track_title": "A2 Room", "timerange": "2015-07-21 15:45:00, 2015-07-21 16:15:00", "duration": 30, "tags": ["python", "SQLAlchemy", "postgresql", "multicorn", "peewee", "dbapi"]}, "95": {"id": 95, "abstracts": ["What if you could focus on functionality rather than the glue code between services?\r\n \r\nLymph is an opinionated framework for writing services in Python.  It features pluggable service discovery, request-reply messaging and pluggable pub-sub messaging. \r\n \r\nAs our development teams are growing, we're moving away from our monolithic architecture. We want to write services and not worry about the infrastructure's needs. We want development to be fast, quick and simply work.\r\n \r\nIn this talk we will show you how easy it is to write and run services with lymph.\r\nGo check http://lymph.io - we are accepting pull requests."], "have_tickets": [true], "title": "Stop trying to glue your services together; import lymph", "speakers": "Max Brauer", "track_title": "Google Room", "timerange": "2015-07-21 14:30:00, 2015-07-21 15:15:00", "duration": 45, "tags": ["werkzeug", "services", "zeromq", "events", "gevent", "web", "rpc", "open-source", "zookeeper", "rabbitmq", "framework"]}, "78": {"id": 78, "abstracts": ["MkDocs is a Python library for creating documentation with\r\nMarkdown. The primary goal of the project is to lower the barrier\r\nfor documentation writers and to help enable high quality prose\r\nbased documentation.\r\n\r\nThe primary maintainer of MkDocs will cover the following topics:\r\n\r\n- An introduction to MkDocs and the project goals.\r\n    - How and why did the project start?\r\n    - Who uses MkDocs today?\r\n\r\n- Discuss what we need to do to create great documentation and\r\n  how MkDocs can help.\r\n\r\n- A tour of the key features currently in MkDocs\r\n    - Adding MkDocs to your project.\r\n    - Using themes in the documentation and making customisations\r\n    - Publishing your documentation with ReadTheDocs and GitHub\r\n      pages.\r\n\r\n- A look at the up and coming features in MkDocs and how you can\r\n  help make these happen.\r\n\r\n- A comparison with Sphinx and why you should consider MkDocs."], "have_tickets": [true], "title": "MkDocs: Documenting projects with Markdown", "speakers": "Dougal Matthews", "track_title": "Barria1 Room", "timerange": "2015-07-23 15:15:00, 2015-07-23 15:45:00", "duration": 30, "tags": ["markdown", "open-source", "documentation", "mkdocs"]}, "53": {"id": 53, "abstracts": ["Locality sensitive hashing (LSH) is a technique for reducing complex data down to a simple hash code. If two hash codes are similar than the original data is similar. Typically, they are used for speeding up search and other similarity comparisons. \r\n\r\nIn this presentation I will discuss two ways of implementing LSH in python; the first method is completely stateless but only works on certain forms of data; the second is stateful but does not make any assumptions about the distribution of the underlying data. I will conclude the presentation by describing how we apply LSH to search at Lyst.\r\n", "", ""], "have_tickets": [true], "title": "Speeding up search with locality sensitive hashing", "speakers": "Maciej Kula", "track_title": "Barria2 Room", "timerange": "2015-07-24 15:45:00, 2015-07-24 16:15:00", "duration": 30, "tags": ["data-science", "machine-learning", "bigdata", "search", "numpy", "sklearn"]}, "362": {"id": 362, "abstracts": ["PEP 484, \"Type Hints\", was accepted in time for inclusion in Python 3.5 beta 1. This introduces an optional standard for specifying types in function signatures. This concept was previously discussed as \"optional static typing\" and I similar to the way TypeScript adds optional type declarations to JavaScript.\r\n\r\nIn this talk I will discuss the motivation for this work and show the key elements of the DSL for describing types (which, by the way is backward compatible with Python 3.2, 3.3 and 3.4). Note: *Python will remain a dynamically\r\ntyped language, and I have no desire to ever make type hints\r\nmandatory, even by convention!*", "", ""], "have_tickets": [true], "title": "Type Hints for Python 3.5", "speakers": "Guido van Rossum", "track_title": "Google Room", "timerange": "2015-07-22 11:45:00, 2015-07-22 12:30:00", "duration": 45, "tags": ["python"]}, "155": {"id": 155, "abstracts": ["RinohType is a document processor inspired by [LaTeX][1] and written in Python. It renders [reStructuredText][2] and [Sphinx][3] documents to PDF based on a document template and a style sheet. RinohType already implements many of the features that make LaTeX so great. Not stopping there, RinohType also tries to fix LaTeX's weaknesses; it should not only be easy to use, but easy to _customize_ and _extend_ as well. To minimize frustration when things go wrong, care is taken to provide descriptive warning and error messages. The powerful layout engine makes it easy to define custom page layouts. And the CSS-inspired stylesheets simplify the styling of document elements. At a lower level, Python makes the writing of extensions much more accessible when compared to TeX's rather arcane macro language.\r\n\r\nIn the talk, I would like to introduce RinohType to the Python community. No special prerequisite knowledge is required. \r\nReference: https://pypi.python.org/pypi/RinohType", "RinohType is a document processor inspired by [LaTeX][1] and written in Python. It renders [reStructuredText][2] and [Sphinx][3] documents to PDF based on a document template and a style sheet. RinohType already implements many of the features that make LaTeX so great. Not stopping there, RinohType also tries to fix LaTeX's weaknesses; it should not only be easy to use, but easy to _customize_ and _extend_ as well. To minimize frustration when things go wrong, care is taken to provide descriptive warning and error messages. The powerful layout engine makes it easy to define custom page layouts. And the CSS-inspired stylesheets simplify the styling of document elements. At a lower level, Python makes the writing of extensions much more accessible when compared to TeX's rather arcane macro language.\r\n\r\nIn the talk, I would like to introduce RinohType to the Python community. No special prerequisite knowledge is required. I will start off by discussing my motivation for starting RinohType development, its design goals and the currently available features. This will be followed by an example of how you can use RinohType to render a reStructuredText document to a neat PDF document, highlighting some of the features along the way. Next, we'll explore some of RinohType's internals such as the page layout engine and the style sheet system. We will explore how these can be used in a Python application to create a document from scratch.\r\n\r\nA first RinohType release was recently created. While this preview release is of alpha quality, it should be able to render most reStructuredText documents. It also includes a preliminary Sphinx builder. Please find more details in the package's description at [PyPI][4].\r\n\r\n  [1]: http://en.wikipedia.org/wiki/LaTeX\r\n  [2]: http://docutils.sourceforge.net/rst.html\r\n  [3]: http://sphinx-doc.org\r\n  [4]: https://pypi.python.org/pypi/RinohType", ""], "have_tickets": [true], "title": "RinohType, a document processor inspired by LaTeX", "speakers": "Brecht Machiels", "track_title": "Google Room", "timerange": "2015-07-24 11:00:00, 2015-07-24 11:45:00", "duration": 45, "tags": ["LaTeX", "reStructuredText", "PDF", "typesetting"]}, "227": {"id": 227, "abstracts": ["What if I told you that we\u2019ve built an open source \u201cWhatsApp\u201d-like RESTful API on the top of Pyramid? We've developed MAX: a real-time messaging service and activity stream that has become the key feature for a social intranet at the BarcelonaTech University\r\n\r\nWe will show how we designed and built MAX with performance in mind using state of the art Python technologies like Gevent, WSGI, and multi-threaded queue processing. We will also show you how we've managed to design a simple architecture guaranteeing both high scalability and performance, achieving connecting ratios over 30.000 students, teachers, and university staff.\r\n\r\nThe API is secured using oAuth 2.0 resource owner password credentials flow powered by our own oAuth server implementation (Osiris) also Pyramid-based. We are using MongoDB as general storage backend and RabbitMQ over websockets to support realtime and messaging."], "have_tickets": [true], "title": "MAX: Realtime messaging and activity stream engine", "speakers": "Carles Bruguera", "track_title": "PythonAnywhere Room", "timerange": "2015-07-22 11:45:00, 2015-07-22 12:30:00", "duration": 45, "tags": ["python", "restfull", "gevent", "REST", "open source", "mongodb", "wsgi", "web", "websockets", "api", "rabbitmq"]}, "135": {"id": 135, "abstracts": ["This talk is a sequel to \"Brainwaves for Hackers\" and illustrates some experiments you can do with a Neurosky Mindwave headset, a bluetooth enabled EEG device.\r\n \r\nI'll also talk some more about how to integrate the device with the IPython\r\nNotebook for real time viewing and how to use the Mindwave with the Raspberry Pi."], "have_tickets": [true], "title": "Brainwaves for Hackers 2.0", "speakers": "Andreas Klostermann", "track_title": "PythonAnywhere Room", "timerange": "2015-07-20 16:45:00, 2015-07-20 17:15:00", "duration": 30, "tags": ["visualization", "biology", "Health-Science", "machine-learning"]}, "124": {"id": 124, "abstracts": ["When applications get deployed in enterprise environment or in large organizations, they need to support user accounts and groups that are managed externally, in existing directory services like FreeIPA or Active Directory, or federated via protocols like SAML. While it is possible to  add support for these individual setups and protocols directly to application code or to Web frameworks or libraries, often it is better to delegate the authentication and identity operations to a frontend server and just assume that the application has to be able to consume results of the external authentication and identity lookups.\r\n\r\nIn this talk, we will look at Django Web framework and how with few small changes to the framework and to the application we can extend the functionality of existing RemoteUserMiddleware and RemoteUserBackend to consume users coming from enterprise identity management systems. We will focus on using proven OS-level components such as SSSD for Web applications, but will also show setup using federation.", "", ""], "have_tickets": [false], "title": "External authentication for Django projects", "speakers": "Jan Pazdziora", "track_title": "Barria2 Room", "timerange": "2015-07-24 14:30:00, 2015-07-24 15:15:00", "duration": 45, "tags": ["django", "FreeIPA", "HTTP", "web", "Apache", "authentication", "sssd"]}, "229": {"id": 229, "abstracts": ["The quality of written code is an important factor in a final success of a software project.\r\nPerhaps there is no universal definition of high quality code, however usually it's characterized as clear and readable, well-designed, well tested and documented, easier to debug, maintain and extend, etc.\r\n\r\nPython was designed to be a highly readable language that would make it easier to develop high quality code. Nevertheless, programming language is only a tool in a software development process and in the end the quality of code depends mostly on its author's concept and decisions he make. \r\n\r\nIn this talk I would like to present some of ideas, techniques and tools for improving the quality of written code, tried out with a good result in everyday work on developing software in Python."], "have_tickets": [true], "title": "Writing quality code", "speakers": "Rados\u0142aw Jankiewicz", "track_title": "Google Room", "timerange": "2015-07-20 16:45:00, 2015-07-20 17:15:00", "duration": 30, "tags": ["python", "BestPractices", "Programming", "Coding"]}, "353": {"id": 353, "abstracts": ["Testing with purely random data on it's own doesn't get you very far. But\r\ntwo approaches that have been around for a while have new libraries that\r\nhelp you generate random input, that homes in on failing testcases.\r\n\r\nFirst **[Hypothesis][1]**, a Python implementation and update of the Haskell library\r\nQuickCheck. Known as property based testing, you specify a property of your\r\ncode that must hold, and Hypothesis does its best to find a counterexample.\r\nIt then shrinks this to find the minimal input that contradicts your\r\nproperty.\r\n\r\nSecond, **[American fuzzy lop][2]** (AFL), is a young fuzzing library that's already\r\nachieved an impressive trophy case of bug discoveries. Using\r\ninstrumentation and genetic algorithms, it generates test input that\r\ncarefully searches out as many code paths as it can find, seeking greater\r\nfunctional coverage and ultimately locating crashes and hangs that no other\r\nmethod has found. I'll be showing how with **[Python-AFL][3]** we can apply this\r\ntool to our Python code.\r\n\r\n  [1]: https://hypothesis.readthedocs.org/en/latest/\r\n  [2]: http://lcamtuf.coredump.cx/afl/\r\n  [3]: http://jwilk.net/software/python-afl\r\n"], "have_tickets": [true], "title": "Testing with two failure seeking missiles: fuzzing and property based testing", "speakers": "Tom Viner", "track_title": "PythonAnywhere Room", "timerange": "2015-07-23 11:45:00, 2015-07-23 12:30:00", "duration": 45, "tags": ["fuzzing", "Testing"]}, "304": {"id": 304, "abstracts": ["The talk will show the architecture and inners of a cloud hosting service we are developing in the University of Cambridge based on python technologies, mainly django, ansible, and celery.\r\n\r\nThe users manage their hosts using a web panel, developed in django, with common options: ability to create a vhost, associate domain names to vhosts, install packages, recover from backups, make snapshots, etc. Interaction between the panel and the hosts are made using ansible playbooks launched asynchronously by celery tasks. The VM architecture has been designed to be VM platform agnostic and to provide disk replication and high availability.\r\n\r\nThe University of Cambridge central IT services (http://www.ucs.cam.ac.uk/) also provides other services to the rest of the university like domain name registration, authentication, authorisation, TLS certificates, etc. We link all these other services with the hosting service by using APIs while keeping a microservices architecture approach. Thus, enabling the use/link of other services  within the same hosting service web application. "], "have_tickets": [false], "title": "Architecture of a cloud hosting service using python technologies: django, ansible and celery", "speakers": "Dr A. Martin-Campillo", "track_title": "PythonAnywhere Room", "timerange": "2015-07-23 11:00:00, 2015-07-23 11:45:00", "duration": 45, "tags": ["hosting", "django", "cloud", "ansible", "celery"]}, "201": {"id": 201, "abstracts": ["2000 urtean CodeSyntax sortu zenetik Python erabili dugu gure lan ia guztiak egiteko. Lan horiek egitean izandako (r)eboluzioa azalduko dugu hitzaldi honetan: python script arruntetatik, Zope aplikazioen zerbitzarian nabigatzaile baten programatzetik, fitxategi sisteman programatzera pasatu gara, Turbogears ere ikutu dugu eta orain Plone, Django eta Pyramid darabilgu.\r\n\r\nSince the beginning of our company in year 2000 we have been using Python to do our work. We will explain the (r)evolution we faced working with python during this 15 years: small python scripts, browser-based-development using Zope Application Server, we touched Turbogears and now Plone, Django and Pyramid applications."], "have_tickets": [true], "title": "Python gure etxean: (r)eboluzioa atzo, gaur eta bihar", "speakers": "Mikel Larreategi", "track_title": "Barria2 Room (Local track)", "timerange": "2015-07-22 15:15:00, 2015-07-22 15:45:00", "duration": 30, "tags": ["web", "Plone", "django", "open-source"]}, "185": {"id": 185, "abstracts": ["Users and developers especially, hate waiting. Computing has adapted and we almost never wait for the computer for more then 10 seconds. One big exception is runnig a test suite which takes MINUTES on many projects. That is incredibly distracting, frustrating and dragging the whole concept of automated tests down. \r\n\r\nI present a technique and a tool (py.test plugin called \"testmon\") which automatically selects only tests affected by recent changes. Does it sound too good to be true? Python developers rightfully have a suspecting attitude towards any tool which tries to be too clever about their source code. Code completion and symbol searching doesn't need to be 100% reliable but messing with the test suite execution? I show that we can cut test suite execution time significantly but maintain it's reliability."], "have_tickets": [true], "title": "Mashing up py.test, coverage.py and ast.py to take TDD to a new level", "speakers": "Tibor Arpas", "track_title": "Barria2 Room", "timerange": "2015-07-21 15:45:00, 2015-07-21 16:15:00", "duration": 30, "tags": ["py.test", "Testing"]}, "228": {"id": 228, "abstracts": ["Passwords are a pain for us all - programmers, users and admins alike. How can we reduce that pain, or eliminate it entirely?\r\n\r\nThis talk will\r\n\r\n - Review research into techniques that improve the usability of password systems, and mitigate shortcomings\r\n - Introduce the new standards Universal Authentication Framework (UAF) & Universal Second Factor (U2F)\r\n - Describe how they streamline authentication, even eliminate passwords entirely\r\n - Show how to integrate UAF/U2F in Django and other Python frameworks\r\n - Summarize the state of support for UAF & U2F in browsers, devices, and the wider world\r\n - Introduce Sonipass - a project to replace passwords, even on existing websites\r\n"], "have_tickets": [true], "title": "Taking the pain out of passwords and authentication", "speakers": "Alex Willmer", "track_title": "PythonAnywhere Room", "timerange": "2015-07-23 15:15:00, 2015-07-23 16:15:00", "duration": 60, "tags": ["experience", "u2f", "web", "authentication", "2fa", "passwords", "security", "fido", "2-factor", "uaf"]}, "308": {"id": 308, "abstracts": ["Whatever you need to do with Python, you can probably import a library for it. But what exactly happens when you use that import statement? How does a source file that you've installed or written become a Python module\r\nobject, providing functions or classes for you to play with?\r\n\r\nWhile the import mechanism is relatively well-documented in the reference and dozens of PEPs, sometimes even Python veterans are caught by surprise. And some details are little-known: did you know you can import from zip archives? Write CPython modules in C, or even a dialect of Lisp? Or import from URLs (which might not be a good idea)?\r\n\r\nThis talk explains exactly what can happen when you use the import statement \u2013 from the mundane machinery of searching PYTHONPATH through subtle details of packages and import loops, to deep internals of custom importers and C extension loading.", "", ""], "have_tickets": [true], "title": "Import Deep Dive", "speakers": "Petr Viktorin", "track_title": "Barria1 Room", "timerange": "2015-07-24 15:45:00, 2015-07-24 16:15:00", "duration": 30, "tags": ["import", "core"]}, "211": {"id": 211, "abstracts": ["CeleraOne tries to bring its vision to Big Data by developing a unique platform for real-time Big Data processing. The platform is capable of personalizing multi-channel user flows, right-in time targeting and analytics while seamlessly scaling to billions of page impression. It is currently tailored to the needs of content providers, but of course not limited to.\r\n\r\n - The platform\u2019s architecture is based on four main layers:\r\n - Proxy/Distribution -- OpenResty/LUA for dynamic request forwarding\r\n - RESTful API -- several Python applications written using Pyramid web framework running under uWSGI server, which serve as an integration point for third party systems;\r\n - Analytics -- Python API for Big Data querying and distributed workers performing heavy data collection.\r\n - In-memory Engine -- CeleraOne\u2019s NoSql database which provides both data storage and fast business logic.\r\n\r\nIn the talk I would like to give insights on how we use Python in the architecture, which tools and technologies were chosen, and share experiences deploying and running the system in production.\r\n\r\n"], "have_tickets": [true], "title": "Building a RESTful real-time analytics system with Pyramid", "speakers": "Andrii Chaichenko", "track_title": "PythonAnywhere Room", "timerange": "2015-07-23 16:45:00, 2015-07-23 17:15:00", "duration": 30, "tags": ["bigdata", "Pyramid", "highload", "real-time", "analytics"]}, "188": {"id": 188, "abstracts": ["In this talk, Software Engineer Joao Santos will describe how the engineering team at Zalando has been migrating to local Git hooks to ensure that engineers can work autonomously and flexibly. Zalando---Europe\u2019s leading online fashion platform for men, women and children-- began shifting from SVN to Git in late 2013. Santos and his colleagues used Python to create a Git update hook that enabled the team to reject changes to a branch while still allowing changes to other branches. He\u2019ll explain why his team chose Python for this job instead of a bash script, point out mistakes made during the process (and solutions his team used to fix them), and the benefits generated by this migration. He\u2019ll also talk about turnstile: a set of open-source, configurable, optional local Git hooks, created by the Zalando team, that enables engineers to abide by internal rules for committing code while following their own coding style and workflow preferences."], "have_tickets": [false], "title": "Using Git Hooks to Help Your Engineering Teams Work Autonomously", "speakers": "Jo\u00e3o Santos", "track_title": "Barria2 Room", "timerange": "2015-07-21 12:30:00, 2015-07-21 13:00:00", "duration": 30, "tags": ["yaml", "git-hooks", "FOSS", "agile", "Git", "CLI", "open-source", "Development"]}, "100": {"id": 100, "abstracts": ["Take a big, non-multithreaded program, and run in on multiple cores!\r\n\r\nPyPy, the Python implementation written in Python, experimentally\r\nsupports Software Transactional Memory (STM).  It runs without the\r\nGlobal Interpreter Lock (GIL).\r\n\r\nThe strength of STM is not only to remove the GIL, but to also enable\r\na novel use of multithreading, inheritently safe, and more useful in\r\nthe general case than other approaches like OpenMP.  The main news\r\nfrom last year's presentation is that there is now a way to get\r\nreports about the \"STM conflicts\", which is essential to go past toy\r\nexamples.  With it, you can incrementally remove conflicts from large\r\ncode bases until you see a benefit from PyPy-STM.  The goal of the\r\ntalk is to give several concrete examples of doing that."], "have_tickets": [true], "title": "The GIL is dead: PyPy-STM", "speakers": "Armin Rigo", "track_title": "Google Room", "timerange": "2015-07-23 16:45:00, 2015-07-23 17:15:00", "duration": 30, "tags": ["PyPy", "GIL", "concurrency"]}, "7": {"id": 7, "abstracts": ["SaltStack is a thriving configuration management system written in Python that leverages YAML and Jinja2 which, by now, probably needs no introduction.\r\n\r\nThis talk will cover a brief summary of why we need configuration management tools, followed by a full dive into SaltStack, its features, pros and cons, how to use it and how to extend it. By the end of this talk you will have gone from knowing little or nothing about SaltStack, to being able to deploy your own setup.\r\n\r\nThis talk will be targeted to either seasoned Python developers who are taking their first steps in the system administration world, or established system administrators who secretly love Python and prefer to stay away of configuration management systems based on other languages.\r\nIts advisable that attendees have some familiarity with Python as well as with system administration concepts. Also, this presentation will be focused on GNU/Linux systems, so it is expected that attendees are comfortable with some of its concepts.", "", ""], "have_tickets": [true], "title": "Salting things up in the sysadmin's world", "speakers": "Juan Manuel Santos", "track_title": "Barria1 Room", "timerange": "2015-07-21 14:30:00, 2015-07-21 15:15:00", "duration": 45, "tags": ["saltstack", "management", "python", "configuration", "linux"]}, "21": {"id": 21, "abstracts": ["TDD is not about tests!\r\nWell, actually, it\u2019s not **just** about writing tests, or writing them before the code. This talk will show you how to use tests to really drive development by transforming business requirements into tests, and allowing your code to come as their natural consequence.\r\n\r\nToo often this key aspect is neglected and the result is that tests and code are somehow \u201cdisconnected\u201d. The code is not as short and efficient as it could be, and the tests are not as effective. Refactoring is not always easy, and over time all sorts of issues start to come out of the surface.\r\n\r\nHowever, we will show that when TDD is done properly, tests and code merge beautifully into an organic whole that fulfills the business requirements, and provides all sorts of advantages: your code is minimal, easy to amend and extend, readable, clean. Your tests will be effective, short and focused, and allow for light-hearted refactoring and excellent coverage.\r\n\r\nWe will provide enough information and examples to spark the curiosity of the novice, and satisfy the need of a deeper insight for the intermediate, and help you immediately benefit from this transformative technique that is still often underestimated and misunderstood."], "have_tickets": [true], "title": "TDD is not about tests!", "speakers": "Fabrizio Romano", "track_title": "A2 Room", "timerange": "2015-07-24 14:30:00, 2015-07-24 15:15:00", "duration": 45, "tags": ["python", "tdd", "agile", "Best Practice", "Development", "Testing", "Coding"]}, "348": {"id": 348, "abstracts": ["Python focuses a lot on writing readable code and also tries to make solutions obvious, but this doesn't necessarily mean that you cannot write unreadable code or design your code in ways which makes it hard to extend or maintain.\r\n\r\nThis talk will show some useful idioms to use when writing Python code, how to structure your modules and also goes into details on which techniques to use and which to think about twice, based on 20 years of experience writing Python."], "have_tickets": [true], "title": "Python idioms to help you write good code", "speakers": "Marc-Andre Lemburg", "track_title": "Google Room", "timerange": "2015-07-21 15:15:00, 2015-07-21 15:45:00", "duration": 30, "tags": ["python", "design", "idioms", "experience", "Best Practice", "Coding"]}, "286": {"id": 286, "abstracts": ["Meta classes are an advanced feature in python, in this talk i will try to explain what they are, how they work and i will show some code as well. \r\nThis talk is for anyone who would like to see what happens under the hood when you create a class in Python and how to intercept the class creation process and modify it.\r\n", "", ""], "have_tickets": [false], "title": "Python Advanced Basics (Meta Classes)", "speakers": "Nimrod Wandera", "track_title": "Barria1 Room", "timerange": "2015-07-24 14:30:00, 2015-07-24 15:15:00", "duration": 45, "tags": ["python"]}, "75": {"id": 75, "abstracts": ["I will explain how CPython objects are built, from simple objects\r\nlike int or None to complex ones like dict. To make it funnier, I\r\nwill play to change instance data directly using ctypes and do\r\n\"really bad things\" like truncating tuples."], "have_tickets": [true], "title": "Playing with CPython Objects Internals", "speakers": "Jes\u00fas Espino", "track_title": "PythonAnywhere Room", "timerange": "2015-07-22 14:30:00, 2015-07-22 15:15:00", "duration": 45, "tags": ["low-level", "python", "cpython"]}, "133": {"id": 133, "abstracts": ["The talk discusses the challenges of implementing a Citizen Science Paradigm in a Python-centric platform, and the solutions devised for the System for observation and monitoring of Marine Alien Species, currently used by the italian Institute for Environmental Protection and Research (ISPRA). \"Alien\" Species means species introduced into a natural environment where they are not normally found.\r\nTopics includes strategies for crowd-friendly forms, work-flow definition for collected data, choice of the best technologies for its components: app for android devices, web application for citizens and experts, webGIS for data browsing and web services for data exporting."], "have_tickets": [true], "title": "Citizen Science: Tracking Aliens with Python!", "speakers": "Alessio Siniscalchi", "track_title": "Barria2 Room", "timerange": "2015-07-21 15:15:00, 2015-07-21 15:45:00", "duration": 30, "tags": ["Plone", "postgresql", "webGIS", "citizen-science"]}, "111": {"id": 111, "abstracts": ["Before its first major version, Elasticsearch was only used as a \"secondary\" database, and search engine.\r\nThe releases added a snapshort/restore feature, making it a great full featured database\r\n\r\nThis talk will focus on how we integrate Elasticsearch into our stack, and the multiple usage we make of it: from storing business   events to IOT devices metrics."], "have_tickets": [true], "title": "Python and elasticsearch 101", "speakers": "Beno\u00eet Calvez", "track_title": "A2 Room", "timerange": "2015-07-20 16:45:00, 2015-07-20 17:15:00", "duration": 30, "tags": ["databases", "development-process", "elasticsearch"]}, "129": {"id": 129, "abstracts": ["[Apache Spark][1] is a computational engine for large-scale data processing. It\r\nis responsible for scheduling, distribution and monitoring applications which\r\nconsist of many computational task across many worker machines on a computing\r\ncluster.\r\n\r\nThis Talk will give an overview of PySpark with a focus on Resilient\r\nDistributed Datasets and the DataFrame API. While Spark Core itself is written\r\nin Scala and runs on the JVM, PySpark exposes the Spark programming model to\r\nPython. It defines an API for Resilient Distributed Datasets (RDDs). RDDs are a\r\ndistributed memory abstraction that lets programmers perform in-memory\r\ncomputations on large clusters in a fault-tolerant manner. RDDs are immutable,\r\npartitioned collections of objects. Transformations construct a new RDD from a\r\nprevious one. Actions compute a result based on an RDD. Multiple computation steps\r\nare expressed as directed acyclic graph (DAG). The DAG execution model is \r\na generalization of the Hadoop MapReduce computation model.\r\n\r\nThe Spark DataFrame API was introduced in Spark 1.3. DataFrames envolve Spark's\r\nRDD model and are inspired by Pandas and R data frames. The API provides\r\nsimplified operators for filtering, aggregating, and projecting over large\r\ndatasets. The DataFrame API supports diffferent data sources like JSON\r\ndatasources, Parquet files, Hive tables and JDBC database connections.\r\n\r\nResources:\r\n\r\n- [An Architecture for Fast and General Data Processing on Large Clusters][2] Matei Zaharia\r\n- [Spark][6] Cluster Computing with Working Sets - Matei Zaharia et al.\r\n- [Resilient Distributed Datasets][5] A Fault-Tolerant Abstraction for In-Memory Cluster Computing -Matei Zaharia et al.\r\n- [Learning Spark][3] Lightning Fast Big Data Analysis - Oreilly\r\n- [Advanced Analytics with Spark][4] Patterns for Learning from Data at Scale - Oreilly\r\n\r\n [1]: https://spark.apache.org\r\n[2]: http://www.eecs.berkeley.edu/Pubs/TechRpts/2014/EECS-2014-12.pdf\r\n[3]: http://shop.oreilly.com/product/0636920028512.do\r\n[4]: http://shop.oreilly.com/product/0636920035091.do\r\n[5]: https://www.cs.berkeley.edu/~matei/papers/2012/nsdi_spark.pdf\r\n[6]: http://www.cs.berkeley.edu/~matei/papers/2010/hotcloud_spark.pdf\r\n\r\n"], "have_tickets": [false], "title": "PySpark - Data processing in Python on top of Apache Spark.", "speakers": "Peter Hoffmann", "track_title": "Google Room", "timerange": "2015-07-22 16:45:00, 2015-07-22 17:15:00", "duration": 30, "tags": ["bigdata", "distributed-systems", "data-science", "analytics"]}, "18": {"id": 18, "abstracts": ["An overview of the currently available Python game development libraries and frameworks and how is Python currently being used in the videogame industry.\r\n\r\nPresentation of Kobra, a modern open source Python game development framework with ECS (Entity Component System) architecture and C++ bindings."], "have_tickets": [true], "title": "Python Gamedev MLG", "speakers": "Alejandro Garcia", "track_title": "A2 Room", "timerange": "2015-07-22 14:30:00, 2015-07-22 15:15:00", "duration": 45, "tags": ["gamedev", "python", "OpenGL", "c++"]}, "80": {"id": 80, "abstracts": ["Mixins are a great way to keep an application decoupled. This talk is about building mixins and dissecting what's behing the mixin \"magic\" and that, in fact, there is no magic involved at all. The main focus will be on Django framework while digging into mixins. When using Django class-based views, mixins feel very natural.\r\n\r\n**Goal**: by the end of this talk, every developer should be confident about creating his or her own custom mixins.\r\n\r\n**Prerequisites:**\r\n - basic understanding of OOP principles and their application in Python\r\n - Django web framework\r\n\r\nGenerally mixins in Python are pretty straight-forward, easy to create and use. Nevertheless a lot of developers stay away from them. I think attendees of this talk will be interested to learn that mixins are not that complex and their benefit is tremendous."], "have_tickets": [true], "title": "Demystifying Mixins with Django", "speakers": "Ana Balica", "track_title": "Barria2 Room", "timerange": "2015-07-24 12:30:00, 2015-07-24 13:00:00", "duration": 30, "tags": ["mixins", "OOP", "django"]}, "232": {"id": 232, "abstracts": ["So often, we've been encouraged to be smart in our development. \"Work smarter not harder!\" say the encouraging posters. But the desire to be smart, and be seen to be smart, is hurting. The design suffers, the code suffers, and it's hard to recruit developers smart enough to cope with the problems caused.\r\n\r\nIn this talk, I'm proposing an alternative to being smart: **_DumbDev_**. Let's use our brains for enjoyable, interesting things, rather than wrestling with code written for smart developers.\r\n\r\n**So what do I mean by _dumb_?**\r\n\r\nWell, I don't mean 'ignorant'. A clever person can be ignorant of some important information, and learn it. With ignorance, there is hope. I'm also not talking about its opposite, 'stupidity'. This occurs when someone is given the information or advice, and chooses to ignore it. Dumb isn't stupid. Nor is it silent, as in someone who can't speak.\r\n\r\nInstead, the picture I have is of one of the early computers: very small RAM, disk space measured in KB, and a woefully inadequate CPU. In other words, slow, with very little working memory and limited persistent storage. Hey, this describes my brain -- and I realise that's an asset! I will write better software if I take this into account.\r\n\r\nHere's the first **_DumbDev_** rule, putting a sensible limit on complexity:\r\n\r\n> **1. All diagrams must fit on a Noughts and Crosses (Tic-tac-toe) board**.\r\n\r\n> _One central class/concept and up to eight things linked. Larger structures need to be subdivided._\r\n\r\n  [1]: http://www.phyast.pitt.edu/~micheles/python/plone-hierarchy.png\r\n  [2]: http://www.artima.com/weblogs/viewpost.jsp?thread=246341\r\n", "So often, we've been encouraged to be smart in our development. \"Work smarter not harder!\" say the encouraging posters. But the desire to be smart, and be seen to be smart, is hurting. The design suffers, the code suffers, and it's hard to recruit developers smart enough to cope with the problems caused.\r\n\r\nIn this talk, I'm proposing an alternative to being smart: **_DumbDev_**. Let's use our brains for enjoyable, interesting things, rather than wrestling with code written for smart developers.\r\n\r\n**So what do I mean by _dumb_?**\r\n\r\nWell, I don't mean 'ignorant'. A clever person can be ignorant of some important information, and learn it. With ignorance, there is hope. I'm also not talking about its opposite, 'stupidity'. This occurs when someone is given the information or advice, and chooses to ignore it. Dumb isn't stupid. Nor is it silent, as in someone who can't speak.\r\n\r\nInstead, the picture I have is of one of the early computers: very small RAM, disk space measured in KB, and a woefully inadequate CPU. In other words, slow, with very little working memory and limited persistent storage. Hey, this describes my brain -- and I realise that's an asset! I will write better software if I take this into account.\r\n\r\nSo, I'm a **_DumbDev_**, which means I can't hold in my mind the infamous [Plone Site class hierarchy][1] (see [Michele Simionato's article][2]). Rather than beat myself up about this, I can say, \"Hold on, maybe deep inheritance is a bad idea...\" There is some debate about the number of things we can think about simultaneously: it may be 7, 9, 5, 4 or even only 3. We can learn some tricks to appear to cope with more, but most of us can't easily do 38. \r\n\r\nHere's the first **_DumbDev_** rule, putting a sensible limit on complexity:\r\n\r\n> **1. All diagrams must fit on a Noughts and Crosses (Tic-tac-toe) board**.\r\n\r\n> _One central class/concept and up to eight things linked. Larger structures need to be subdivided._\r\n\r\nThere are seven further rules for me to explain in this talk. I will demonstrate the benefits of the **_DumbDev_** approach, with good and bad examples. At the end of the presentation, I hope you will realise that you're a better developer than you thought at the start. The next time it takes you two hours to debug a simple exception, you'll know that it's not you. It's because the system wasn't written using **_DumbDev_** rules.\r\n\r\nLet's free our brains for more interesting things, like having ideas and solving problems. \r\n\r\nLet's do **_DumbDev_**.\r\n\r\n  [1]: http://www.phyast.pitt.edu/~micheles/python/plone-hierarchy.png\r\n  [2]: http://www.artima.com/weblogs/viewpost.jsp?thread=246341\r\n", ""], "have_tickets": [true], "title": "DumbDev -- eight rules for dumb development", "speakers": "Rob Collins", "track_title": "PythonAnywhere Room", "timerange": "2015-07-24 11:45:00, 2015-07-24 12:30:00", "duration": 45, "tags": ["massage", "best-practices", "dumbdev", "unit-testing", "rules", "community", "software-design"]}, "39": {"id": 39, "abstracts": ["Reahl is a full-featured web framework with a twist: with Reahl you write a web application purely in Python. HTML, JavaScript, CSS and all those cumbersome web technologies (and a few other lower level concerns) are hidden away from you. As far as web frameworks go this is truly a paradigm shift: away from the cobwebs of all the different web technologies, template languages and low-level details -- towards being able to focus on the goals at hand instead, using a single language.\r\n\r\nIn this talk I will give you a brief idea of what Reahl is all about: why it is worthwhile doing, how it works, where we are and what still needs to be done. I hope to convince you that this is an important direction for web frameworks, and of how unique Reahl is. Developing such an abstract framework is an ambitious goal. I'd like to convey the message that what we have achieved so far, and the strategy lessons learnt along the way demonstrate this goal to be realistic and practical.\r\n\r\n"], "have_tickets": [true], "title": "Reahl: The Python-only web framework", "speakers": "Iwan Vosloo", "track_title": "Barria1 Room", "timerange": "2015-07-23 14:30:00, 2015-07-23 15:15:00", "duration": 45, "tags": ["web", "open-source"]}, "41": {"id": 41, "abstracts": ["[Ansible ][1]is the _new cool kid in town_ in the configuration management world. It is easy to learn, fast to setup and works great! In the first part of the talk, I will do a super-fast introduction to Ansible for the newcomers.\r\n\r\nIf you are a Pythonista, you can hack and leverage Ansible in many ways. In the second part of the talk, I will describe some options to extend and embed Ansible with Python:\r\n\r\n - Embedding Ansible with the Python API\r\n - Extending Ansible: creating modules, plugins and callbacks\r\n\r\nPrevious experience with Ansible is advised in order to get the most of this talk, but beginners to the tool will also get an overview of the capabilities of this kind of integration.\r\n\r\n  [1]: http://www.ansible.com/home\r\n"], "have_tickets": [true], "title": "Extending and embedding Ansible with Python", "speakers": "Alejandro Guirao Rodr\u00edguez", "track_title": "A2 Room", "timerange": "2015-07-23 11:00:00, 2015-07-23 11:45:00", "duration": 45, "tags": ["management", "Tooling", "configuration", "DevOps", "ansible"]}, "70": {"id": 70, "abstracts": ["The talk is about the implementation of multibody simulation in the scientific python world on the way to a stage usefull for engineering and educational purposes.\r\nMultibody simulation (MBS) requires two major steps: first the formulation of the specific mechanical problem. Second step is the integration of the resulting equations.\r\nFor the first step we use the package sympy which is on a very advanced level to perform symbolic calculation and which supports already Lagrange's and Kane's formalism. The extensions we made are such that a complex mechanical setup can be formulated easily with several lines of python code. The functionality is analogous to well known MBS-tools, with that you can assemble bodies, joints, forces and constraints. Also external forces even in a cosimulation model can be added on top. The second step, the integration is done via ode-integrators implemented in scipy.\r\nFinally for visual validation the results are visualized with the vpython package and for further analytics with matplotlib.\r\n\r\nConclusion: not only highly constrained pendulums with many rods and springs but also driving simulation of passenger cars an be performed with our new extension using python packages off the shelf."], "have_tickets": [true], "title": "Multibody Simulation using sympy, scipy and vpython", "speakers": "Oliver Braun", "track_title": "PythonAnywhere Room", "timerange": "2015-07-20 11:00:00, 2015-07-20 11:45:00", "duration": 45, "tags": ["Mechanics", "sympy", "Engineering", "vpython", "Physics", "visualization", "education", "scipy"]}, "19": {"id": 19, "abstracts": ["Times changed, with introducing asyncio to Python standard library many and many developers think about switching from previous solutions to aio stack. Talk will introduce aiohttp, aioredis & aiopg - cornerstones for building modern Python backends and show common problems & solutions while switching to aio stack.\r\n\r\nBut not only Python changed. In second part, I'll talk about what new happened in frontend development, how new ES6 features modified JavaScript, and what React.js & Flux means for Python developers. \r\n\r\nTalk will cover real-world web application, which used aio stack on backend and React.js & Flux approach on frontend and provide useful observations for other developers interested in these topics."], "have_tickets": [true], "title": "Asyncio Stack & React.js or Development on the Edge", "speakers": "Igor Davydenko", "track_title": "Google Room", "timerange": "2015-07-20 11:00:00, 2015-07-20 11:45:00", "duration": 45, "tags": ["es6", "aiohttp", "aiopg", "react.js", "flux", "api", "aioredis", "python3", "asyncio"]}, "99": {"id": 99, "abstracts": ["In this talk I'm going to introduce Scrapinghub's new open source framework [Frontera][1].  Frontera allows to build real-time distributed web crawlers and website focused ones. \r\n\r\nOffering:\r\n\r\n - customizable URL metadata storage (RDBMS or Key-Value based),\r\n - crawling strategies management,\r\n - transport layer abstraction.\r\n - fetcher abstraction.\r\n\r\nAlong with framework description I'll demonstrate how to build a distributed crawler using [Scrapy][2], Kafka and HBase, and hopefully present some statistics of Spanish internet collected with newly built crawler.  Happy EuroPythoning!\r\n\r\n  [1]: https://github.com/scrapinghub/frontera\r\n  [2]: http://scrapy.org/\r\n"], "have_tickets": [true], "title": "Frontera: open source large-scale web crawling framework", "speakers": "Alexander Sibiryakov", "track_title": "A2 Room", "timerange": "2015-07-20 15:15:00, 2015-07-20 15:45:00", "duration": 30, "tags": ["scrapy", "kafka", "hbase", "webcrawling", "distributed-systems"]}, "279": {"id": 279, "abstracts": ["This talks is about automation and the use of Python scripts to speed up repetitive tasks.\r\n\r\nIt's for developers, sysops, devops, but also any kind of user that want improve his daily routine.\r\n\r\nI will talk about the use of Python with different tools for different platforms: Keyboard Maestro/Alfred/Hazel on OsX and Synapse/Kupfer/AutoKey on Linux.\r\n\r\nThere will be presented some sample script to give an idea of the potentiality of Python mixed with great tools, and these are some of the topics that I will cover:\r\n\r\n - text manipulation;\r\n - document template management;\r\n - clipboard management;\r\n - stuff internet activities (url shortening, web scraping, etc.);\r\n - list management.\r\n - etc.\r\n\r\n"], "have_tickets": [true], "title": "Python for IT specialists' tasks automation", "speakers": "Gianluca Nieri", "track_title": "PythonAnywhere Room", "timerange": "2015-07-20 11:45:00, 2015-07-20 12:30:00", "duration": 45, "tags": ["automation", "development-tools", "DevOps", "system-administration"]}, "101": {"id": 101, "abstracts": ["DEPOT ( http://depot.readthedocs.org/en/latest/ ) is a file storage framework born from the experience on a project that saved a lot of files on disk, until the day it went online and the customer system engineering team decided to switch to Heroku, which doesn't support storing files on disk.\r\n\r\nThe talk will cover the facets of a feature \"saving files\" which has always been considered straightforward but that can become complex in the era of cloud deployment and when infrastructure migration happens. \r\n\r\nAfter exposing the major drawbacks and issues that big projects might face on short and long terms with file storage the talk will introduce DEPOT and how it tried to solve most of the issues while providing a super-easy-to-use interface for developers. We will see how to use DEPOT to provide attachments on SQLAlchemy or MongoDB and how to handle problems like migration to a different storage backend and long term evolution.\r\n\r\nLike SQLAlchemy makes possible to switch your storage on the fly without touching code, DEPOT aims at making so possible for files and even use multiple different storages together."], "have_tickets": [true], "title": "Why storing files for the web is not as straightforward as you might think.", "speakers": "Alessandro Molina", "track_title": "Barria2 Room", "timerange": "2015-07-21 11:00:00, 2015-07-21 11:45:00", "duration": 45, "tags": ["web", "HTTP.", "mongodb", "cloud", "SQLAlchemy"]}, "147": {"id": 147, "abstracts": ["Haskell is very different from Python, and provide different tools to library and framework designers. As a result, its ecosystem is filled with libraries and frameworks that solve the same problems we try to solve in our favorite programming languages, but with a very different approach.\r\n\r\nThis talk is an exploration of the Haskell ecosystem, from the point of view of a Python developer. \r\nWe will review various popular Haskell libraries and frameworks, focusing on the library design. The goal is to provide the audience a sneak peak of some different ways to tackle problems, and hopefully to inspire library authors to explore some design space that we don't usually explore in Python.\r\n\r\nThis talk should be interesting to any intermediate Python programmer who is curious about other ways to solve problems. No Haskell knowledge is required from the audience."], "have_tickets": [true], "title": "Through the lens of Haskell: exploring new ideas for library design", "speakers": "Georges Dubus", "track_title": "A2 Room", "timerange": "2015-07-23 15:45:00, 2015-07-23 16:15:00", "duration": 30, "tags": ["design", "library", "Haskell"]}, "165": {"id": 165, "abstracts": ["As a web developer, I find myself being asked to make increasing numbers of data visualizations, interactive infographics, and more. d3.js is great, as are many other javascript toolkits that are out there. But if I can write more Python and less JavaScript... well, that makes me happy! \r\n\r\nBokeh is a new Python library for interactive visualization. Its origins are in the data science community, but it has a lot to offer web developers. In this mini-tutorial, I'll run through how to build a data visualization in Bokeh and how to hook it into your web application. This will be a real-world example, that was previously built in d3.js. \r\n\r\nAlong the way, I'll provide tips and tricks that I've discovered in my experience including how Bokeh works wonderfully with the iPython notebook which I use to prototype my visualizations, and many data science people use as their native way to explore data.\r\n\r\nFor those of you who already know a little Bokeh, I'll be covering the new \"actions framework\" that lets you write JS callbacks in your python code so you can do lots of interactions all on the client side.\r\n"], "have_tickets": [true], "title": "Getting started with Bokeh / Let's build an interactive data visualization for the web..in Python!", "speakers": "Sarah Bird", "track_title": "Barria2 Room", "timerange": "2015-07-20 11:00:00, 2015-07-20 11:45:00", "duration": 45, "tags": ["open-data", "data-science", "javascript", "visualization", "bigdata", "bokeh", "pandas", "web", "django", "open-source", "canvas", "data", "graphics"]}, "247": {"id": 247, "abstracts": ["Wrappers are an essential tool for interacting with web APIs. They reduce the amount of work needed to make requests and sometimes, only sometimes prevent the developer from dealing with extensive documentations. It\u2019s common to encounter libs that require not only the study of their own documentation, but also the APIs one, duplicating the needed work. This is caused because wrappers do not follow a design pattern, each developer creates it\u2019s own design, coding style and use their preferred tools.   \r\n\r\n[Tapioca][1] is what can be called: \"a wrapper generator\u201d. Creating API wrappers with Tapioca is extremely easy and fast. For example, it took 1 hour to write the full wrapper for the [Parse.com][2] REST API. But this is not the more important thing, Tapioca libs have a similar interface so once understood how they work, developers can work with any other without the need to learn a new interface.    \r\n\r\nTapioca is also thought to comply with REST features and takes HATEOAS (Hypermedia as the engine of application state) seriously, so \u201cfollowing\u201d links and pagination are natively supported. Explorability is also a key concept and developers are encouraged to play with Tapioca packages and find their way through APIs before writing their final code. Although there are some production ready [Tapioca wrappers][3], it is a work in progress, there are still many features to be explored.\r\n\r\n  [1]: https://github.com/vintasoftware/tapioca-wrapper\r\n  [2]: http://parse.com\r\n  [3]: https://github.com/vintasoftware/tapioca-wrapper#tapioca-comes-in-many-flavours"], "have_tickets": [true], "title": "What is wrong with API wrappers and how can we do better", "speakers": "Filipe Ximenes", "track_title": "A2 Room", "timerange": "2015-07-20 12:30:00, 2015-07-20 13:00:00", "duration": 30, "tags": ["HTTP", "ipython", "web", "api", "requests", "wrapper"]}, "195": {"id": 195, "abstracts": ["In this talk I will present some tools for working with Geographic Information Systems in Python.\r\n\r\nGeographic information Systems are widely used for managing geographic (map) data. As an example I will present how to use Open Street Map data (http://openstreetmap.org/), in routing, traffic planning and estimation of pollution emission.\r\n\r\nFor the purpose of the project EcoSense (http://ecosense.au.dk), GPS data from users smartphones are mapped to OSM roads. The map matching algorithm is written in Python and uses data from the database PostgreSQL, with the PostGIS extension. \r\n\r\nOne of the goals of the EcoSense project is to devise methods to improve the estimation of air quality in urban environments.\r\n"], "have_tickets": [true], "title": "How to GIS with Python", "speakers": "Anders Lehmann", "track_title": "Barria2 Room (Education Summit)", "timerange": "2015-07-23 16:45:00, 2015-07-23 17:15:00", "duration": 30, "tags": ["GIS", "bigdata", "Mapmatching", "PostGIS", "postgresql"]}, "296": {"id": 296, "abstracts": ["To accompany an upcoming O'Reilly book 'Data-visualisation with Python and Javascript: crafting a dataviz toolchain for the web' (see [here][1]) this talk aims to sketch out the toolchain by transforming some dry Wikipedia data (Nobel prize-winners) into a far more engaging and insightful web-visualisation. This transformative cycle uses Python big-hitters such as Scrapy, Pandas and Flask, the latter delivering data to Javascript's D3.\r\n\r\nWhile Python is fast becoming the goto language for data-processing/science, the visual fruits of that labour hit the wall of the web, where there is only one first-class language, Javascript. To develop a data-viz toolchain for the modern world, where web-presentation is increasingly mandated, making Python and Javascript play nicely is fundamental. This talk aims to show that the perceived wall between the two languages is actually a thin, permeable membrane and that, with a bare minimum of web-dev, one can get on with programming seamlessly in both.\r\n\r\n  [1]: http://kyrandale.com/blog/data-visualization-python-javascript/\r\n"], "have_tickets": [true], "title": "Data-visualisation with Python and Javascript: crafting a data-viz toolchain for the web", "speakers": "Kyran Dale", "track_title": "PythonAnywhere Room", "timerange": "2015-07-21 14:30:00, 2015-07-21 15:15:00", "duration": 45, "tags": ["d3", "visualization", "matplotlib", "flask", "pandas", "web", "javascript", "scrapy"]}, "199": {"id": 199, "abstracts": ["Today, we almost exclusively think of code in software projects as a collection of text files. The tools that we use (version control systems, IDEs, code analyzers) also use text as the primary storage format for code. In fact, the belief that \"code is text\" is so deeply ingrained in our heads that we never question its validity or even become aware of the fact that there are other ways to look at code.\r\n\r\nIn my talk I will explain why treating code as text is a very bad idea which actively holds back our understanding and creates a range of problems in large software projects. I will then show how we can overcome (some of) these problems by treating and storing code as data, and more specifically as a graph. I will show specific examples of how we can use this approach to improve our understanding of large code bases, increase code quality and automate certain aspects of software development.\r\n\r\nFinally, I will outline my personal vision of the future of programming, which is a future where we no longer primarily interact with code bases using simple text editors. I will also give some ideas on how we might get to that future.\r\n\r\nMore information about me:\r\n\r\n- Github: https://github.com/adewes\r\n- Twitter: https://twitter.com/japh44\r\n- Website: http://www.andreas-dewes.de/en", "Today, we almost exclusively think of code in software projects as a collection of text files. The tools that we use (version control systems, IDEs, code analyzers) also use text as the primary storage format for code. In fact, the belief that \"code is text\" is so deeply ingrained in our heads that we never question its validity or even become aware of the fact that there are other ways to look at code.\r\n\r\nIn my talk I will explain why treating code as text is a very bad idea which actively holds back our understanding and creates a range of problems in large software projects. I will then show how we can overcome (some of) these problems by treating and storing code as data, and more specifically as a graph. I will show specific examples of how we can use this approach to improve our understanding of large code bases, increase code quality and automate certain aspects of software development.\r\n\r\nFinally, I will outline my personal vision of the future of programming, which is a future where we no longer primarily interact with code bases using simple text editors. I will also give some ideas on how we might get to that future.\r\n\r\nGoals:\r\n\r\n- Convince people that treating code primarily as text is a really bad idea.\r\n- Show which insights we can gain when treating code as data and storing it in a format that allows us to analyze and process it algorithmically.\r\n- Give people a vision on how the future of programming might look like and how we might get there.\r\n\r\nPrerequisites:\r\n\r\n- A basic understanding of programming concepts (files, compilers / interpreters, version control [not really necessary though]).\r\n- An interest in best practices and writing good code.\r\n\r\nOutline:\r\n\r\n- Introduction (who am I, why I'm here) - 3 mins\r\n- Short history of code storage formats - wires, punch cards, text, graphs and back to text  (5 mins)\r\n- Why storing code as text is a bad idea - motivation and examples (5 mins)\r\n- Alternative ways to think about code - graphs and trees (5 mins)\r\n- Building a graph storage engine for Python code - principles and use cases (5 mins)\r\n- Demo time - visualizing the graph, tracking the evolution of code, finding duplicates and problems, automatically refactoring the graph (5 mins)\r\n- The future of programming - increase automation, decrease errors (5 mins) \r\n- Building the future - what we need and how to build it  (5 mins)\r\n- Ending remarks (2 mins)\r\n\r\n(40 minutes total [probably less] + 5 minutes of Q&A)\r\n\r\nMy motivation:\r\n\r\nI talked about data-driven code analysis at the PyCon Montreal 2015, and many people said that they really enjoyed my talk and would like to learn more about data-driven code analysis and treating code as a graph. I'm happy to oblige and give a talk about this at the EuroPython!\r\n\r\nOther events I spoke at (selection):\r\n\r\n- 31C3 (Chaos Communication Congress) Hamburg: I gave a talk on quantum computing in front of 1.800 people, which received very positive feedback (https://www.youtube.com/watch?v=aXtE0Zeszho)\r\n- PyCon Montreal - I spoke about data-driven code analysis in front of 1.000 people. The talk received great interest and very positive feedback (https://us.pycon.org/2015/schedule/presentation/341/)\r\n\r\nMore information about me:\r\n\r\n- Github: https://github.com/adewes\r\n- Twitter: https://twitter.com/japh44\r\n- Website: http://www.andreas-dewes.de/en", ""], "have_tickets": [true], "title": "Code is not text! How graph technologies can help us to understand our code better.", "speakers": "Andreas Dewes", "track_title": "PythonAnywhere Room", "timerange": "2015-07-21 11:00:00, 2015-07-21 11:45:00", "duration": 45, "tags": ["python", "visualization", "bigdata", "Programming", "code", "graphdatabases", "futureofcoding", "Best Practice"]}, "343": {"id": 343, "abstracts": ["This is a talk for mediocre Python programmers by a mediocre programmer.  PyPy\r\nis an alternative implementation of Python. It is notorious for being fast, but\r\nalso for using clever algorithms pertaining to advanced concepts such as type\r\ninference, garbage collection, just-in-time compilation, etc. So, can we,\r\nmediocre programmers, realistically use PyPy?\r\n\r\nYes, absolutely. In fact, PyPy developers did all that hard work so that we\r\nwouldn't have to. As we'll see, it runs most Python code exactly like CPython\r\ndoes, save that it magically makes it faster.\r\n\r\nPorting existing applications is always more involved than running a simple\r\nscript, so we'll also examine likely difficulties such as code relying on\r\nCPython implementation details, and dependencies on C extensions, and explore\r\nsimple principles to let PyPy run your code even faster.\r\n\r\nFinally, we'll have a glimpse of the future by looking at what's brewing in \r\nthe PyPy lair, such as software transactional memory, new speed optimisations,\r\nbetter support for Python 3 and NumPy, ...\r\n\r\n\r\n"], "have_tickets": [true], "title": "PyPy for mediocre programmers", "speakers": "Ronan Lamy", "track_title": "Barria1 Room", "timerange": "2015-07-24 11:00:00, 2015-07-24 11:45:00", "duration": 45, "tags": ["PyPy"]}, "156": {"id": 156, "abstracts": ["This talk introduces the asyncio module. I'll cover what it's for, how it works and describe how I used it to write a real-world networked application (a distributed hash table). We'll explore the event loop, coroutines, futures and networking with examples from my code. This won't be an exhaustive exposition. Rather, attendees will grasp enough of asyncio to continue with their own studies.\r\n\r\nBy the end of this introductory talk I hope attendees will want to learn more about asyncio and perhaps give it a try in their own projects."], "have_tickets": [false], "title": "Lessons learned with asyncio (\"Look ma, I wrote a distributed hash table!\")", "speakers": "Nicholas Tollervey", "track_title": "A2 Room", "timerange": "2015-07-22 15:15:00, 2015-07-22 15:45:00", "duration": 30, "tags": ["asyncio", "introduction"]}, "317": {"id": 317, "abstracts": ["Talk about mistakes we made and best practises we have elaborated while implementation Behave Driven Development into one of the projects. Great idea to coverage whole application with functional tests fall down in development chaos and reborn on new better foundations.\r\n\r\nProject referred is web-based big data management which main features are transcoding and file sharing. Thanks to Django and many Python frameworks we have web interface for it and we are able to run automation tests with Selenium.", "", ""], "have_tickets": [true], "title": "BDD: You\u2019re doing it wrong!", "speakers": "Rafa\u0142 Nowicki", "track_title": "Barria1 Room", "timerange": "2015-07-23 12:30:00, 2015-07-23 13:00:00", "duration": 30, "tags": ["test", "selenium", "django", "bdd"]}, "244": {"id": 244, "abstracts": ["You've been making packages for a while now. Everything works almost fine, however, lots of new features and tools have been developed recently. Some are really obscure. And there's a chance they can save you time and help you avoid _packaging-induced-pain_. I'm willing to bet couple of beers you haven't seen these features and/or tools before.\r\n\r\nThis talk is going to show you:\r\n\r\n- Patterns and tricks you can use in your `setup.py`.\r\n- Obscure pip/setuptools/virtualenv/python features you can use to improve your packaging experience (be it as a user of packages or a package author).\r\n- Fledgeling alternative tools.", "", ""], "have_tickets": [true], "title": "Less known packaging features and tricks", "speakers": "Ionel Cristian M\u0103rie\u0219", "track_title": "PythonAnywhere Room", "timerange": "2015-07-20 12:30:00, 2015-07-20 13:15:00", "duration": 45, "tags": ["virtualenv", "setuptools", "python", "packaging", "pip"]}, "29": {"id": 29, "abstracts": ["Data Structures is traditionally a \u201cbogeyman\u201d discipline in Computer Science courses and has a high degree of failure. In FATEC S\u00e3o Jos\u00e9 dos Campos we are adopting a hybrid approach, with C and Python languages. The failure rate decreased from 85% (2008) to 12% (2014). The talk will be extensively illustrated with code in C and Python, addressing the various concepts taught in this course: recursion, linked lists, queues, stacks, sorting algorithms.", "", ""], "have_tickets": [true], "title": "Data Structures with Python", "speakers": "Fernando Masanori Ashikaga", "track_title": "Barria2 Room (Education Summit)", "timerange": "2015-07-23 15:45:00, 2015-07-23 16:15:00", "duration": 30, "tags": ["education"]}, "333": {"id": 333, "abstracts": ["During this talk we will discuss  how to manage your full stack development life cycle using python technologies plus Docker. \r\n\r\nWe will cover from, the project creation (using Pyramid web framework), to maintaining a consistent deployment  infrastructure using buildout and docker containers. ", "Durante esta presentaci\u00f3n discutiremos como administrar el ciclo de vida de tu desarrollo usando tecnolog\u00edas Python m\u00e1s Docker.\r\n\r\nVamos a cubrir desde la creaci\u00f3n de tu proyecto (usando el framework Pyramid), hasta la mantenci\u00f3n de  infraestructuras consistentes de instalaci\u00f3n usando buildout y contenedores docker. ", ""], "have_tickets": [true], "title": "Easy FullStack Deployments", "speakers": "Alvaro Aguirre", "track_title": "A2 Room", "timerange": "2015-07-23 15:15:00, 2015-07-23 15:45:00", "duration": 30, "tags": ["Buildout", "DevOps", "docker", "ansible", "fabric", "Pyramid"]}, "16": {"id": 16, "abstracts": ["Big Data - these two words are heard so often nowadays. But what exactly is Big Data ? Can we, Pythonistas, enter the wonder world of Big Data ? The answer is definitely \"Yes\".\r\n\r\nThis talk is an introduction to the big data processing using Apache Hadoop and Python. We'll talk about Apache Hadoop, it's concepts, infrastructure and how one can use Python with it. We'll compare the speed of Python jobs under different Python implementations, including CPython, PyPy and Jython and also discuss what Python libraries are available out there to work with Apache Hadoop.\r\n\r\nThis talk is intended for beginners who want to know about Hadoop and Python or those who are already working with Hadoop but are wondering how to use it with Python or how to speed up their Python jobs."], "have_tickets": [true], "title": "Big Data with Python & Hadoop", "speakers": "Max Tepkeev", "track_title": "Google Room", "timerange": "2015-07-24 11:45:00, 2015-07-24 12:30:00", "duration": 45, "tags": ["bigdata", "jython", "hadoop", "cpython", "etl", "PyPy"]}, "94": {"id": 94, "abstracts": ["Python is a powerful language that provides many tools for creating highly dynamic programs. It offers tools all across the complexity spectrum that library authors can use to make their libraries seem convenient to use for users.\r\n\r\nWhile it's true that there are a wealth of techniques with huge positive benefits, there are a number of common antipatterns which can deceptively cause a net-loss in flexibility, readability, and predictability for users.\r\n\r\nWe'll explore a few specific commonalities in this area of library and object API design, and talk about the ramifications they have on each of these programmer concerns."], "have_tickets": [true], "title": "Just Because You Can, Doesn't Mean You Should", "speakers": "Julian Berman", "track_title": "PythonAnywhere Room", "timerange": "2015-07-24 12:30:00, 2015-07-24 13:15:00", "duration": 45, "tags": ["case study", "Best Practice"]}, "306": {"id": 306, "abstracts": ["At Spotify, my team struggled to be awesome.  We had a very loose understanding of what product/service our squad was responsible for, and even less so of the expectations our internal and external customers had for those services.  Other than \u201cdoes our Facebook login work?\u201d, we had no understanding of how our services we\u2019re responsible for were doing.  How many users actually sign up or log in with Facebook? How many users have connected their Spotify account with their Uber account?  Do folks even use Spotify with Uber?  \r\n\r\nWith a 2-month challenge period, my squad and I focused inward to establish those unanswered questions and to establish feedback loops and always-on dashboards.  This talk will tell the story of how we chose which metrics are important for us to focus on, what technologies we have used and are using, and how we\u2019ve iterated over our feedback loops to fine-tune what metrics we care about.  "], "have_tickets": [true], "title": "Metrics-driven development", "speakers": "Lynn Root", "track_title": "Google Room", "timerange": "2015-07-20 15:15:00, 2015-07-20 15:45:00", "duration": 30, "tags": ["servers", "metrics", "technologies", "real-time", "logging"]}, "164": {"id": 164, "abstracts": ["Rust is a new programming language from Mozilla. It is fast, safe and beautiful. It is also a very good option when needing performance. In this talk we're going to look at Rust and see what it offers and how we can leverage it as Python developers. And we'll do it with a case study: a statistical profiler for Python."], "have_tickets": [true], "title": "Can Rust make Python shine?", "speakers": "Dmitry Trofimov", "track_title": "Barria1 Room", "timerange": "2015-07-20 14:30:00, 2015-07-20 15:15:00", "duration": 45, "tags": ["performance", "profiling", "rust"]}, "140": {"id": 140, "abstracts": ["In this talk we would like to have a short introduction on how Python\r\nprograms are compiled and executed, with a special attention towards\r\njust in time compilation done by PyPy. PyPy is the most advanced Python\r\ninterpreter around and while it should generally just speed up your programs\r\nthere is a wide range of performance that you can get out of PyPy, ranging from\r\nslightly faster than CPython to C speeds, depending on how you write your\r\nprograms.\r\n\r\nWe will split the talk in two parts. In the first part we will explain\r\nhow things work and what can and what cannot be optimized as well as describe\r\nthe basic heuristics of JIT compiler and optimizer. In the next part we will\r\ndo a survey of existing tools for looking at performance of Python programs\r\nwith specific focus on PyPy.\r\n\r\nAs a result of this talk, an audience member should be better equipped with\r\ntools how to write new software and improve existing software with performance\r\nin mind.\r\n\r\nThe talk will be given by Antonio Cuni and Maciej Fijalkowski,\r\nboth long time PyPy core developers and expert in the area of\r\nPython performance.", "", ""], "have_tickets": [true], "title": "Python and PyPy performance (not) for dummies", "speakers": "Antonio Cuni", "track_title": "PythonAnywhere Room", "timerange": "2015-07-21 15:15:00, 2015-07-21 16:15:00", "duration": 60, "tags": ["profiling", "performance", "PyPy", "JIT"]}}, "Trainings": {"262": {"id": 262, "abstracts": ["The value that search functionality can add to a website is often underestimated, and many people fear that it is too complex or complicated. At the same time, it\u2019s not clear to many developers what a good search implementation should do.\r\n\r\nIn short, many developers - and the users of their websites - are missing out on important benefits.\r\n\r\nThis workshop will help them over the first hurdles to a solid search implementation using Django and Elasticsearch. It will cover basic steps like syncing the models to a search engine and setting up search views, as well as more advanced functionality such as faceted navigation.\r\n\r\nHonza will explain how search works and guide people through the process of customising their search and setting up analytics based on the data in their apps.", "", ""], "have_tickets": [true], "title": "Don't be afraid to search", "speakers": "Honza Kr\u00e1l", "track_title": "", "timerange": "2015-07-23 14:30:00, 2015-07-23 17:30:00", "duration": 180, "tags": ["search", "django", "elasticsearch", "databases"]}, "323": {"id": 323, "abstracts": ["If you want to get data from the web, and there are no APIs available, then you need to use web scraping! Scrapy is the most effective and popular choice for web scraping and is used in many areas such as data science, journalism, business intelligence, web development, etc.\r\n\r\nThis workshop will provide an overview of Scrapy, starting from the fundamentals and working through each new topic with hands-on examples.\r\n\r\nParticipants will come away with a good understanding of Scrapy, the principles behind its design, and how to apply the best practices encouraged by Scrapy to any scraping task.\r\n\r\nGoals:\r\n\r\n - Set up a python environment.\r\n - Learn basic concepts of the Scrapy framework.\r\n\r\n", "", ""], "have_tickets": [true], "title": "Scrapy Workshop", "speakers": "Juan Riaza", "track_title": "", "timerange": "2015-07-24 14:30:00, 2015-07-24 17:30:00", "duration": 180, "tags": ["scrapy", "python", "open-source", "scraping"]}, "207": {"id": 207, "abstracts": ["Optimization can often help to make Python programs faster or use less memory.\r\nDeveloping a strategy, establishing solid measuring and visualization techniques\r\nas well as knowing about algorithmic basics and datastructures are the foundation\r\nfor a successful optimization. The tutorial will cover these topics.\r\nExamples will give you a hands-on experience on how to approach efficiently.\r\n\r\n*Audience*: Programmers with good basic Python knowledge. No previous\r\nknowledge in the field of optimization is required.\r\n\r\n*Objectives*: This tutorial will help you to get the most out of your optimization work.\r\nYou will learn useful techniques for details combined with an overall strategy\r\nfor the big picture.\r\n\r\n*Detailed Abstract*: Python is a great language. But it can be slow compared to other languages for certain types of tasks. If applied appropriately, optimization may reduce program runtime or memory consumption considerably. But this often comes at a price. Optimization can be time consuming and the optimized program may be more complicated. This, in turn, means more maintenance effort. How do you find out if it is worthwhile to optimize your program? Where should you start?\r\nThis tutorial will help you to answer these questions. You will learn how to find  an optimization strategy based on quantitative and objective criteria.\r\nYou will experience that one's gut feeling what to optimize is often wrong.\r\n\r\nThe solution to this problem is: \u201eMeasure, Measure, and Measure!\u201c. You will\r\nlearn how to measure program run times as well as profile CPU and memory.\r\nThere are great tools available. You will learn how to use some of them.\r\nMeasuring is not easy because, by definition, as soon as you start to measure,\r\nyou influence your system. Keeping this impact as small as possible is\r\nimportant. Therefore, we will cover different measuring techniques.\r\n\r\nFurthermore, we will look at algorithmic improvements. You will see that the\r\nright data structure for the job can make a big difference. Finally, you will\r\nlearn about different caching techniques.\r\n\r\n*More Info*: You will need Python 2.7 or 3.4 installed on your laptop. Python 2.6 or 3.3 should also work. Very detailed installation instructions will be given to all participants well before the course.", "Optimization can often help to make Python programs faster or use less memory.\r\nDeveloping a strategy, establishing solid measuring and visualization techniques\r\nas well as knowing about algorithmic basics and datastructures are the foundation\r\nfor a successful optimization. The tutorial will cover these topics.\r\nExamples will give you a hands-on experience on how to approach efficiently.\r\n\r\n### Audience\r\n\r\nProgrammers with good basic Python knowledge. No previous\r\nknowledge in the field of optimization is required.\r\n\r\n### Objectives\r\n\r\nThis tutorial will help you to get the most out of your optimization work.\r\nYou will learn useful techniques for details combined with an overall strategy\r\nfor the big picture.\r\n\r\n### Detailed Abstract\r\n\r\nPython is a great language. But it can be slow compared to other languages\r\nfor certain types of tasks. If applied appropriately, optimization may reduce\r\nprogram runtime or memory consumption considerably. But this often comes at a\r\nprice. Optimization can be time consuming and the optimized program may be more\r\ncomplicated. This, in turn, means more maintenance effort. How do you find\r\nout if it is worthwhile to optimize your program? Where should you start?\r\nThis tutorial will help you to answer these questions. You will learn how\r\nto find  an optimization strategy based on quantitative and objective criteria.\r\nYou will experience that one's gut feeling what to optimize is often wrong.\r\n\r\nThe solution to this problem is: \u201eMeasure, Measure, and Measure!\u201c. You will\r\nlearn how to measure program run times as well as profile CPU and memory.\r\nThere are great tools available. You will learn how to use some of them.\r\nMeasuring is not easy because, by definition, as soon as you start to measure,\r\nyou influence your system. Keeping this impact as small as possible is\r\nimportant. Therefore, we will cover different measuring techniques.\r\n\r\nFurthermore, we will look at algorithmic improvements. You will see that the\r\nright data structure for the job can make a big difference. Finally, you will\r\nlearn about different caching techniques.\r\n\r\n\r\n### Outline\r\n\r\n* How Fast is Fast Enough? (5 min)\r\n* Optimization Guidelines and Strategy  (10 min)\r\n* Measuring run time\r\n    * ``time``, ``timeit``, decorators for timing (5 min)\r\n    * Wall Clock vs. CPU Time (2 min)\r\n* Profiling CPU Usage\r\n    * cProfile (10 min)\r\n    * A Picture is Worth a Thousand Words\r\n        * RunSnakeRun (5 min)\r\n        * SnakeViz (5 min)\r\n        * Cachegrind (5 min)\r\n    * Going Line-by-Line (5 min)\r\n    * Exercise (10 min)\r\n* Profiling Memory Usage\r\n    * Heapy (5 min)\r\n    * Pympler (5 min)\r\n    * Memory Usage Line-by-Line with memory_profiler (5 min)\r\n    * Exercise (10 min)\r\n* Algorithms and Anti-patterns\r\n    * String Concatenation (3 min)\r\n    * List and Generator Comprehensions (5 min)\r\n    * Think Global buy Local (5 min)\r\n    * Exercise (5 min)\r\n* The Right Data Structure\r\n    * Use built-in Data Types (2 min)\r\n    * ``list`` vs. ``set`` (3 min)\r\n    * ``list`` vs. ``deque`` (5 min)\r\n    * ``dict`` vs. ``defaultdict`` (5 min)\r\n    * Big-O notation and Data Structures (5 min)\r\n    * O(1) vs. O(n) vs. O(n) (5 min)\r\n    * Exercise (15 min)\r\n* Caching\r\n    * Reuse before You Recalculate (5 min)\r\n    * Deterministic caching (5 min)\r\n    * Non-deterministic caching (5 min)\r\n    * Least Recently Used Cache (5 min)\r\n    * Memcached (5 min)\r\n    * Exercise (10 min)\r\n\r\n### More Info\r\n\r\nYou will need Python 2.7 or 3.4 installed on your laptop. Python 2.6 or 3.3\r\nshould also work. Very detailed installation instructions will be given to all participants well before the course.\r\n", ""], "have_tickets": [true], "title": "Faster Python Programs - Measure, don't Guess", "speakers": "Mike M\u00fcller", "track_title": "", "timerange": "2015-07-24 14:30:00, 2015-07-24 17:30:00", "duration": 180, "tags": ["optimization", "profiling"]}, "28": {"id": 28, "abstracts": ["Tutorial interactivo, en *espa\u00f1ol*, y muy divertido para la gente, con los conceptos b\u00e1sicos de programaci\u00f3n en alguna otra lenguaje, y que no saben nada de Python. Vamos a hackear fotos de amigos de Facebook y tambi\u00e9n hackear m\u00f3dulos b\u00e1sicos y clases para obtener la \"respuesta a la \u00faltima pregunta de la vida, el universo, y todo\". Este tutorial asume que usted tiene algunos pocos conceptos b\u00e1sicos (entrada de dados, salida de dados, operadores booleanos, control de flujo, funciones, repeticiones). Vamos a cubrir, en Python 3.x: 1. El modo interactivo de Python 2. Variaciones en el juego de adivinar un n\u00famero aleat\u00f3rio 3. Hackear m\u00f3dulos b\u00e1sicos y clases para obtener la \"respuesta a la \u00faltima pregunta de la vida, el universo, y todo\". 4. Hacking de las fotos de los amigos de Facebook sin OAuth 5. Chuck Norris Nerd chistes y partidos de la Copa Mundial en seis l\u00edneas de c\u00f3digo. 6. Prueba  selectiva del Hackaton Facebook en una l\u00ednea de c\u00f3digo. Nota importante: No soy un gur\u00fa de Python, s\u00f3lo un maestro apasionado!"], "have_tickets": [true], "title": "Python para Iniciantes (ESPA\u00d1OL)", "speakers": "Fernando Masanori Ashikaga", "track_title": "", "timerange": "2015-07-21 11:00:00, 2015-07-21 13:30:00", "duration": 150, "tags": ["iniciante", "programaci\u00f3n", "divertido"]}, "110": {"id": 110, "abstracts": ["Many programming paradigms are reaching us nowadays bringing the promise of being faster by leveraging more cores and more machines (and more system administration headaches, but this is rarely stated).  Reality is that many times these paradigms do not take in account the increasing mismatch between memory speed and CPUs (see http://www.blosc.org/docs/StarvingCPUs-CISE-2010.pdf), and this is becoming utterly critical so as to get maximum performance out of your data handling applications.\r\n\r\nDuring my tutorial, I will introduce different data containers for handling different kind of data and will propose experimenting with them while explaining why some adapts better to the task at hand.  I will start with a quick introduction for Python data containers (lists, dicts, arrays...), continuing with well-known in-memory NumPy and Pandas containers as well as on-disk HDF5/PyTables and ending with bcolz (https://github.com/Blosc/bcolz), a novel way to store and quickly retrieve data which uses chunking and compression techniques so as to leverage the memory hierarchy of modern computer architectures.\r\n\r\nPeople attending will need a working Python setup with IPython notebook, NumPy, pandas, PyTables and bcolz installed.  Anaconda or Enthought Canopy distributions are recommended, but any other means of installing (e.g. pip) will do.", "", ""], "have_tickets": [true], "title": "Efficient Memory/Disk Data Containers With Python", "speakers": "Francesc Alted", "track_title": "", "timerange": "2015-07-22 11:00:00, 2015-07-22 13:30:00", "duration": 150, "tags": ["python", "data-science", "bigdata", "ipython", "open-source", "databases", "data"]}, "299": {"id": 299, "abstracts": ["This tutorial will offer a hands-on introduction to machine learning and the process of applying these concepts in a Kaggle competition. We will introduce attendees to machine learning concepts, examples and flows,  while building up their skills to solve an actual problem. At the end of the tutorial attendees will be familiar with a real data science flow: feature preparation, modeling, optimization and validation. \r\n\r\nPackages used in the tutorial will include: IPython notebook, scikit-learn, pandas and nltk. We'll use IPython notebook for interactive exploration and visualization, in order to gain a basic understanding of what's in the data. From there, we'll extract features and train a model using scikit-learn. This will bring us to our first submission. We'll then learn how to structure the problem for offline evaluation and use scikit-learn's clean model API to train many models simultaneously and perform feature selection and hyperparameter optimization.\r\n\r\nAt the end of session, attendees will have time to work on their own to improve their models and make multiple submissions to get to the top of the leaderboard, just like in a real competition. Hopefully attendees will not only leave the tutorial having learned the core data science concepts and flow, but also having had a great time doing it.\r\n"], "have_tickets": [true], "title": "Beginner's Guide to Machine Learning Competitions", "speakers": "Christine Doig", "track_title": "", "timerange": "2015-07-20 14:30:00, 2015-07-20 17:30:00", "duration": 180, "tags": ["python", "competitions", "data-science", "machine-learning", "nltk", "predictions", "ipython-notebook", "ipython", "pandas", "natural-language-processing", "open-source", "sklearn"]}, "320": {"id": 320, "abstracts": ["[asyncio][1] is relative new library for asynchronous network programming.\r\n\r\n\r\n\r\nOn training session newcomers will learn how to:\r\n\r\n* develop asyncio-based WEB applications with help of aiohttp library and siblings\r\n* write tests for asynchronous code\r\n* make tiny but revealing asyncio library which shows all design concepts required for making good product for asyncio code\r\n\r\nA lot of tips and tricks will be explained. Development for asyncio is really easy (much easier than [Tornado][2] and [Twisted][3] coding) but requires to change you mind a bit.\r\n\r\n  [1]: http://docs.python.org/3/library/asyncio.html\r\n  [2]: http://www.tornadoweb.org/\r\n  [3]: http://twistedmatrix.com"], "have_tickets": [true], "title": "Mastering asyncio applications", "speakers": "Andrew Svetlov", "track_title": "", "timerange": "2015-07-21 14:30:00, 2015-07-21 17:30:00", "duration": 180, "tags": ["HTTP", "aiohttp", "aiopg", "aioredis", "asyncio", "network"]}, "9": {"id": 9, "abstracts": ["Do you like playing lego? Do you want to know how Scrum works? Why not to combine having fun & learning? \r\n\r\nDuring my workshops you will get familiar with Scrum ceremonies by building a Lego city. In your team you will have a Scrum Master who should help you with a demanding Product Owner who will be me. \r\n\r\nCan you manage my requirements? Can you finish the sprint? Can you build the city I'm dreaming about? Try yourself and get Scrum experience!", "", ""], "have_tickets": [true], "title": "Lego for Scrum", "speakers": "Anna Kierczy\u0144ska", "track_title": "", "timerange": "2015-07-22 14:30:00, 2015-07-22 17:30:00", "duration": 180, "tags": ["lego", "management", "agile", "fun", "scrum"]}, "291": {"id": 291, "abstracts": ["**Description:** Over the course of the 2.5 hours of this workshop you will learn how to leverage both Python and MongoDB to build highly scalable, asynchronous applications based on microservices architecture. We will be building from scratch several different \"exotic\" services, using a variety of datasets, that together we can mashup into a consolidated application using our own laptops. \r\n\r\nWe will start by introducing several  technologies that we will be using (e.g. Python, Flask, MongoDB, AngularJS) and take a ten-thousand foot  overview of micro services architecture.\r\nIn the second half of the workshop, we will break into teams that will each take charge in implementing a microservice that will comprise our final application. \r\n\r\nThis a fully hands-on workshop.\r\n\r\n**Learning objectives:** \r\n\r\n - Benefits of microservice architectures\r\n\r\n - MongoDB schema design \r\n\r\n - MongoDB query optimization and profiling \r\n\r\n - Basic understanding of AngularJS \r\n\r\n - Flask as REST API platform\r\n\r\n**Target Audience:**\r\nThis workshop is recommended to software developers eager to understand more about MongoDB and how to build async calls. Coding skills and basic understanding of Python is required. Prior experience with AngularJS and Flask is welcomed.\r\n\r\n**Technical Requirement:**\r\nThe attendee should bring their own laptop with MongoDB and Python (>2.7) installed. One should have administration grants over their system because we will need to expose ports and other communications to the network. The datasets and project instructions will be provided on site.\r\n\r\n"], "have_tickets": [true], "title": "Building Async Microservices", "speakers": "Norberto Leite", "track_title": "", "timerange": "2015-07-22 11:00:00, 2015-07-22 13:30:00", "duration": 150, "tags": ["AngularJS", "mongodb", "flask", "api", "Microservices"]}, "292": {"id": 292, "abstracts": ["The aim is to cover the basics of setting up a simple Django site, but using full, rigorous TDD at every step along the way.\r\n\r\nThe tutorial is based on the first few chapters of my book, which is available (for free!) online for you to follow up with after the session, so that you can embed what you've learned. [www.obeythetestinggoat.com](http://www.obeythetestinggoat.com)\r\n\r\nWe'll learn:\r\n\r\n - how to set up functional tests with Selenium\r\n - how to set up Django\r\n - how to run Django unit tests\r\n - how TDD actually works in practice: the unit test / code cycle where we re-run the tests after each tiny, incremental change to the code\r\n - all the basics of Django like views, models and templates.\r\n\r\nWe'll talk about what to test, what not to test, what the point of all this testing is anyway, you'll get a real hands-on feeling for how it works, and I promise to make it all at least moderately entertaining!\r\n\r\nAnd it's all in Python 3 :)\r\n\r\n**Please come prepared!**  you'll need:\r\n\r\n- Python 3.4\r\n- Firefox\r\n- Django 1.8\r\n- Selenium\r\n\r\nYou'll find full instructions [here](http://chimera.labs.oreilly.com/books/1234000000754/pr02.html) -- do email me if you have any problems, I'm happy to help. obeythetestinggoat@gmail.com", "", ""], "have_tickets": [true], "title": "TDD for web development, from scratch", "speakers": "Harry Percival", "track_title": "", "timerange": "2015-07-24 11:00:00, 2015-07-24 13:30:00", "duration": 150, "tags": ["tdd", "unit-testing", "selenium", "django", "python3", "Testing"]}, "326": {"id": 326, "abstracts": ["Do you know what happens every time you use the **@** symbol in Python? Do you know how to implement a decorator to be customisable at _decoration time_ or to internally store a state? \r\n\r\nAfter attending this training you will be able to answer _yes_ to all the previous questions!\r\n\r\nThe content of the session can be split in 3 main blocks:\r\n\r\n - 1/ Some Python basic concepts\r\n  - Scopes\r\n  - Namespaces\r\n  - Closures\r\n - 2/ Implement and understand a basic decorator\r\n - 3/ Advanced decorators\r\n  - Generators of decorators\r\n  - Classes as decorators\r\n  - Decoration of classes\r\n\r\nRequirements:\r\n\r\n - **Intermediate Python level**. Attendees must have previous knowledge of Python and should be somehow familiar with the notation @ to decorate a function or class.\r\n - Bring **your own laptop** with Python installed and ready to solve some coding exercises.\r\n\r\nPS: I also submitted a talk proposal which partially covers the first part of the training: [https://ep2015.europython.eu/conference/talks/decorators-demystified][1]\r\n\r\n  [1]: https://ep2015.europython.eu/conference/talks/decorators-demystified\r\n", "", ""], "have_tickets": [true], "title": "Python decorators in detail", "speakers": "Pablo Enfedaque", "track_title": "", "timerange": "2015-07-24 11:00:00, 2015-07-24 13:30:00", "duration": 150, "tags": ["namespaces", "training", "python", "scopes", "decorators", "closures"]}, "373": {"id": 373, "abstracts": ["New to Python?  Come along to the beginners' day!  It\u2019s designed to give you a crash-course in Python, and the ecosystem around it, to give you the context you need to get the most out of EuroPython.  Suitable for total beginners, as well as people who already know a little programming.  Bring your laptop, as a large part of the day will be devoted to learning Python on your own PC.\r\n\r\n*This session will be presented in English (although a few of the coaches do speak basic Spanish, French and Italian).  Note there are also some Spanish-language Beginner sessions scheduled for day 2 of the conference.*\r\n\r\n**Morning:**\r\n\r\n - 11AM-11:30AM  Intro to Python and programming.\r\n - 11:30AM-1PM Self-directed learning with coaches. Tutorials provided for beginner and experienced programmers.\r\n - 1PM-1:30PM Q&A and recap\r\n\r\n**Afternoon:**\r\n\r\n - 3:15PM: Intro to the Python ecosystem: some topics and bits of jargon that are bound to come up this week: open source, free software, github, packages, pip, pypi, scientific computing, scipy, numpy, pandas, ipython notebook, web frameworks, django, flask, asyncio, the BDFL, the Zen of Python, etc etc.  What are the tools, areas of interest, in-jokes, people of note.\r\n - 4:30PM: More self-directed learning with coaches.\r\n - 5PM:  \"How to get the best out of the conference\" session -- suggested talks, tips on asking questions, FAQs like what are open spaces / sprints / birds-of-a-feather sessions, etc.\r\n\r\nWe need to get an idea of numbers for this session, so if you are interested in attending, please drop a quick email to obeythetestinggoat@gmail.com\r\n\r\n"], "have_tickets": [true], "title": "Beginners' Day", "speakers": "Harry Percival", "track_title": "Room B Terrace", "timerange": "2015-07-20 11:00:00, 2015-07-20 13:30:00", "duration": 180, "tags": ["python", "introduction"]}, "243": {"id": 243, "abstracts": ["Learn how to use docker-compose and docker to create a development environment that you can use to mimic your production environment. \r\n\r\nLearn how to:\r\n\r\n* create a Dockerfile\r\n  * What is a Docker File\r\n  * How to utilize Docker's caching to optimize docker build\r\n  * How to abstract common components to other docker images\r\n* use Docker-Hub\r\n  * create auto builds\r\n  * use web-hooks\r\n* use docker-compose\r\n  * When to use a prebuilt image vs building from scratch\r\n* deploy your container to a VM\r\n\r\nClass will be mostly informational. BUT you are encouraged to play along. \r\n\r\nHardware requirements: \r\n\r\n* Computer that can run VirtualBox. \r\n\r\nSoftware requirements:\r\n\r\n* Docker CLI 1.6+\r\n* Docker Machine (latest)\r\n* Docker Compose 1.2+\r\n\r\nIf you plan on playing along, please make sure that you have all these installed already. "], "have_tickets": [true], "title": "Intro to Web Development with Docker", "speakers": "Nick Lang", "track_title": "", "timerange": "2015-07-20 11:00:00, 2015-07-20 13:30:00", "duration": 150, "tags": ["web", "development-process", "docker", "Development"]}, "376": {"id": 376, "abstracts": ["Workshop time: 2:00pm - 7:00pm\r\n\r\nThis is a half-day version of the SRE Classroom event that has been run successfully at Google offices and conferences around the world. We expect this event to appeal to senior and experienced engineers.\r\n\r\nThe workshop problem will be a real-world large-scale engineering problem that requires some distributed-systems knowhow to tackle. Attendees will work in groups with Googlers on the problem, trying to come up with:\r\n\r\n - A high-level design that scales horizontally\r\n - Initial SLIs, SLOs\r\n - Estimates for hardware required to run each component\r\n - If time permits, monitoring design and disaster testing scenarios\r\n\r\nAttendees will be provided with a workbook that guides them through tackling a problem like this, with some worked examples, so junior attendees should be able to make progress and learn too. \r\n\r\nSign-up here (seats are limited.)", "", ""], "have_tickets": [true], "title": "SRE Classroom", "speakers": "Sidnei da Silva", "track_title": "Room B Terrace", "timerange": "2015-07-21 14:00:00, 2015-07-21 17:00:00", "duration": 180, "tags": ["cloud", "google", "class"]}, "105": {"id": 105, "abstracts": ["Become a data wrangler with Python! This course will introduce you to the core concepts of data analysis with Python. We'll cover libraries that allow you to easily clean and set up your initial dataset, importing data from all different file types and standards. We'll introduce some basic libraries to help with statistics and analysis and then cover how to document and explore your findings. \r\n\r\nIt's assumed you have a working understanding of Python and it's data types and structures, and that you've used and understand Python for basic scripting. It's also assumed you haven't done much in terms of data analysis, and you'd like to learn more. If this is you, welcome! ", "", ""], "have_tickets": [true], "title": "Introduction to Data Analysis", "speakers": "Katharine Jarmul", "track_title": "", "timerange": "2015-07-23 11:00:00, 2015-07-23 13:30:00", "duration": 150, "tags": ["Beginners", "scraping", "data-science", "analytics", "Database", "e-gov", "pandas", "api", "oauth2", "data", "Coding"]}, "130": {"id": 130, "abstracts": ["Transducers \u2013 a portmanteau of \u2018transform reducers\u2019 \u2013 are a new functional programming concept, which were first introduced into the Clojure programming language.  Although transducers are actually pretty straightforward in retrospect, wrapping your brain around them can be challenging. \r\n\r\nTransducers allow us to fuse multiple data processing operations together so they can be applied in a single pass over a data series \u2013 similar to how Python generator functions allow us to process iterable series.  However, unlike generator functions they are completely decoupled from the data series abstraction and can be used on eager sequences, lazy iterables, coroutine-based push events and events such as those modelled by Reactive Extensions for Python (RxPy). \r\n\r\nIn this workshop, we introduce transducers by implementing them from scratch in Python 3. We\u2019ll start with the familiar staples of functional programming, map(), filter() and reduce(), and derive transducers from first principles. We\u2019ll work towards a set of general tools which works with eager collections, lazy \u2018pull\u2019 sequences, and coroutine \u2018push\u2019 event streams and RxPy. Along the way we\u2019ll cover stateful transducers and transducer composition, demonstrating that transducers are both more general, and more fundamental, than the functional programming tools baked into Python and many other languages.\r\n\r\nThere are no prerequisites for this workshop as we stick to core Python 3 language features although an enthusiasm for a functional programming style will be sure to help attendees get the most out of this session.", "", ""], "have_tickets": [true], "title": "Functional Programming with Transducers in Python", "speakers": "Austin Bingham", "track_title": "Room A4", "timerange": "2015-07-23 14:30:00, 2015-07-23 17:30:00", "duration": 180, "tags": ["python", "functional", "fun", "Functional Programming"]}, "331": {"id": 331, "abstracts": ["It is very hard to be a scientist without knowing how to write code, \r\nand nowadays **Python** is probably the programming language of \r\nchoice in many research fields.\r\nThis is mainly because the Python ecosystem includes a lot of tools and libraries \r\nfor many research tasks:  `pandas` for *data analysis* , \r\n`networkx` for *social network analysis*,  `nltk` for *natural language processing*,\r\n`scikit-learn` for *machine learning*, and so on.\r\n\r\nMost of these libraries relies (or are built on top of) `numpy`.\r\nTherefore, `numpy` is a crucial component of the common Python\r\nstack used for numerical analysis and data science.\r\n\r\nOn the one hand, NumPy code tends to be much cleaner (and faster) than \r\n\"straight\" Python code that tries to accomplish the same task. \r\nMoreover, the underlying algorithms have \r\nbeen designed with high performance in mind.\r\n\r\nThis training will be organised in two parts: the first part is \r\nintended to provide most of the essential concepts \r\nneeded to become confident with NumPy data structures and functions.\r\n\r\nIn the second part, some examples of data analysis libraries and code\r\nwill be presented, where NumPy takes a central role.\r\n\r\nHere is a list of software used to develop and test the code examples presented\r\nduring the training:\r\n\r\n* Python 3.x (2.x would work as well)\r\n* iPython 2.3+ (with **notebook support**): `pip install ipython[notebook]`\r\n* numpy 1.9+\r\n* scipy 0.14+\r\n* scikit-learn 0.15+\r\n* pandas 0.8+\r\n\r\nThe training is meant to be mostly introductory, thus it is perfectly suited\r\nfor **beginners**. However, a good proficiency in Python programming is (at least)\r\nrequired."], "have_tickets": [true], "title": "Numpy arrays: the weapons of a data scientist", "speakers": "Valerio Maggio", "track_title": "", "timerange": "2015-07-21 11:00:00, 2015-07-21 13:30:00", "duration": 150, "tags": ["scipy", "numpy", "data-science", "analytics"]}, "175": {"id": 175, "abstracts": ["The py.test tool presents a rapid and simple way to write tests for your Python code.  This training gives a quick introduction with exercises into some distinguishing features. We'll do exercises where we get existing non-pytest test suites to run with pytest and discuss migration strategies.  We'll finish with discussing topics and questions of participants related to their own test suites and usages.\r\n\r\nThis is the planned outline:\r\n\r\n- (30 minutes) pytest feature walkthrough: automatic test discovery, assert\r\n  statement, modular parametrizable fixtures, 150 plugins\r\n\r\n- (60 minutes) pytest fixture mechanism: dependency injection, declaring\r\n  and using function/module/session scoped fixtures, using fixtures\r\n  from fixture functions, parametrizing fixtures.  Exercises.\r\n\r\n- (30 minutes): running nose/unittest/trial/Django suites with pytest.\r\n  Discussing advantages and limitations.  Exercise with a select\r\n  existing real-life open source project.\r\n\r\n- (30 minutes): Strategies for a) migrating to pytest  b) using\r\n  \"autouse\" fixtures in conjunction with XUnit-based\r\n  setup/tearodwn methods.  Exercise.\r\n\r\n- (30 minutes): open space for questions and interactively solving\r\n  pytest/unittest integration problems on real-life problems\r\n  as time permits.\r\n", "", ""], "have_tickets": [true], "title": "pytest - simple, rapid and fun testing with Python", "speakers": "Florian Bruhin", "track_title": "", "timerange": "2015-07-20 14:30:00, 2015-07-20 17:30:00", "duration": 180, "tags": ["automation", "test", "pytest"]}, "120": {"id": 120, "abstracts": ["[OpenStack][1] es un conjunto de herramientas de software que permiten la construcci\u00f3n y mantenimiento de plataformas de _cloud computing_ para nubes p\u00fablicas y privadas. Permite a sus usuarios desplegar m\u00e1quinas virtuales y otras instancias que manejan diferentes tareas para la administraci\u00f3n de un entorno de _cloud computing_ _on the fly_. Considerando la complejidad de la arquitectura del c\u00f3digo que hace de esto una realidad, establecer el entorno de desarrollo y comenzar a contribuir puede ser una tarea agobiante.\r\n\r\nPero empezar a ser un contribuyente no deber\u00eda ser un proceso dif\u00edcil si comienzas con el pie derecho. Hay algunos detalles que, si los pudieras conocer de antemano, har\u00edan que dar tus primeros pasos no sea una tarea tan complicada.\r\n\r\nEn esta presentaci\u00f3n daremos una explicaci\u00f3n breve de cu\u00e1les son las herramientas usadas por la comunidad de OpenStack y c\u00f3mo debes configurarlas para empezar a contribuir. Adem\u00e1s cubriremos c\u00f3mo el proceso de desarrollo funciona, incluyendo c\u00f3mo encontrar y arreglar un _bug_, c\u00f3mo hacer una nueva propuesta de desarrollo, c\u00f3mo probar tus cambios antes de enviar un parche y c\u00f3mo funciona el proceso de revisi\u00f3n.\r\n\r\nHaremos todo esto usando un _script_ que automatiza el despliege del entorno de desarrollo llamado [DevStack][2]. Mientras que el _script_ es ejecutado y descarga/configura todas las dependencias, explicaremos cada uno de los pasos para empezar a contribuir. Finalmente, con el entorno de desarrollo listo, repasaremos las listas de bugs y empezaremos a analizar el c\u00f3digo.\r\n\r\nPara el final del taller, tendr\u00e1s todos las herramientas y conocimientos necesarios para poder comenzar a contribuir a un proyecto de OpenStack.\r\n\r\nRequerimientos m\u00ednimos: Procesador de 1 gigahertz (GHz) o m\u00e1s 32-bit (x86) o 64-bit (x64), 4GB RAM, 10GB HD\r\nRequerimientos recomendados: Procesador de 1 gigahertz (GHz) o m\u00e1s 32-bit (x86) o 64-bit (x64), 8GB RAM, 20GB HD\r\n\r\nTambi\u00e9n aconsejamos que los participantes tengan una herramienta de virtualizaci\u00f3n preinstalada y, si es posible, que inicien una instancia con Ubuntu 14.04 LTS.\r\n\r\n  [1]: https://www.openstack.org/\r\n  [2]: http://docs.openstack.org/developer/devstack/", "", ""], "have_tickets": [true], "title": "Manos a la obra con OpenStack: La gu\u00eda paso a paso para comenzar a contribuir a OpenStack", "speakers": "Victoria Martinez de la Cruz", "track_title": "", "timerange": "2015-07-21 14:30:00, 2015-07-21 17:30:00", "duration": 180, "tags": ["python", "cloud", "open-source", "linux", "OpenStack"]}, "202": {"id": 202, "abstracts": ["A workshop introducing participants to physical computing with Python and Raspberry Pi.\r\n\r\nLearn how to build applications with Python that interact with the physical world - using the Pi's GPIO (general purpose input & output) pins and its camera module and their respective Python libraries.\r\n\r\nWe'll start simple - flashing LEDs, using push buttons, basic use of the camera module, then introduce sensors such as infra-red motion detectors, temperature sensors and light sensors, then we'll build interactive applications (embedded apps, desktop apps and web apps) using the sensors and camera module for a variety of different purposes.\r\n\r\nEmbedded or physical computing is not just for C programmers or hardcore Linux engineers - I'll show you how to get up and running with your first physical world application and show how easy it is to control GPIOs and the camera module from the language you know and love (and can read). This will prepare you for making your own hardware project idea a reality - build a security system, a robot or a home automation system.\r\n\r\nThis workshop is well suited to beginners with a basic understanding of Python code, but is also suitable for those more experienced with Python but with little or no experience with physical computing.", "", ""], "have_tickets": [true], "title": "Explore physical computing with Python and Raspberry Pi", "speakers": "Ben Nuttall", "track_title": "", "timerange": "2015-07-23 14:30:00, 2015-07-23 17:30:00", "duration": 180, "tags": ["education", "raspberrypi"]}, "171": {"id": 171, "abstracts": ["This tutorial explores some real-world  solutions to make your Python code run on different processes, possibly on different computers. \r\n\r\nTools like Pyro, Celery, Python-RQ  will be discussed.  Ways to run your Python code on a supercomputer/cluster using a batch job scheduler and packages for local parallelism such as multiprocessing and concurrent.futures will be  touched upon as well. \r\n\r\nThe emphasis is on practical examples  and lessons learned. The assumption is that the attendee is familiar with Python and basic OOP concepts.", "", ""], "have_tickets": [true], "title": "Distributed Programming With Python", "speakers": "Francesco Pierfederici", "track_title": "", "timerange": "2015-07-23 11:00:00, 2015-07-23 13:30:00", "duration": 150, "tags": ["redis", "amqp", "distributed-systems", "performance", "concurrency", "computing", "cloud", "rabbitmq", "celery"]}, "153": {"id": 153, "abstracts": ["Highly-constrained, large-dimensional, and non-linear optimizations are found at the root of most of today\u2019s forefront problems in statistics, quantitative finance, risk, operations research, materials design, and other predictive sciences. Tools for optimization, however, have not changed much in the past 40 years -- until very recently. The abundance of parallel computing resources has stimulated a shift away from using reduced models to solve statistical and predictive problems, and toward more direct methods for solving high-dimensional nonlinear optimization problems.\r\n\r\nThis tutorial will introduce modern tools for solving optimization problems -- beginning with traditional methods, and extending to solving high-dimensional non-convex optimization problems with highly nonlinear constraints. We will start by introducing the cost function, and it\u2019s use in local and global optimization. We will then address how to monitor and diagnose your optimization convergence and results, tune your optimizer, and utilize compound termination conditions. This tutorial will discuss building and applying box constraints, penalty functions, and symbolic constraints. We will then demonstrate methods to efficiently reduce search space through the use of robust optimization constraints.  Real-world inverse problems can be expensive, thus we will show how to enable your optimization to seamlessly leverage parallel computing. Large-scale optimizations also can greatly benefit from efficient solver restarts and the saving of state. This tutorial will cover using asynchronous computing for results caching and archiving, dynamic real-time optimization, and dimensional reduction. Next we will discuss new optimization methods that leverage parallel computing to perform blazingly-fast global optimizations and n-dimensional global searches. Finally, we will close with applications of global optimization in statistics and quantitative finance.\r\n\r\nThe audience need not be an expert in optimization, but should have interest in solving hard real-world optimization problems.  We will introduce the [_mystic_][1] optimization framework -- then begin with a walk through some introductory optimizations, learning how to build confidence in understanding your results. By the end of the tutorial, participants will have working knowledge of how to use modern constrained optimization tools, how to enable their solvers to leverage high-performance parallel computing, and how to utilize legacy data and surrogate models in statistical and predictive risk modeling.\r\n\r\n*PREREQUISITES*: This tutorial will assume attendees have basic knowledge of _python_ and _numpy_, and is intended for scientific developers who are interested in utilizing optimization to solve real-world problems in statistics, quantitative finance, and predictive sciences. The tutorial will require _python_, _numpy_, and _mystic_ to be installed, and optionally installs of _matplotlib_, _scipy_, _pathos_, and _klepto_. All packages can be installed under _Anaconda_ or _Canopy_, or with _setuptools_ or _pip_.\r\n\r\n  [1]: https://github.com/uqfoundation\r\n", "Highly-constrained, large-dimensional, and non-linear optimizations are found at the root of most of today\u2019s forefront problems in statistics, quantitative finance, risk, operations research, materials design, and other predictive sciences. Tools for optimization, however, have not changed much in the past 40 years -- until very recently. The abundance of parallel computing resources has stimulated a shift away from using reduced models to solve statistical and predictive problems, and toward more direct methods for solving high-dimensional nonlinear optimization problems.\r\n\r\nThis tutorial will introduce modern tools for solving optimization problems -- beginning with traditional methods, and extending to solving high-dimensional non-convex optimization problems with highly nonlinear constraints. We will start by introducing the cost function, and it\u2019s use in local and global optimization. We will then address how to monitor and diagnose your optimization convergence and results, tune your optimizer, and utilize compound termination conditions. This tutorial will discuss building and applying box constraints, penalty functions, and symbolic constraints. We will then demonstrate methods to efficiently reduce search space through the use of robust optimization constraints.  Real-world inverse problems can be expensive, thus we will show how to enable your optimization to seamlessly leverage parallel computing. Large-scale optimizations also can greatly benefit from efficient solver restarts and the saving of state. This tutorial will cover using asynchronous computing for results caching and archiving, dynamic real-time optimization, and dimensional reduction. Next we will discuss new optimization methods that leverage parallel computing to perform blazingly-fast global optimizations and n-dimensional global searches. Finally, we will close with applications of global optimization in statistics and quantitative finance.\r\n\r\nThe audience need not be an expert in optimization, but should have interest in solving hard real-world optimization problems.  We will introduce the [_mystic_][1] optimization framework -- then begin with a walk through some introductory optimizations, learning how to build confidence in understanding your results. By the end of the tutorial, participants will have working knowledge of how to use modern constrained optimization tools, how to enable their solvers to leverage high-performance parallel computing, and how to utilize legacy data and surrogate models in statistical and predictive risk modeling.\r\n\r\nintroduction to optimization (30 min)\r\n-------------------------------------\r\n - the cost function\r\n - local and global optimization\r\n - monitoring and diagnosing convergence and optimization results\r\n - solver tuning and compound termination conditions\r\n - Exercise(s)\r\n\r\npenalty functions and constraints (30 min)\r\n------------------------------------------\r\n - box constraints\r\n - applying penalty functions\r\n - reducing search space with constraints\r\n - applying symbolic constraints\r\n - Exercise(s)\r\n\r\nleverage asynchronous and parallel computing (30 min)\r\n-----------------------------------------------------\r\n - parallel function evaluations and solver iterations \r\n - solver restarts and saving state\r\n - dynamic real-time optimization\r\n - automated dimensional reduction\r\n - Exercise(s)\r\n\r\nensemble optimization and global searches (30 min)\r\n--------------------------------------------------\r\n - blazingly-fast global optimization\r\n - using global search to find all minima, maxima, and turning points\r\n - building a surrogate model through optimal surface interpolation\r\n - Exercise(s)\r\n\r\noptimization in parameter sensitivity, statistics, and risk modeling (30 min)\r\n-----------------------------------------------------------------------------\r\n - the cost metric\r\n - statistical and probabilistic constraints\r\n - information constraints from surrogate models and legacy data\r\n - application to quantitative finance and statistics\r\n - Exercise(s)\r\n\r\nPREREQUISITES:\r\nThis tutorial will assume attendees have basic knowledge of _python_ and _numpy_, and is intended for scientific developers who are interested in utilizing optimization to solve real-world problems in statistics, quantitative finance, and predictive sciences. The tutorial will require _python_, _numpy_, and _mystic_ to be installed, and optionally installs of _matplotlib_, _scipy_, _pathos_, and _klepto_. All packages can be installed under _Anaconda_ or _Canopy_, or with _setuptools_ or _pip_.\r\n\r\n  [1]: https://github.com/uqfoundation", ""], "have_tickets": [true], "title": "Modern optimization methods in Python", "speakers": "Michael McKerns", "track_title": "", "timerange": "2015-07-20 11:00:00, 2015-07-20 13:30:00", "duration": 150, "tags": ["optimization", "predictions", "framework", "data-science", "analytics"]}, "374": {"id": 374, "abstracts": ["Django Girls is a free, one-day workshop for women who are new to programming. During the workshop, our participants will learn how to build their first Web application using Python, Django, HTML, and CSS. Participants were selected in advance for the workshop, and our coaches are all EuroPython attendees who volunteered to mentor the participants through the process.\r\n\r\nThis year's workshop is organized by [Mikey Ariel][1] and [Petr Viktorin][2], with support from the [Django Girls][3] global organization. Since the first Django Girls workshop was held at EuroPython 2014, this workshop also marks our first birthday! After the workshop, we will operate a booth in collaboration with PyLadiesES throughout the conference, so come say hello!\r\n\r\nOfficial website: [http://djangogirls.org/europython2015/][4]\r\n\r\nTwitter: [@DjangoGirlsEP15][5]\r\n\r\n  [1]: https://twitter.com/thatdocslady\r\n  [2]: https://twitter.com/EnCuKou\r\n  [3]: http://djangogirls.org/\r\n  [4]: http://djangogirls.org/europython2015/\r\n  [5]: https://twitter.com/DjangoGirlsEP15\r\n"], "have_tickets": [true], "title": "Django Girls Workshop", "speakers": "Mikey Ariel", "track_title": "Room C1", "timerange": "2015-07-20 11:00:00, 2015-07-20 13:30:00", "duration": 180, "tags": ["workshop", "django-girls"]}, "166": {"id": 166, "abstracts": ["This training is about how to keep all your software stack under control using mainly Python technologies.\r\n\r\nWe will run some full stack deployment examples using things like Pyramid, Buildout, Ansible and Docker. \r\n\r\nWe will try to apply the Zen of Python into our DevOps infrastructure in order to make happy all stakeholders in your company/organization.\r\n\r\nThe session is divided in two sections, the first one we will cover full stack development strategies, and we will discuss subjects like design patterns, code organization and web servers, among others. We will compare how other \u201cde facto\u201d or \u201centerprise\u201d technologies in the industry are doing. \r\n\r\nIn the second part we will see how to prepare your application and power your deployments using Docker containers (www.docker.com) and  Buildout (www.buildout.org).\r\n\r\nEach part of the training session is accompanied by runnable source code and documentation.", "Este curso es acerca de como mantener tu stack de software bajo control usando principalmente tecnolog\u00edas Python.\r\n\r\nVamos a ejecutar algunos ejemplos completos de c\u00f3digo que abarquen todas las capas de desarrollo e instalaci\u00f3n usando cosas como Pyramid, Buildout, Ansible y Docker.\r\n\r\nVamos a tratar de aplicar de aplicar el Zen de Python en nuestra infraestructura DevOps con el fin the hacer felices a todos los involucrados en tu empresa/organizaci\u00f3n.\r\n\r\nLa sesi\u00f3n se divide en dos secciones, la primera abarcar\u00e1 estrategias de desarrollo 'full stack' y discuteremos temas como patrones de dise\u00f1o, organizaci\u00f3n de c\u00f3digo, y servidores web, entre otros. Vamos a comparar como otras  tecnolog\u00edas \"de facto\" o \"empresariales\" lo est\u00e1n haciendo en la industria.\r\n\r\nEn la segunda parte vamos a ver como preparar tu aplicaci\u00f3n y tus instalaciones usando contenedores docker (www.docker.com) y buildout (www.buildout.org)\r\n\r\nCada parte del entrenamiento es acompa\u00f1ada por c\u00f3digo ejecutable y documentaci\u00f3n.", ""], "have_tickets": [true], "title": "Full Stack + DevOps using Pyramid, Buildout and Docker", "speakers": "Alvaro Aguirre", "track_title": "", "timerange": "2015-07-22 14:30:00, 2015-07-22 17:30:00", "duration": 180, "tags": ["redis", "ansible", "Buildout", "Virtualization", "Enterprise", "DevOps", "docker", "SQLAlchemy", "fabric", "elasticsearch", "Pyramid"]}}, "Keynotes": {"365": {"id": 365, "abstracts": ["In this keynote, Ola and Ola will take you on a fantastic journey to the magical world of little Liz, who is totally enchanted by technology. The story of Liz will show that with a little bit of magic, curiosity, courage and hard work, you can defeat all the obstacles standing in your way. You'll discover with her that making big and scary things is easier when you're not doing them alone. Because sometimes, one magical spell, the helpful hand of a friend or this shiny sparkle is all it takes to make a dent in one's universe.", "", ""], "have_tickets": [true, true], "title": "Keynote: It's Dangerous To Go Alone, Take This: The Power of a Community", "speakers": "Ola Sitarska, Ola Sendecka", "track_title": "Google Room", "timerange": "2015-07-20 09:30:00, 2015-07-20 10:30:00", "duration": 60, "tags": ["diversity", "python", "community"]}, "366": {"id": 366, "abstracts": ["You've solved the issue of process-level reproducibility by packaging up\r\nyour apps and execution environments into a number of Docker containers.\r\nBut once you have a lot of containers running, you'll probably need to\r\ncoordinate them across a cluster of machines while keeping them healthy and\r\nmaking sure they can find each other. Trying to do this imperatively can\r\nquickly turn into an unmanageable mess! Wouldn't it be helpful if you could\r\ndeclare to your cluster what you want it to do, and then have the cluster\r\nassign the resources to get it done and to recover from failures and scale\r\non demand?\r\n>\r\nKubernetes (http://kubernetes.io) is an open source, cross platform cluster\r\nmanagement and container orchestration platform that simplifies the complex\r\ntasks of deploying and managing your applications in Docker containers. You\r\ndeclare a desired state, and Kubernetes does all the work needed to create\r\nand maintain it. In this talk, we\u2019ll look at the basics of Kubernetes and\r\nat how to map common applications to these concepts. This will include a\r\nhands-on demonstration and visualization of the steps involved in getting\r\nan application up and running on Kubernetes.", "", ""], "have_tickets": [true], "title": "Keynote: So, I have all these Docker containers, now what?", "speakers": "Mandy Waite", "track_title": "", "timerange": "", "duration": 60, "tags": ["python", "cloud", "docker"]}, "361": {"id": 361, "abstracts": ["This is *your* keynote! I will have some prepared remarks on the state of the Python community and Python's future directions, but first and foremost this will be an interactive Q&A session.", "", ""], "have_tickets": [true], "title": "Keynote: Python now and in the future", "speakers": "Guido van Rossum", "track_title": "Google Room", "timerange": "2015-07-21 09:30:00, 2015-07-21 10:30:00", "duration": 60, "tags": ["python"]}, "364": {"id": 364, "abstracts": ["The problem of introducing children to programming and computer science has\r\nseen growing attention in the past few years. Initiatives like Raspberry\r\nPi, Code Club, code.org, (and many more) have been created to help solve\r\nthis problem. With the introduction of a national computing curriculum in\r\nthe UK, teachers have been searching for a text based programming language\r\nto help teach computational thinking as a follow on from visual languages\r\nlike Scratch.\r\n\r\nThe educational community has been served well by Python, benefiting from\r\nits straight-forward syntax, large selection of libraries, and supportive\r\ncommunity. Education-focused summits are now a major part of most major\r\nPython Conferences. Assistance in terms of documentation and training is\r\ninvaluable, but perhaps there are technical means of improving the\r\nexperience of those using Python in education. Clearly the needs of\r\nteachers and their students are different to those of the seasoned\r\nprogrammer. Children are unlikely to come to their teachers with\r\nfrustrations about the Global Interpreter Lock! But issues such as\r\nusability of IDEs or comprehensibility of error messages are of utmost\r\nimportance.\r\n\r\nIn this keynote, Carrie Anne will discuss existing barriers to Python\r\nbecoming the premier language of choice for teaching computer science, and\r\nhow learning Python could be helped immensely through tooling and further\r\nsupport from the Python developer community.\r\n", "", ""], "have_tickets": [true], "title": "Keynote: Designed for Education: A Python Solution", "speakers": "Carrie Anne Philbin", "track_title": "Google Room", "timerange": "2015-07-23 09:30:00, 2015-07-23 10:30:00", "duration": 60, "tags": ["python"]}, "363": {"id": 363, "abstracts": ["In this talk, I'll discuss the recent rise of immutable state concepts in languages and network protocols.  And how the advent of hash-based data structures and replication strategies are shaking the client/server web service paradigm which rests on managing mutable state through http.  By contrast, building on git, bittorrent and other content addressed data structures provides for a more secure, efficient decentralized communication topology.   There are projects, thoughts and talk to create new web standards to bring such technologies to mass deployment and fuel a new wave of decentralization.  What can Python bring to the table?  ", "", ""], "have_tickets": [true], "title": "Keynote: Towards a more effective, decentralized web", "speakers": "Holger Krekel", "track_title": "", "timerange": "", "duration": 60, "tags": ["python"]}}, "Other sessions": {"371": {"id": 371, "abstracts": ["Recruiting sponsors presentation.", "", ""], "have_tickets": [false], "title": "Recruiting sponsors presentation", "speakers": "To be announced", "track_title": "Google Room", "timerange": "2015-07-21 16:45:00, 2015-07-21 17:30:00", "duration": 45, "tags": ["recruiting"]}}, "Help desks": {"334": {"id": 334, "abstracts": ["Scrapy is an open source and collaborative framework for extracting the data you need from websites. In a fast, simple, yet extensible way.\r\n\r\nThis helpdesk is run by members of Scrapinghub, where Scrapy was built and designed.", "", ""], "have_tickets": [true], "title": "Scrapy Helpdesk", "speakers": "Juan Riaza", "track_title": "", "timerange": "2015-07-21 10:00:00, 2015-07-21 13:00:00", "duration": 180, "tags": ["scrapy", "python", "scraping"]}, "248": {"id": 248, "abstracts": ["For this helpdesk session, I will be here to help people on ansible, be it for beginner usage or more advanced use cases ( or even bug reporting/fixing ).\r\n\r\nPrerequisite are simply to have a computer ( if needed by the question ) and familliarity with command line on a unix system ( but the more, the better )."], "have_tickets": [true], "title": "Ansible helpdesk", "speakers": "Michael Scherer", "track_title": "", "timerange": "2015-07-23 10:00:00, 2015-07-23 13:00:00", "duration": 180, "tags": ["yaml", "Operations", "CLI", "system-administration", "open-source", "linux", "ansible"]}, "369": {"id": 369, "abstracts": ["Plone help desk", "", ""], "have_tickets": [true], "title": "Plone help desk", "speakers": "Paul Roeland", "track_title": "", "timerange": "2015-07-21 10:00:00, 2015-07-21 13:00:00", "duration": 180, "tags": ["web", "Plone", "CMS"]}, "47": {"id": 47, "abstracts": ["Bring us your broken README files, your cryptic API references, and your disheveled Wiki projects! Or, just come and chat with us about life, the universe, and everything docs. \r\n\r\nOur doc(tor)s are happy to assist with all things docs: from proofreading and restructuring content, optimizing contribution workflows, to automating API docs and L10N, implementing scalable and testable markup languages, and more! \r\n\r\nThe clinic will be staffed by:\r\n\r\n* [Mikey Ariel][1] , senior technical writer at Red Hat, community lead at Write the Docs EU, documentation evangelist, agile coach, has coffee - will travel.\r\n\r\n* [Maciej Szlosarczyk][2], senior technical writer at Symantec, Linux user in rehab, experiments with Django, Swagger, and Ember.js, can talk craft beer for hours.\r\n\r\n* [Paul Roeland][3] , open source and non-profit activist, fluent in Plone and conversational in Sphinx and Robot-screenshots, mixes a mean Martini.\r\n\r\n  [1]: https://twitter.com/thatdocslady\r\n  [2]: https://twitter.com/icejam_\r\n  [3]: https://twitter.com/polyester"], "have_tickets": [true], "title": "The doc(tor)s are in! (Documentation Helpdesk)", "speakers": "Mikey Ariel", "track_title": "", "timerange": "2015-07-22 10:00:00, 2015-07-22 13:00:00", "duration": 180, "tags": ["Plone", "api", "autodoc", "education", "Best Practice", "agile", "documentation", "community", "communication", "django", "fun", "Sphinx", "translation", "internationalization", "i18n", "sphinxdocumentation"]}}}